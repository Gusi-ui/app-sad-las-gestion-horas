const { createClient } = require('@supabase/supabase-js')
require('dotenv').config({ path: '.env.local' })

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Error: Faltan variables de entorno')
  console.error('NEXT_PUBLIC_SUPABASE_URL:', supabaseUrl ? '‚úÖ' : '‚ùå')
  console.error('SUPABASE_SERVICE_ROLE_KEY:', supabaseServiceKey ? '‚úÖ' : '‚ùå')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseServiceKey)

async function createSuperAdmin() {
  console.log('üëë Creando Super Admin para SAD LAS...\n')

  try {
    // =====================================================
    // 1. VERIFICAR ESTRUCTURA
    // =====================================================
    console.log('üìã Verificando estructura de base de datos...')

    // Verificar si existe la tabla system_roles
    const { data: rolesCheck, error: rolesError } = await supabase
      .from('system_roles')
      .select('*')
      .limit(1)

    if (rolesError) {
      console.error('‚ùå Error: Tabla system_roles no existe')
      console.log('üí° Ejecuta primero el script: supabase/apply-schema.sql')
      return
    }

    // Verificar si existe la tabla admins
    const { data: adminsCheck, error: adminsError } = await supabase
      .from('admins')
      .select('*')
      .limit(1)

    if (adminsError) {
      console.error('‚ùå Error: Tabla admins no existe')
      console.log('üí° Ejecuta primero el script: supabase/apply-schema.sql')
      return
    }

    console.log('‚úÖ Estructura de base de datos verificada')

    // =====================================================
    // 2. CONFIGURAR CREDENCIALES
    // =====================================================
    // Solicitar email real para producci√≥n
    const superAdminEmail = process.env.SUPER_ADMIN_EMAIL || 'superadmin@sadlas.com'
    const superAdminPassword = process.env.SUPER_ADMIN_PASSWORD || 'SuperAdmin2025!'
    const superAdminName = process.env.SUPER_ADMIN_NAME || 'Super Administrador SAD LAS'

    console.log('\nüîë Configurando credenciales Super Admin:')
    console.log(`üìß Email: ${superAdminEmail}`)
    console.log(`üîë Contrase√±a: ${superAdminPassword}`)
    console.log(`üë§ Nombre: ${superAdminName}`)

    // =====================================================
    // 3. VERIFICAR SI YA EXISTE
    // =====================================================
    console.log('\nüîç Verificando si ya existe el Super Admin...')

    const { data: existingSuperAdmin } = await supabase
      .from('admins')
      .select('*')
      .eq('email', superAdminEmail)
      .single()

    if (existingSuperAdmin) {
      console.log('‚úÖ Super Admin ya existe')
      console.log(`üìß Email: ${existingSuperAdmin.email}`)
      console.log(`üë§ Nombre: ${existingSuperAdmin.full_name}`)
      console.log(`üÜî ID: ${existingSuperAdmin.id}`)
      console.log(`‚úÖ Activo: ${existingSuperAdmin.is_active ? 'S√≠' : 'No'}`)
      return
    }

    // =====================================================
    // 4. OBTENER ROL SUPER ADMIN
    // =====================================================
    console.log('\nüé≠ Obteniendo rol super_admin...')

    const { data: superAdminRole, error: roleError } = await supabase
      .from('system_roles')
      .select('id, name, description')
      .eq('name', 'super_admin')
      .single()

    if (roleError || !superAdminRole) {
      console.error('‚ùå Error: No se encontr√≥ el rol super_admin')
      console.log('üí° Verifica que se haya ejecutado el script de roles')
      return
    }

    console.log(`‚úÖ Rol encontrado: ${superAdminRole.name} - ${superAdminRole.description}`)

    // =====================================================
    // 5. CREAR USUARIO EN AUTH.USERS
    // =====================================================
    console.log('\nüë§ Creando usuario en auth.users...')

    const { data: authUser, error: authError } = await supabase.auth.admin.createUser({
      email: superAdminEmail,
      password: superAdminPassword,
      email_confirm: true,
      user_metadata: {
        full_name: superAdminName,
        role: 'super_admin'
      }
    })

    if (authError) {
      console.error('‚ùå Error creando usuario auth:', authError.message)
      return
    }

    console.log(`‚úÖ Usuario auth creado: ${authUser.user.id}`)

    // =====================================================
    // 6. CREAR REGISTRO EN TABLA ADMINS
    // =====================================================
    console.log('\nüìù Creando registro en tabla admins...')

    const { data: adminRecord, error: adminError } = await supabase
      .from('admins')
      .insert({
        id: authUser.user.id,
        email: superAdminEmail,
        full_name: superAdminName,
        role_id: superAdminRole.id,
        is_active: true,
        created_by: null // Es el primer admin, no tiene creador
      })
      .select()
      .single()

    if (adminError) {
      console.error('‚ùå Error creando admin:', adminError.message)
      
      // Intentar limpiar el usuario auth creado
      try {
        await supabase.auth.admin.deleteUser(authUser.user.id)
        console.log('üßπ Usuario auth eliminado por error')
      } catch (cleanupError) {
        console.error('‚ö†Ô∏è  No se pudo limpiar el usuario auth:', cleanupError.message)
      }
      return
    }

    console.log(`‚úÖ Admin creado exitosamente: ${adminRecord.id}`)

    // =====================================================
    // 7. VERIFICAR CREACI√ìN
    // =====================================================
    console.log('\nüîç Verificando creaci√≥n...')

    const { data: verification } = await supabase
      .from('admins')
      .select(`
        id,
        email,
        full_name,
        is_active,
        created_at,
        system_roles(name, description)
      `)
      .eq('id', adminRecord.id)
      .single()

    if (verification) {
      console.log('‚úÖ Verificaci√≥n exitosa:')
      console.log(`  üÜî ID: ${verification.id}`)
      console.log(`  üìß Email: ${verification.email}`)
      console.log(`  üë§ Nombre: ${verification.full_name}`)
      console.log(`  üé≠ Rol: ${verification.system_roles.name}`)
      console.log(`  üìù Descripci√≥n: ${verification.system_roles.description}`)
      console.log(`  ‚úÖ Activo: ${verification.is_active ? 'S√≠' : 'No'}`)
      console.log(`  üìÖ Creado: ${new Date(verification.created_at).toLocaleString()}`)
    }

    // =====================================================
    // 8. MOSTRAR RESUMEN
    // =====================================================
    console.log('\nüéâ ¬°Super Admin creado exitosamente!')
    console.log('\nüìã Resumen:')
    console.log('  ‚úÖ Usuario creado en auth.users')
    console.log('  ‚úÖ Registro creado en tabla admins')
    console.log('  ‚úÖ Rol super_admin asignado')
    console.log('  ‚úÖ Cuenta activada')
    console.log('\nüîë Credenciales de acceso:')
    console.log(`  üìß Email: ${superAdminEmail}`)
    console.log(`  üîë Contrase√±a: ${superAdminPassword}`)
    console.log('\n‚ö†Ô∏è  IMPORTANTE:')
    console.log('  - Cambiar la contrase√±a en el primer login')
    console.log('  - Esta cuenta tiene acceso total al sistema')
    console.log('  - Solo el Super Admin puede crear otros administradores')
    console.log('\nüåê URL de acceso:')
    console.log('  http://localhost:3000/login')

  } catch (error) {
    console.error('‚ùå Error durante la creaci√≥n:', error.message)
    process.exit(1)
  }
}

// Ejecutar el script
createSuperAdmin()
  .then(() => {
    console.log('\n‚úÖ Script completado exitosamente')
    process.exit(0)
  })
  .catch((error) => {
    console.error('\n‚ùå Error en el script:', error.message)
    process.exit(1)
  }) 