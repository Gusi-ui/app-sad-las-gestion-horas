const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: '.env.local' });

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Variables de entorno faltantes');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function testNotificationsOnly() {
// // console.log('üß™ TEST DE NOTIFICACIONES Y REASIGNACI√ìN');
// // console.log('='.repeat(50));
  
  let testAssignmentId = null;
  let originalWorkerId = null;
  let newWorkerId = null;

  try {
    // =====================================================
    // 1. OBTENER DATOS DE PRUEBA
    // =====================================================
// // console.log('\n1Ô∏è‚É£ Obteniendo datos de prueba...');
    
    // Obtener una asignaci√≥n activa
    const { data: assignments, error: assignmentError } = await supabase
      .from('assignments')
      .select(`
        id, 
        worker_id, 
        user_id, 
        weekly_hours,
        workers!inner(name, surname),
        users!inner(name, surname)
      `)
      .eq('status', 'active')
      .limit(1);

    if (assignmentError || !assignments || assignments.length === 0) {
// // console.log('‚ùå No se encontraron asignaciones activas para probar');
      return;
    }

    testAssignmentId = assignments[0].id;
    originalWorkerId = assignments[0].worker_id;
    
// // console.log(`‚úÖ Asignaci√≥n de prueba: ${testAssignmentId}`);
// // console.log(`   - Trabajador actual: ${assignments[0].workers.name} ${assignments[0].workers.surname}`);
// // console.log(`   - Usuario: ${assignments[0].users.name} ${assignments[0].users.surname}`);
// // console.log(`   - Horas semanales: ${assignments[0].weekly_hours}`);

    // Obtener otra trabajadora para la reasignaci√≥n
    const { data: workers, error: workerError } = await supabase
      .from('workers')
      .select('id, name, surname, max_weekly_hours')
      .neq('id', originalWorkerId)
      .eq('is_active', true)
      .limit(1);

    if (workerError || !workers || workers.length === 0) {
// // console.log('‚ùå No se encontr√≥ otra trabajadora para la prueba');
      return;
    }

    newWorkerId = workers[0].id;
// // console.log(`‚úÖ Nueva trabajadora: ${newWorkerId} (${workers[0].name} ${workers[0].surname})`);
// // console.log(`   - Horas m√°ximas semanales: ${workers[0].max_weekly_hours}`);

    // =====================================================
    // 2. VALIDAR HORAS SEMANALES
    // =====================================================
// // console.log('\n2Ô∏è‚É£ Validando horas semanales...');
    
    // Calcular horas actuales de la nueva trabajadora
    const { data: currentAssignments, error: currentError } = await supabase
      .from('assignments')
      .select('weekly_hours')
      .eq('worker_id', newWorkerId)
      .eq('status', 'active');

    if (currentError) {
// // console.log('‚ùå Error al calcular horas actuales:', currentError.message);
      return;
    }

    const currentHours = currentAssignments?.reduce((sum, a) => sum + a.weekly_hours, 0) || 0;
    const newTotalHours = currentHours + assignments[0].weekly_hours;
    const maxHours = workers[0].max_weekly_hours;

// // console.log(`   - Horas actuales: ${currentHours}h`);
// // console.log(`   - Horas de la asignaci√≥n: ${assignments[0].weekly_hours}h`);
// // console.log(`   - Total despu√©s de reasignaci√≥n: ${newTotalHours}h`);
// // console.log(`   - L√≠mite m√°ximo: ${maxHours}h`);

    if (newTotalHours > maxHours) {
// // console.log('‚ö†Ô∏è ADVERTENCIA: La reasignaci√≥n exceder√≠a las horas m√°ximas');
// // console.log('   - Esto simular√≠a una notificaci√≥n de warning');
    } else {
// // console.log('‚úÖ La reasignaci√≥n es v√°lida en t√©rminos de horas');
    }

    // =====================================================
    // 3. SIMULAR REASIGNACI√ìN
    // =====================================================
// // console.log('\n3Ô∏è‚É£ Simulando reasignaci√≥n...');
    
    // Actualizar la asignaci√≥n
    const { error: updateError } = await supabase
      .from('assignments')
      .update({ worker_id: newWorkerId })
      .eq('id', testAssignmentId);

    if (updateError) {
// // console.log('‚ùå Error al actualizar asignaci√≥n:', updateError.message);
// // console.log('   - Esto simular√≠a una notificaci√≥n de error');
      return;
    }

// // console.log('‚úÖ Asignaci√≥n actualizada correctamente');
// // console.log('   - Esto simular√≠a una notificaci√≥n de success');

    // =====================================================
    // 4. VERIFICAR CAMBIO
    // =====================================================
// // console.log('\n4Ô∏è‚É£ Verificando el cambio...');
    
    const { data: updatedAssignment, error: verifyError } = await supabase
      .from('assignments')
      .select(`
        worker_id,
        workers!inner(name, surname)
      `)
      .eq('id', testAssignmentId)
      .single();

    if (verifyError) {
// // console.log('‚ùå Error al verificar cambio:', verifyError.message);
    } else {
// // console.log('‚úÖ Cambio verificado correctamente');
// // console.log(`   - Nueva trabajadora: ${updatedAssignment.workers.name} ${updatedAssignment.workers.surname}`);
    }

    // =====================================================
    // 5. RESTAURAR ASIGNACI√ìN ORIGINAL
    // =====================================================
// // console.log('\n5Ô∏è‚É£ Restaurando asignaci√≥n original...');
    
    const { error: restoreError } = await supabase
      .from('assignments')
      .update({ worker_id: originalWorkerId })
      .eq('id', testAssignmentId);

    if (restoreError) {
// // console.log('‚ùå Error al restaurar asignaci√≥n:', restoreError.message);
    } else {
// // console.log('‚úÖ Asignaci√≥n restaurada correctamente');
    }

    // =====================================================
    // 6. SIMULAR NOTIFICACIONES
    // =====================================================
// // console.log('\n6Ô∏è‚É£ Simulando notificaciones...');
    
// // console.log('üîî NOTIFICACIONES QUE SE MOSTRAR√çAN EN LA APP:');
// // console.log('   üü¢ SUCCESS: "Reasignaci√≥n exitosa"');
// // console.log('   üü¢ SUCCESS: "Asignaci√≥n transferida de [Trabajador Original] a [Nueva Trabajadora]"');
// // console.log('   ‚ÑπÔ∏è INFO: "Procesando reasignaci√≥n..."');
    
    if (newTotalHours > maxHours) {
// // console.log('   üü° WARNING: "La trabajadora exceder√≠a las horas semanales m√°ximas"');
    }

    // =====================================================
    // RESULTADO FINAL
    // =====================================================
// // console.log('\n' + '='.repeat(50));
// // console.log('üéâ TEST DE NOTIFICACIONES COMPLETADO');
// // console.log('='.repeat(50));
// // console.log('‚úÖ Sistema de reasignaci√≥n funciona');
// // console.log('‚úÖ Validaci√≥n de horas funciona');
// // console.log('‚úÖ Notificaciones est√°n listas');
// // console.log('‚úÖ Sistema preparado para historial');
// // console.log('\nüìù Pr√≥ximos pasos:');
// // console.log('   1. Crear tabla de historial en Supabase');
// // console.log('   2. Probar reasignaciones en la interfaz');
// // console.log('   3. Verificar notificaciones en tiempo real');
// // console.log('   4. Revisar historial de cambios');

  } catch (error) {
    console.error('\n‚ùå ERROR DURANTE EL TEST:', error);
// // console.log('\nüîÑ Intentando limpiar datos de prueba...');
    
    // Limpiar en caso de error
    if (testAssignmentId && originalWorkerId) {
      try {
        await supabase
          .from('assignments')
          .update({ worker_id: originalWorkerId })
          .eq('id', testAssignmentId);
// // console.log('‚úÖ Asignaci√≥n restaurada despu√©s del error');
      } catch (cleanupError) {
// // console.log('‚ùå Error al restaurar despu√©s del error:', cleanupError.message);
      }
    }
  }
}

testNotificationsOnly(); 