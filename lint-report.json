[{"filePath":"/Users/alamia.es/Public/SAD/src/app/admin/assignments/[id]/edit/page.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.","line":124,"column":6,"nodeType":"ArrayExpression","endLine":124,"endColumn":20,"suggestions":[{"desc":"Update the dependencies array to be: [assignmentId, fetchData]","fix":{"range":[3022,3036],"text":"[assignmentId, fetchData]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'festivos' is defined but never used.","line":136,"column":37,"nodeType":null,"messageId":"unusedVar","endLine":136,"endColumn":45},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":144,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":144,"endColumn":20,"suggestions":[{"fix":{"range":[3685,3731],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":158,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":158,"endColumn":22,"suggestions":[{"fix":{"range":[4028,4089],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":171,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":171,"endColumn":22,"suggestions":[{"fix":{"range":[4454,4514],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":183,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":183,"endColumn":22,"suggestions":[{"fix":{"range":[4876,4930],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":216,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":216,"endColumn":20,"suggestions":[{"fix":{"range":[6154,6195],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":248,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":248,"endColumn":26,"suggestions":[{"fix":{"range":[7201,7261],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":363,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":363,"endColumn":20,"suggestions":[{"fix":{"range":[10409,10448],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport { useState, useEffect } from 'react'\nimport { useParams, useRouter } from 'next/navigation'\nimport Link from 'next/link'\nimport { supabase } from '@/lib/supabase'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { ArrowLeft, Calendar, Zap } from 'lucide-react'\nimport { useNotificationHelpers } from '@/components/ui/toast-notification'\nimport { getHolidaysForYear } from '@/lib/holidayUtils'\nimport AssignmentHistoryCard from '@/components/AssignmentHistoryCard'\n\ninterface Assignment {\n  id: string\n  worker_id: string\n  user_id: string\n  assignment_type: string\n  start_date: string\n  end_date: string | null\n  weekly_hours: number\n  status: string\n  schedule?: WeeklySchedule\n}\n\ninterface Worker {\n  id: string\n  name: string\n  surname: string\n  email?: string\n  is_active: boolean\n}\n\ninterface User {\n  id: string\n  name: string\n  surname: string\n  email?: string\n  is_active: boolean\n}\n\ninterface TimeSlot {\n  start: string\n  end: string\n}\n\ninterface DaySchedule {\n  enabled: boolean\n  timeSlots: TimeSlot[]\n}\n\ninterface WeeklySchedule {\n  monday: DaySchedule;\n  tuesday: DaySchedule;\n  wednesday: DaySchedule;\n  thursday: DaySchedule;\n  friday: DaySchedule;\n  saturday: DaySchedule;\n  sunday: DaySchedule;\n  holiday: DaySchedule;\n}\n\ninterface FormData {\n  worker_id: string\n  user_id: string\n  assignment_type: 'laborables' | 'festivos' | 'flexible'\n  start_date: string\n  end_date: string\n  weekly_hours: number\n  schedule: WeeklySchedule\n  selectedTypes: {\n    laborables: boolean\n    festivos: boolean\n    flexible: boolean\n  }\n}\n\nconst defaultDaySchedule: DaySchedule = {\n  enabled: false,\n  timeSlots: [{ start: '08:00', end: '09:00' }]\n}\n\nconst defaultWeeklySchedule: WeeklySchedule = {\n  monday: { ...defaultDaySchedule },\n  tuesday: { ...defaultDaySchedule },\n  wednesday: { ...defaultDaySchedule },\n  thursday: { ...defaultDaySchedule },\n  friday: { ...defaultDaySchedule },\n  saturday: { ...defaultDaySchedule },\n  sunday: { ...defaultDaySchedule },\n  holiday: { ...defaultDaySchedule } // Festivos entre semana\n}\n\nexport default function EditAssignmentPage() {\n  const params = useParams()\n  const router = useRouter()\n  const assignmentId = params.id as string\n  const { success, error: showError } = useNotificationHelpers()\n  \n  const [assignment, setAssignment] = useState<Assignment | null>(null)\n  const [workers, setWorkers] = useState<Worker[]>([])\n  const [users, setUsers] = useState<User[]>([])\n  const [loading, setLoading] = useState(true)\n  const [saving, setSaving] = useState(false)\n  const [formData, setFormData] = useState<FormData>({\n    worker_id: '',\n    user_id: '',\n    assignment_type: 'laborables',\n    start_date: '',\n    end_date: '',\n    weekly_hours: 0,\n    schedule: defaultWeeklySchedule,\n    selectedTypes: {\n      laborables: false,\n      festivos: false,\n      flexible: false\n    }\n  })\n\n  useEffect(() => {\n    if (assignmentId) {\n      fetchData()\n    }\n  }, [assignmentId])\n\n  // Calcular horas semanales automáticamente cuando cambia el horario\n  useEffect(() => {\n    const totalHours = calculateWeeklyHours(formData.schedule)\n    setFormData(prev => ({ ...prev, weekly_hours: totalHours }))\n  }, [formData.schedule])\n\n  useEffect(() => {\n    // Cargar festivos del año de la asignación\n    if (formData.start_date) {\n      const year = new Date(formData.start_date).getFullYear()\n      getHolidaysForYear(year).then(festivos => {\n        // setHolidays(festivos.map(f => f.date)) // Eliminado: holidays no se usa\n      })\n    }\n  }, [formData.start_date])\n\n  const fetchData = async () => {\n    if (!supabase) {\n      console.error('Supabase client no disponible')\n      setLoading(false)\n      return\n    }\n\n    try {\n      // Fetch assignment\n      const { data: assignmentData, error: assignmentError } = await supabase\n        .from('assignments')\n        .select('*')\n        .eq('id', assignmentId)\n        .single()\n\n      if (assignmentError) {\n        console.error('Error al cargar asignación:', assignmentError)\n        showError('Error al cargar asignación: ' + assignmentError.message)\n        return\n      }\n\n      // Fetch workers\n      const { data: workersData, error: workersError } = await supabase\n        .from('workers')\n        .select('id, name, surname, email, is_active')\n        .eq('is_active', true)\n        .order('name')\n\n      if (workersError) {\n        console.error('Error al cargar trabajadoras:', workersError)\n        showError(`Error al cargar trabajadoras: ${workersError.message || 'Error desconocido'}`)\n      }\n\n      // Fetch users\n      const { data: usersData, error: usersError } = await supabase\n        .from('users')\n        .select('id, name, surname, email, is_active')\n        .eq('is_active', true)\n        .order('name')\n\n      if (usersError) {\n        console.error('Error al cargar usuarios:', usersError)\n        showError(`Error al cargar usuarios: ${usersError.message || 'Error desconocido'}`)\n      }\n\n      setAssignment(assignmentData)\n      setWorkers(workersData || [])\n      setUsers(usersData || [])\n      \n      // Set form data\n      let schedule = assignmentData.schedule || defaultWeeklySchedule\n      // Asegurar que holiday existe\n      if (!schedule.holiday) {\n        schedule = { ...schedule, holiday: { ...defaultDaySchedule } }\n      }\n\n      // Determinar los tipos seleccionados basándose en el tipo de asignación\n      const selectedTypes = {\n        laborables: assignmentData.assignment_type === 'laborables',\n        festivos: assignmentData.assignment_type === 'festivos',\n        flexible: assignmentData.assignment_type === 'flexible'\n      }\n\n      setFormData({\n        worker_id: assignmentData.worker_id,\n        user_id: assignmentData.user_id,\n        assignment_type: assignmentData.assignment_type as 'laborables' | 'festivos' | 'flexible',\n        start_date: assignmentData.start_date,\n        end_date: assignmentData.end_date || '',\n        weekly_hours: assignmentData.weekly_hours,\n        schedule: schedule,\n        selectedTypes: selectedTypes\n      })\n    } catch (error) {\n      console.error('Error inesperado:', error)\n      showError('Error inesperado al cargar datos')\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const calculateWeeklyHours = (schedule: WeeklySchedule): number => {\n    let totalHours = 0\n    const days = Object.keys(schedule) as (keyof WeeklySchedule)[]\n    \n    days.forEach(day => {\n      if (schedule[day].enabled) {\n        schedule[day].timeSlots.forEach(slot => {\n          try {\n            const start = new Date(`2000-01-01T${slot.start}`)\n            const end = new Date(`2000-01-01T${slot.end}`)\n            \n            // Verificar que las fechas son válidas\n            if (isNaN(start.getTime()) || isNaN(end.getTime())) {\n              return\n            }\n            \n            const hours = (end.getTime() - start.getTime()) / (1000 * 60 * 60)\n            \n            // Verificar que las horas son válidas\n            if (isNaN(hours) || hours < 0) {\n              return\n            }\n            \n            totalHours += hours\n          } catch (error) {\n            console.error(`Error al calcular horas para ${day}:`, error)\n          }\n        })\n      }\n    })\n    \n    // Verificar que el total es válido\n    if (isNaN(totalHours)) {\n      return 0\n    }\n    \n    return Math.round(totalHours * 100) / 100 // Redondear a 2 decimales\n  }\n\n  const handleInputChange = (field: keyof FormData, value: string | number) => {\n    setFormData(prev => ({\n      ...prev,\n      [field]: value\n    }))\n  }\n\n  const handleAssignmentTypeChange = (type: 'laborables' | 'festivos' | 'flexible') => {\n    setFormData(prev => {\n      const newSelectedTypes = { ...prev.selectedTypes }\n      newSelectedTypes[type] = !newSelectedTypes[type]\n      \n      const newFormData = { \n        ...prev, \n        selectedTypes: newSelectedTypes,\n        assignment_type: type // Mantener el tipo principal para compatibilidad\n      }\n      \n      return newFormData\n    })\n  }\n\n  const validateForm = (): string[] => {\n    const errors: string[] = []\n\n    if (!formData.worker_id) {\n      errors.push('Debe seleccionar una trabajadora')\n    }\n\n    if (!formData.user_id) {\n      errors.push('Debe seleccionar un usuario')\n    }\n\n    if (!formData.start_date) {\n      errors.push('Debe especificar una fecha de inicio')\n    }\n\n    if (formData.end_date && formData.start_date && formData.end_date < formData.start_date) {\n      errors.push('La fecha de fin no puede ser anterior a la fecha de inicio')\n    }\n\n    // Verificar que al menos un tipo de asignación esté seleccionado\n    if (!formData.selectedTypes.laborables && !formData.selectedTypes.festivos && !formData.selectedTypes.flexible) {\n      errors.push('Debe seleccionar al menos un tipo de asignación')\n    }\n\n    // Verificar que al menos un día tenga horario configurado\n    const hasSchedule = Object.values(formData.schedule).some(day => day.enabled)\n    if (!hasSchedule) {\n      errors.push('Debe configurar al menos un día con horario')\n    }\n\n    return errors\n  }\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    \n    const errors = validateForm()\n    if (errors.length > 0) {\n      errors.forEach(error => showError(error))\n      return\n    }\n\n    setSaving(true)\n\n    try {\n      if (!supabase) {\n        throw new Error('Cliente Supabase no disponible')\n      }\n\n      const { data, error: supabaseError } = await supabase\n        .from('assignments')\n        .update({\n          worker_id: formData.worker_id,\n          user_id: formData.user_id,\n          assignment_type: formData.assignment_type,\n          start_date: formData.start_date,\n          end_date: formData.end_date || null,\n          weekly_hours: formData.weekly_hours,\n          schedule: formData.schedule\n        })\n        .eq('id', assignmentId)\n        .select()\n\n      if (supabaseError) {\n        throw new Error(`Error de base de datos: ${supabaseError.message} (${supabaseError.code})`)\n      }\n\n      if (!data || data.length === 0) {\n        throw new Error('No se pudo actualizar la asignación')\n      }\n\n      success('Asignación actualizada correctamente')\n\n      // Redirect to assignments list\n      setTimeout(() => {\n        router.push('/admin/assignments')\n      }, 1500)\n\n    } catch (error) {\n      console.error('Error completo:', error)\n      const errorMessage = error instanceof Error ? error.message : 'Error desconocido'\n      showError(`Error al actualizar asignación: ${errorMessage}`)\n    } finally {\n      setSaving(false)\n    }\n  }\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto\"></div>\n          <p className=\"mt-4 text-slate-600\">Cargando asignación...</p>\n        </div>\n      </div>\n    )\n  }\n\n  if (!assignment) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-center\">\n          <p className=\"text-slate-600 text-lg\">Asignación no encontrada</p>\n          <Link href=\"/admin/assignments\">\n            <Button className=\"mt-4 bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700\">\n              Volver a Asignaciones\n            </Button>\n          </Link>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\n        <div className=\"flex items-center space-x-4\">\n          <Link href=\"/admin/assignments\">\n            <Button className=\"border border-slate-300 hover:bg-slate-50 bg-white text-slate-700\">\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Volver\n            </Button>\n          </Link>\n          <div>\n            <h1 className=\"text-2xl sm:text-3xl font-bold text-slate-900\">\n              Editar Asignación\n            </h1>\n            <p className=\"text-slate-600 text-sm sm:text-base\">\n              Modificar información de la asignación\n            </p>\n          </div>\n        </div>\n      </div>\n\n      <form onSubmit={handleSubmit} className=\"space-y-6\">\n        {/* Assignment Details */}\n        <Card className=\"border-0 shadow-lg\">\n          <CardHeader className=\"bg-gradient-to-r from-slate-50 to-slate-100 border-b border-slate-200\">\n            <CardTitle className=\"flex items-center\">\n              <Calendar className=\"w-5 h-5 mr-2 text-slate-600\" />\n              Información de la Asignación\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"p-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              {/* Worker Selection */}\n              <div className=\"space-y-2\">\n                <label htmlFor=\"worker_id\" className=\"text-sm font-medium text-slate-700\">\n                  Trabajadora *\n                </label>\n                <select\n                  id=\"worker_id\"\n                  value={formData.worker_id}\n                  onChange={(e) => handleInputChange('worker_id', e.target.value)}\n                  className=\"w-full px-3 py-2 border border-slate-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                  required\n                >\n                  <option value=\"\">Seleccionar trabajadora</option>\n                  {workers.map((worker) => (\n                    <option key={worker.id} value={worker.id}>\n                      {worker.name} {worker.surname} - {worker.is_active ? 'Activo' : 'Inactivo'}\n                    </option>\n                  ))}\n                </select>\n              </div>\n\n              {/* User Selection */}\n              <div className=\"space-y-2\">\n                <label htmlFor=\"user_id\" className=\"text-sm font-medium text-slate-700\">\n                  Usuario *\n                </label>\n                <select\n                  id=\"user_id\"\n                  value={formData.user_id}\n                  onChange={(e) => handleInputChange('user_id', e.target.value)}\n                  className=\"w-full px-3 py-2 border border-slate-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                  required\n                >\n                  <option value=\"\">Seleccionar usuario</option>\n                  {users.map((user) => (\n                    <option key={user.id} value={user.id}>\n                      {user.name} {user.surname} - {user.is_active ? 'Activo' : 'Inactivo'}\n                    </option>\n                  ))}\n                </select>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Assignment Type with Toggle Switches */}\n        <Card className=\"border-0 shadow-lg\">\n          <CardHeader className=\"bg-gradient-to-r from-slate-50 to-slate-100 border-b border-slate-200\">\n            <CardTitle className=\"flex items-center\">\n              <Zap className=\"w-5 h-5 mr-2 text-slate-600\" />\n              Tipo de Asignación\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"p-6\">\n            <div className=\"space-y-4\">\n              <p className=\"text-sm text-slate-600 mb-4\">\n                Selecciona los tipos de asignación que deseas aplicar. Los cambios se reflejarán automáticamente en el horario semanal y el calendario:\n              </p>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                {/* Días Laborables */}\n                <div\n                  className={`\n                    border-2 rounded-lg p-4 cursor-pointer transition-all duration-200\n                    ${formData.selectedTypes.laborables \n                      ? 'border-blue-500 bg-blue-50' \n                      : 'border-slate-200 hover:border-slate-300'\n                    }\n                  `}\n                  onClick={() => handleAssignmentTypeChange('laborables')}\n                >\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <h3 className=\"font-semibold text-slate-900\">Días Laborables</h3>\n                    {formData.selectedTypes.laborables && (\n                      <span className=\"px-2 py-1 bg-blue-500 text-white rounded-full text-xs font-medium\">\n                        Seleccionado\n                      </span>\n                    )}\n                  </div>\n                  <p className=\"text-xs text-slate-600\">\n                    Horario de trabajo regular para la trabajadora.\n                  </p>\n                </div>\n                {/* Festivos */}\n                <div\n                  className={`\n                    border-2 rounded-lg p-4 cursor-pointer transition-all duration-200\n                    ${formData.selectedTypes.festivos \n                      ? 'border-purple-500 bg-purple-50' \n                      : 'border-slate-200 hover:border-slate-300'\n                    }\n                  `}\n                  onClick={() => handleAssignmentTypeChange('festivos')}\n                >\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <h3 className=\"font-semibold text-slate-900\">Festivos</h3>\n                    {formData.selectedTypes.festivos && (\n                      <span className=\"px-2 py-1 bg-purple-500 text-white rounded-full text-xs font-medium\">\n                        Seleccionado\n                      </span>\n                    )}\n                  </div>\n                  <p className=\"text-xs text-slate-600\">\n                    Días en los que la trabajadora no trabaja.\n                  </p>\n                </div>\n                {/* Flexible */}\n                <div\n                  className={`\n                    border-2 rounded-lg p-4 cursor-pointer transition-all duration-200\n                    ${formData.selectedTypes.flexible \n                      ? 'border-green-500 bg-green-50' \n                      : 'border-slate-200 hover:border-slate-300'\n                    }\n                  `}\n                  onClick={() => handleAssignmentTypeChange('flexible')}\n                >\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <h3 className=\"font-semibold text-slate-900\">Flexible</h3>\n                    {formData.selectedTypes.flexible && (\n                      <span className=\"px-2 py-1 bg-green-500 text-white rounded-full text-xs font-medium\">\n                        Seleccionado\n                      </span>\n                    )}\n                  </div>\n                  <p className=\"text-xs text-slate-600\">\n                    Horario de trabajo que puede variar según las necesidades.\n                  </p>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n      {/* Weekly Schedule */}\n      <Card className=\"border-0 shadow-lg\">\n        <CardHeader className=\"bg-gradient-to-r from-slate-50 to-slate-100 border-b border-slate-200\">\n          <CardTitle className=\"flex items-center\">\n            <Calendar className=\"w-5 h-5 mr-2 text-slate-600\" />\n            Horario Semanal\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"p-6\">\n          {/* Aquí puedes renderizar el horario semanal, por ejemplo, usando un componente o el propio formulario de días y tramos */}\n        </CardContent>\n      </Card>\n\n      {/* Calendar Preview */}\n      <Card className=\"border-0 shadow-lg\">\n        <CardHeader className=\"bg-gradient-to-r from-slate-50 to-slate-100 border-b border-slate-200\">\n          <CardTitle className=\"flex items-center\">\n            <Calendar className=\"w-5 h-5 mr-2 text-slate-600\" />\n            Vista Previa del Calendario\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"p-6\">\n          {/* Aquí puedes renderizar el componente de calendario, por ejemplo: */}\n          {/* <AssignmentCalendar ...props /> */}\n        </CardContent>\n      </Card>\n\n      {/* Assignment History */}\n      <Card className=\"border-0 shadow-lg\">\n        <CardHeader className=\"bg-gradient-to-r from-slate-50 to-slate-100 border-b border-slate-200\">\n          <CardTitle className=\"flex items-center\">\n            <Calendar className=\"w-5 h-5 mr-2 text-slate-600\" />\n            Historial de Cambios\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"p-6\">\n          <AssignmentHistoryCard assignmentId={assignmentId} />\n        </CardContent>\n      </Card>\n\n      {/* Save Button */}\n      <div className=\"flex justify-end\">\n        <Button type=\"submit\" className=\"bg-blue-600 hover:bg-blue-700 text-white\" disabled={saving}>\n          {saving ? 'Guardando...' : 'Guardar Cambios'}\n        </Button>\n      </div>\n    </form>\n  </div>\n  );\n}","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"/Users/alamia.es/Public/SAD/src/app/admin/assignments/[id]/page.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchAssignment'. Either include it or remove the dependency array.","line":48,"column":6,"nodeType":"ArrayExpression","endLine":48,"endColumn":20,"suggestions":[{"desc":"Update the dependencies array to be: [assignmentId, fetchAssignment]","fix":{"range":[1447,1461],"text":"[assignmentId, fetchAssignment]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":118,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":118,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport { useState, useEffect } from 'react'\nimport Link from 'next/link'\nimport { useParams, useRouter } from 'next/navigation'\nimport { supabase } from '@/lib/supabase'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { ArrowLeft, Edit, Calendar, RotateCcw, Trash2, Users, Mail, Phone, MapPin } from 'lucide-react'\nimport { useNotificationHelpers } from '@/components/ui/toast-notification'\nimport ConfirmModal from '@/components/ui/confirm-modal'\n\ninterface Assignment {\n  id: string\n  worker_id: string\n  user_id: string\n  assignment_type: string\n  start_date: string\n  end_date: string | null\n  weekly_hours: number\n  status: string\n  worker_name: string\n  worker_surname: string\n  worker_email: string\n  worker_phone: string\n  worker_address: string\n  user_name: string\n  user_surname: string\n  user_email: string\n  user_phone: string\n  user_address: string\n}\n\nexport default function AssignmentDetailPage() {\n  const params = useParams()\n  const router = useRouter()\n  const assignmentId = params.id as string\n  const { success, error: showError } = useNotificationHelpers()\n  \n  const [assignment, setAssignment] = useState<Assignment | null>(null)\n  const [loading, setLoading] = useState(true)\n  const [showDeleteModal, setShowDeleteModal] = useState(false)\n\n  useEffect(() => {\n    if (assignmentId) {\n      fetchAssignment()\n    }\n  }, [assignmentId])\n\n  const fetchAssignment = async () => {\n    if (!supabase) {\n      setLoading(false)\n      return\n    }\n\n    try {\n      const { data, error } = await supabase\n        .from('assignments')\n        .select(`\n          id,\n          worker_id,\n          user_id,\n          assignment_type,\n          start_date,\n          end_date,\n          weekly_hours,\n          status,\n          workers!inner(\n            name,\n            surname,\n            email,\n            phone,\n            address\n          ),\n          users!inner(\n            name,\n            surname,\n            email,\n            phone,\n            address\n          )\n        `)\n        .eq('id', assignmentId)\n        .single()\n\n      if (error) {\n        showError('Error al cargar asignación: ' + error.message)\n      } else {\n        type AssignmentDB = Omit<Assignment, 'worker_name' | 'worker_surname' | 'worker_email' | 'worker_phone' | 'worker_address' | 'user_name' | 'user_surname' | 'user_email' | 'user_phone' | 'user_address'> & {\n          workers?: { name: string; surname: string; email: string; phone: string; address: string }[] | { name: string; surname: string; email: string; phone: string; address: string } | null;\n          users?: { name: string; surname: string; email: string; phone: string; address: string }[] | { name: string; surname: string; email: string; phone: string; address: string } | null;\n        };\n        const worker = getFirst((data as AssignmentDB).workers);\n        const user = getFirst((data as AssignmentDB).users);\n        const formattedData: Assignment = {\n          id: data.id,\n          worker_id: data.worker_id,\n          user_id: data.user_id,\n          assignment_type: data.assignment_type,\n          start_date: data.start_date,\n          end_date: data.end_date,\n          weekly_hours: data.weekly_hours,\n          status: data.status,\n          worker_name: worker?.name || '',\n          worker_surname: worker?.surname || '',\n          worker_email: worker?.email || '',\n          worker_phone: worker?.phone || '',\n          worker_address: worker?.address || '',\n          user_name: user?.name || '',\n          user_surname: user?.surname || '',\n          user_email: user?.email || '',\n          user_phone: user?.phone || '',\n          user_address: user?.address || ''\n        };\n        \n        setAssignment(formattedData)\n      }\n    } catch (error) {\n      showError('Error inesperado al cargar asignación')\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const handleDeleteAssignment = async () => {\n    if (!supabase || !assignment) return\n    try {\n      const { error } = await supabase.from('assignments').delete().eq('id', assignment.id)\n      if (error) throw error\n      success('Asignación eliminada correctamente')\n      router.push('/admin/assignments')\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Error desconocido'\n      showError('Error al eliminar asignación: ' + errorMessage)\n    }\n  }\n\n  const handleToggleStatus = async () => {\n    if (!supabase || !assignment) {\n      showError('Error: Cliente Supabase no disponible')\n      return\n    }\n    \n    try {\n      const newStatus = assignment.status === 'active' ? 'cancelled' : 'active'\n      \n      const { data, error } = await supabase\n        .from('assignments')\n        .update({ status: newStatus })\n        .eq('id', assignment.id)\n        .select()\n\n      if (error) {\n        throw new Error(`Error de base de datos: ${error.message} (${error.code})`)\n      }\n\n      if (!data || data.length === 0) {\n        throw new Error('No se encontró la asignación para actualizar')\n      }\n      \n      setAssignment({ ...assignment, status: newStatus })\n      \n      success(`Estado cambiado correctamente a: ${getStatusLabel(newStatus)}`)\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Error desconocido'\n      showError(`Error al actualizar estado: ${errorMessage}`)\n    }\n  }\n\n  const getStatusLabel = (status: string) => {\n    switch (status) {\n      case 'active':\n        return 'Activa'\n      case 'cancelled':\n        return 'Cancelada'\n      default:\n        return status\n    }\n  }\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active':\n        return 'bg-gradient-to-r from-green-500 to-green-600 text-white'\n      case 'cancelled':\n        return 'bg-gradient-to-r from-red-500 to-red-600 text-white'\n      default:\n        return 'bg-gradient-to-r from-slate-500 to-slate-600 text-white'\n    }\n  }\n\n  const getInitials = (name: string, surname: string) => {\n    const nameInitial = name?.trim()?.charAt(0)?.toUpperCase() || 'A'\n    const surnameInitial = surname?.trim()?.charAt(0)?.toUpperCase() || ''\n    return nameInitial + surnameInitial\n  }\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('es-ES', {\n      day: '2-digit',\n      month: '2-digit',\n      year: 'numeric'\n    })\n  }\n\n  function getFirst<T>(value: T | T[] | null | undefined): T | undefined {\n    if (Array.isArray(value)) return value[0];\n    return value ?? undefined;\n  }\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto\"></div>\n          <p className=\"mt-4 text-slate-600\">Cargando asignación...</p>\n        </div>\n      </div>\n    )\n  }\n\n  if (!assignment) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-center\">\n          <p className=\"text-slate-600 text-lg\">Asignación no encontrada</p>\n          <Link href=\"/admin/assignments\">\n            <Button className=\"mt-4 bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700\">\n              Volver a Asignaciones\n            </Button>\n          </Link>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\n        <div className=\"flex items-center space-x-4\">\n          <Link href=\"/admin/assignments\">\n            <Button className=\"border border-slate-300 hover:bg-slate-50 bg-white text-slate-700\">\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Volver\n            </Button>\n          </Link>\n          <div>\n            <h1 className=\"text-2xl sm:text-3xl font-bold text-slate-900\">\n              Detalle de Asignación\n            </h1>\n            <p className=\"text-slate-600 text-sm sm:text-base\">\n              Información completa de la asignación\n            </p>\n          </div>\n        </div>\n        <div className=\"flex gap-3\">\n          <Link href={`/admin/assignments/${assignment.id}/edit`}>\n            <Button className=\"bg-gradient-to-r from-yellow-500 to-orange-500 hover:from-yellow-600 hover:to-orange-600 shadow-lg\">\n              <Edit className=\"w-4 h-4 mr-2\" />\n              Editar\n            </Button>\n          </Link>\n          <Button\n            onClick={handleToggleStatus}\n            className=\"bg-gradient-to-r from-slate-500 to-slate-600 hover:from-slate-600 hover:to-slate-700 shadow-lg\"\n          >\n            <RotateCcw className=\"w-4 h-4 mr-2\" />\n            {assignment.status === 'active' ? 'Cancelar' : 'Activar'}\n          </Button>\n          <Button\n            onClick={() => setShowDeleteModal(true)}\n            className=\"bg-gradient-to-r from-red-500 to-pink-500 hover:from-red-600 hover:to-pink-600 shadow-lg\"\n          >\n            <Trash2 className=\"w-4 h-4 mr-2\" />\n            Eliminar\n          </Button>\n        </div>\n      </div>\n\n      {/* Assignment Info */}\n      <Card className=\"border-0 shadow-lg\">\n        <CardHeader className=\"bg-gradient-to-r from-slate-50 to-slate-100 border-b border-slate-200\">\n          <CardTitle className=\"flex items-center\">\n            <Calendar className=\"w-5 h-5 mr-2 text-slate-600\" />\n            Información de la Asignación\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"p-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* Assignment Details */}\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm font-medium text-slate-600\">Tipo de Asignación:</span>\n                <span className=\"inline-flex items-center px-3 py-1.5 rounded-full text-sm font-bold bg-gradient-to-r from-blue-500 to-blue-600 text-white shadow-md\">\n                  {assignment.assignment_type}\n                </span>\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm font-medium text-slate-600\">Estado:</span>\n                <span className={`inline-flex items-center px-3 py-1.5 rounded-full text-sm font-bold shadow-md ${getStatusColor(assignment.status)}`}>\n                  {getStatusLabel(assignment.status)}\n                </span>\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm font-medium text-slate-600\">Fecha de Inicio:</span>\n                <span className=\"text-slate-900 font-medium\">{formatDate(assignment.start_date)}</span>\n              </div>\n              {assignment.end_date && (\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm font-medium text-slate-600\">Fecha de Fin:</span>\n                  <span className=\"text-slate-900 font-medium\">{formatDate(assignment.end_date)}</span>\n                </div>\n              )}\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm font-medium text-slate-600\">Horas Semanales:</span>\n                <span className=\"text-slate-900 font-medium\">{assignment.weekly_hours} horas</span>\n              </div>\n            </div>\n\n            {/* Quick Stats */}\n            <div className=\"bg-gradient-to-br from-blue-50 to-indigo-50 rounded-xl p-6\">\n              <h3 className=\"text-lg font-semibold text-slate-900 mb-4\">Resumen</h3>\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm text-slate-600\">Duración:</span>\n                  <span className=\"text-slate-900 font-medium\">\n                    {assignment.end_date ? \n                      `${Math.ceil((new Date(assignment.end_date).getTime() - new Date(assignment.start_date).getTime()) / (1000 * 60 * 60 * 24 * 7))} semanas` : \n                      'Sin fecha de fin'\n                    }\n                  </span>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm text-slate-600\">Total Horas:</span>\n                  <span className=\"text-slate-900 font-medium\">\n                    {assignment.end_date ? \n                      `${Math.ceil((new Date(assignment.end_date).getTime() - new Date(assignment.start_date).getTime()) / (1000 * 60 * 60 * 24 * 7)) * assignment.weekly_hours} horas` : \n                      'Indefinido'\n                    }\n                  </span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Worker and User Information */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Worker Card */}\n        <Card className=\"border-0 shadow-lg\">\n          <CardHeader className=\"bg-gradient-to-r from-blue-50 to-indigo-100 border-b border-blue-200\">\n            <CardTitle className=\"flex items-center\">\n              <Users className=\"w-5 h-5 mr-2 text-blue-600\" />\n              Trabajadora\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center mb-6\">\n              <div className=\"w-16 h-16 bg-gradient-to-br from-blue-500 to-indigo-600 rounded-full flex items-center justify-center text-white font-bold text-xl mr-4 shadow-lg\">\n                {getInitials(assignment.worker_name, assignment.worker_surname)}\n              </div>\n              <div>\n                <h3 className=\"text-xl font-bold text-slate-900\">\n                  {assignment.worker_name} {assignment.worker_surname}\n                </h3>\n                <p className=\"text-slate-600\">Trabajadora asignada</p>\n              </div>\n            </div>\n            \n            <div className=\"space-y-4\">\n              <div className=\"flex items-center\">\n                <Mail className=\"w-4 h-4 text-slate-400 mr-3\" />\n                <span className=\"text-slate-700\">{assignment.worker_email}</span>\n              </div>\n              <div className=\"flex items-center\">\n                <Phone className=\"w-4 h-4 text-slate-400 mr-3\" />\n                <span className=\"text-slate-700\">{assignment.worker_phone}</span>\n              </div>\n              <div className=\"flex items-start\">\n                <MapPin className=\"w-4 h-4 text-slate-400 mr-3 mt-1\" />\n                <span className=\"text-slate-700\">{assignment.worker_address}</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* User Card */}\n        <Card className=\"border-0 shadow-lg\">\n          <CardHeader className=\"bg-gradient-to-r from-green-50 to-emerald-100 border-b border-green-200\">\n            <CardTitle className=\"flex items-center\">\n              <Users className=\"w-5 h-5 mr-2 text-green-600\" />\n              Usuario\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center mb-6\">\n              <div className=\"w-16 h-16 bg-gradient-to-br from-green-500 to-emerald-600 rounded-full flex items-center justify-center text-white font-bold text-xl mr-4 shadow-lg\">\n                {getInitials(assignment.user_name, assignment.user_surname)}\n              </div>\n              <div>\n                <h3 className=\"text-xl font-bold text-slate-900\">\n                  {assignment.user_name} {assignment.user_surname}\n                </h3>\n                <p className=\"text-slate-600\">Usuario asignado</p>\n              </div>\n            </div>\n            \n            <div className=\"space-y-4\">\n              <div className=\"flex items-center\">\n                <Mail className=\"w-4 h-4 text-slate-400 mr-3\" />\n                <span className=\"text-slate-700\">{assignment.user_email}</span>\n              </div>\n              <div className=\"flex items-center\">\n                <Phone className=\"w-4 h-4 text-slate-400 mr-3\" />\n                <span className=\"text-slate-700\">{assignment.user_phone}</span>\n              </div>\n              <div className=\"flex items-start\">\n                <MapPin className=\"w-4 h-4 text-slate-400 mr-3 mt-1\" />\n                <span className=\"text-slate-700\">{assignment.user_address}</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Confirm Delete Modal */}\n      <ConfirmModal\n        isOpen={showDeleteModal}\n        onClose={() => setShowDeleteModal(false)}\n        onConfirm={handleDeleteAssignment}\n        title=\"Eliminar Asignación\"\n        message=\"¿Estás seguro de que quieres eliminar esta asignación? Esta acción no se puede deshacer.\"\n        confirmText=\"Eliminar\"\n        cancelText=\"Cancelar\"\n      />\n    </div>\n  )\n} ","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"/Users/alamia.es/Public/SAD/src/app/admin/assignments/[id]/reassign/page.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadAssignment'. Either include it or remove the dependency array.","line":98,"column":6,"nodeType":"ArrayExpression","endLine":98,"endColumn":20,"suggestions":[{"desc":"Update the dependencies array to be: [assignmentId, loadAssignment]","fix":{"range":[2401,2415],"text":"[assignmentId, loadAssignment]"}}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":124,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":124,"endColumn":20,"suggestions":[{"fix":{"range":[3049,3103],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":159,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":159,"endColumn":20,"suggestions":[{"fix":{"range":[4117,4170],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":191,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":191,"endColumn":21,"suggestions":[{"fix":{"range":[5127,5186],"text":""},"messageId":"removeConsole","data":{"propertyName":"warn"},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":207,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":207,"endColumn":20,"suggestions":[{"fix":{"range":[5838,5881],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport { useState, useEffect } from 'react'\nimport { useRouter, useParams } from 'next/navigation'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { \n  ArrowLeft, \n  UserPlus, \n  AlertTriangle, \n  CheckCircle,\n  User,\n  Calendar,\n  Users,\n  ArrowRight,\n  Clock\n} from 'lucide-react'\nimport Link from 'next/link'\nimport { supabase } from '@/lib/supabase'\nimport { useNotificationHelpers } from '@/components/ui/toast-notification'\nimport { Input as InputComponent } from '@/components/ui/input'\n\ninterface DaySchedule {\n  enabled: boolean;\n  timeSlots: { start: string; end: string }[];\n}\ninterface WeeklySchedule {\n  monday: DaySchedule;\n  tuesday: DaySchedule;\n  wednesday: DaySchedule;\n  thursday: DaySchedule;\n  friday: DaySchedule;\n  saturday: DaySchedule;\n  sunday: DaySchedule;\n  holiday: DaySchedule;\n}\ninterface Assignment {\n  id: string;\n  worker_id: string;\n  user_id: string;\n  weekly_hours: number;\n  status: string;\n  start_date: string;\n  end_date?: string;\n  assignment_type?: string;\n  schedule?: WeeklySchedule;\n  worker: {\n    id: string;\n    name: string;\n    surname: string;\n    worker_type: string;\n  } | {\n    id: string;\n    name: string;\n    surname: string;\n    worker_type: string;\n  }[];\n  user: {\n    id: string;\n    name: string;\n    surname: string;\n    client_code: string;\n  } | {\n    id: string;\n    name: string;\n    surname: string;\n    client_code: string;\n  }[];\n}\n\ninterface Worker {\n  id: string\n  name: string\n  surname: string\n  worker_type: string\n  is_active: boolean\n  max_weekly_hours: number\n  current_weekly_hours?: number\n}\n\nexport default function ReassignAssignmentPage() {\n  const router = useRouter()\n  const params = useParams()\n  const assignmentId = params.id as string\n  const { success, error: showError, warning } = useNotificationHelpers()\n\n  const [assignment, setAssignment] = useState<Assignment | null>(null)\n  const [availableWorkers, setAvailableWorkers] = useState<Worker[]>([])\n  const [selectedWorkerId, setSelectedWorkerId] = useState<string>('')\n  const [loading, setLoading] = useState(true)\n  const [reassigning, setReassigning] = useState(false)\n  const [searchTerm, setSearchTerm] = useState('')\n  const [changeReason, setChangeReason] = useState('')\n\n  useEffect(() => {\n    loadAssignment()\n    loadAvailableWorkers()\n  }, [assignmentId])\n\n  const loadAssignment = async () => {\n    if (!supabase) return;\n    try {\n      const { data, error } = await supabase\n        .from('assignments')\n        .select(`\n          id,\n          worker_id,\n          user_id,\n          weekly_hours,\n          status,\n          start_date,\n          end_date,\n          assignment_type,\n          schedule,\n          worker:workers(id, name, surname, worker_type, is_active),\n          user:users(id, name, surname, client_code, is_active)\n        `)\n        .eq('id', assignmentId)\n        .single()\n\n      if (error) throw error\n      setAssignment(data)\n    } catch (error) {\n      console.error('Error al cargar la asignación:', error)\n    }\n  }\n\n  const loadAvailableWorkers = async () => {\n    if (!supabase) return;\n    try {\n      // Cargar trabajadoras activas\n      const { data: workers, error } = await supabase\n        .from('workers')\n        .select('id, name, surname, worker_type, is_active, max_weekly_hours')\n        .eq('is_active', true)\n        .order('name')\n\n      if (error) throw error\n\n      // Calcular horas semanales actuales de cada trabajadora\n      const workersWithHours = await Promise.all(\n        workers.map(async (worker) => {\n          const { data: assignments } = await supabase\n            .from('assignments')\n            .select('weekly_hours')\n            .eq('worker_id', worker.id)\n            .eq('status', 'active')\n\n          const currentHours = assignments?.reduce((sum, a) => sum + a.weekly_hours, 0) || 0\n          return {\n            ...worker,\n            current_weekly_hours: currentHours\n          }\n        })\n      )\n\n      setAvailableWorkers(workersWithHours)\n    } catch (error) {\n      console.error('Error al cargar trabajadoras:', error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const handleReassign = async () => {\n    if (!selectedWorkerId || !assignment) return\n\n    setReassigning(true)\n    if (!supabase) return;\n    try {\n      // 1. Actualizar la asignación con la nueva trabajadora\n      const { error: updateError } = await supabase\n        .from('assignments')\n        .update({ worker_id: selectedWorkerId })\n        .eq('id', assignmentId)\n\n      if (updateError) throw updateError\n\n      // 2. Registrar la reasignación en el historial\n      const { error: historyError } = await supabase\n        .from('assignment_history')\n        .insert({\n          assignment_id: assignmentId,\n          previous_worker_id: assignment.worker_id,\n          new_worker_id: selectedWorkerId,\n          changed_by: (await supabase.auth.getUser()).data.user?.id || '',\n          change_reason: changeReason || 'Reasignación de trabajadora'\n        })\n\n      if (historyError) {\n        console.warn('Error al registrar historial:', historyError)\n        warning('Reasignación exitosa', 'No se pudo registrar en el historial')\n      } else {\n        const workerObj = Array.isArray(assignment.worker) ? assignment.worker[0] : assignment.worker;\n        const newWorker = availableWorkers.find(w => w.id === selectedWorkerId);\n        success(\n          'Reasignación exitosa',\n          `Asignación reasignada de ${workerObj?.name || ''} ${workerObj?.surname || ''} a ${newWorker?.name || ''} ${newWorker?.surname || ''}`\n        )\n      }\n\n      // 3. Redirigir al planning\n      setTimeout(() => {\n        router.push('/admin/planning?reassigned=true')\n      }, 1500)\n    } catch (error) {\n      console.error('Error al reasignar:', error)\n      showError('Error al reasignar', 'No se pudo completar la reasignación')\n    } finally {\n      setReassigning(false)\n    }\n  }\n\n  const filteredWorkers = availableWorkers.filter(worker => \n    worker.id !== assignment?.worker_id && // Excluir la trabajadora actual\n    (worker.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n     worker.surname.toLowerCase().includes(searchTerm.toLowerCase()))\n  )\n\n  const selectedWorker = availableWorkers.find(w => w.id === selectedWorkerId)\n  const canAssign = selectedWorker && \n    ((selectedWorker.current_weekly_hours || 0) + (assignment?.weekly_hours || 0)) <= selectedWorker.max_weekly_hours\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto\"></div>\n          <p className=\"mt-4 text-slate-600\">Cargando...</p>\n        </div>\n      </div>\n    )\n  }\n\n  if (!assignment) {\n    return (\n      <div className=\"min-h-screen bg-slate-50\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <Card>\n            <CardContent className=\"p-8 text-center\">\n              <AlertTriangle className=\"w-12 h-12 text-red-500 mx-auto mb-4\" />\n              <h2 className=\"text-xl font-semibold text-slate-900 mb-2\">Asignación no encontrada</h2>\n              <p className=\"text-slate-600 mb-4\">La asignación que buscas no existe o ha sido eliminada.</p>\n              <Link href=\"/admin/planning\">\n                <Button>\n                  <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                  Volver al Planning\n                </Button>\n              </Link>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    )\n  }\n\n  const workerObj = Array.isArray(assignment.worker) ? assignment.worker[0] : assignment.worker;\n  const userObj = Array.isArray(assignment.user) ? assignment.user[0] : assignment.user;\n\n  return (\n    <div className=\"min-h-screen bg-slate-50\">\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-slate-900 mb-2\">\n                Reasignar Servicio\n              </h1>\n              <p className=\"text-slate-600\">\n                Transferir asignación a otra trabajadora\n              </p>\n            </div>\n            <Link href=\"/admin/planning\">\n              <Button variant=\"secondary\">\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                Volver al Planning\n              </Button>\n            </Link>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n          {/* Información de la asignación actual */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Calendar className=\"w-5 h-5 mr-2 text-blue-600\" />\n                Asignación Actual\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex items-center space-x-3\">\n                <User className=\"w-5 h-5 text-slate-400\" />\n                <div>\n                  <p className=\"font-medium text-slate-900\">\n                    {workerObj?.name} {workerObj?.surname}\n                  </p>\n                  <p className=\"text-sm text-slate-500\">{workerObj?.worker_type}</p>\n                </div>\n              </div>\n\n              <div className=\"flex items-center space-x-3\">\n                <Users className=\"w-5 h-5 text-slate-400\" />\n                <div>\n                  <p className=\"font-medium text-slate-900\">\n                    {userObj?.name} {userObj?.surname}\n                  </p>\n                  <p className=\"text-sm text-slate-500\">{userObj?.client_code}</p>\n                </div>\n              </div>\n\n              <div className=\"flex items-center space-x-3\">\n                <Clock className=\"w-5 h-5 text-slate-400\" />\n                <div>\n                  <p className=\"font-medium text-slate-900\">{assignment.weekly_hours}h/semana</p>\n                  <p className=\"text-sm text-slate-500\">\n                    {assignment.assignment_type === 'festivos' ? 'Servicio de festivos' : 'Servicio laborable'}\n                  </p>\n                </div>\n              </div>\n\n              <div className=\"pt-4 border-t border-slate-200\">\n                <p className=\"text-sm text-slate-600\">\n                  <strong>Fecha de inicio:</strong> {new Date(assignment.start_date).toLocaleDateString('es-ES')}\n                </p>\n                {assignment.end_date && (\n                  <p className=\"text-sm text-slate-600\">\n                    <strong>Fecha de fin:</strong> {new Date(assignment.end_date).toLocaleDateString('es-ES')}\n                  </p>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Selección de nueva trabajadora */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <UserPlus className=\"w-5 h-5 mr-2 text-purple-600\" />\n                Seleccionar Nueva Trabajadora\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <label className=\"block text-sm font-medium text-slate-700 mb-2\">\n                  Buscar trabajadora\n                </label>\n                <InputComponent\n                  placeholder=\"Buscar por nombre...\"\n                  value={searchTerm}\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => setSearchTerm(e.target.value)}\n                />\n              </div>\n\n              <div className=\"space-y-2 max-h-96 overflow-y-auto\">\n                {filteredWorkers.length === 0 ? (\n                  <p className=\"text-slate-500 text-center py-4\">No se encontraron trabajadoras disponibles</p>\n                ) : (\n                  filteredWorkers.map(worker => (\n                    <div\n                      key={worker.id}\n                      className={`p-3 border rounded-lg cursor-pointer transition-colors ${\n                        selectedWorkerId === worker.id\n                          ? 'border-purple-500 bg-purple-50'\n                          : 'border-slate-200 hover:border-slate-300'\n                      }`}\n                      onClick={() => setSelectedWorkerId(worker.id)}\n                    >\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"font-medium text-slate-900\">\n                            {worker.name} {worker.surname}\n                          </p>\n                          <p className=\"text-sm text-slate-500\">{worker.worker_type}</p>\n                        </div>\n                        <div className=\"text-right\">\n                          <p className=\"text-sm font-medium text-slate-900\">\n                            {(Array.isArray(worker.current_weekly_hours) ? worker.current_weekly_hours[0] : worker.current_weekly_hours) || 0}h / {worker.max_weekly_hours}h\n                          </p>\n                          <p className=\"text-xs text-slate-500\">horas semanales</p>\n                        </div>\n                      </div>\n                      \n                      {selectedWorkerId === worker.id && (\n                        <div className=\"mt-2 pt-2 border-t border-slate-200\">\n                          <div className=\"flex items-center space-x-2\">\n                            <ArrowRight className=\"w-4 h-4 text-purple-600\" />\n                            <span className=\"text-sm text-purple-600 font-medium\">\n                              Nueva carga: {((worker.current_weekly_hours || 0) + (assignment?.weekly_hours || 0))}h/semana\n                            </span>\n                          </div>\n                          {!canAssign && (\n                            <div className=\"flex items-center space-x-2 mt-1\">\n                              <AlertTriangle className=\"w-4 h-4 text-red-500\" />\n                              <span className=\"text-sm text-red-600\">\n                                Excede el límite de horas semanales\n                              </span>\n                            </div>\n                          )}\n                        </div>\n                      )}\n                    </div>\n                  ))\n                )}\n              </div>\n\n              {selectedWorker && (\n                <div className=\"pt-4 border-t border-slate-200\">\n                  <div className=\"flex items-center space-x-2 mb-4\">\n                    <CheckCircle className=\"w-5 h-5 text-green-600\" />\n                    <span className=\"font-medium text-slate-900\">\n                      Trabajadora seleccionada: {selectedWorker.name} {selectedWorker.surname}\n                    </span>\n                  </div>\n                  \n                  <div className=\"mb-4\">\n                    <label className=\"block text-sm font-medium text-slate-700 mb-2\">\n                      Motivo del cambio (opcional)\n                    </label>\n                    <InputComponent\n                      placeholder=\"Ej: Disponibilidad, preferencia del usuario, etc.\"\n                      value={changeReason}\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => setChangeReason(e.target.value)}\n                    />\n                  </div>\n                  \n                  <Button\n                    onClick={handleReassign}\n                    disabled={!canAssign || reassigning}\n                    className=\"w-full\"\n                  >\n                    {reassigning ? (\n                      <>\n                        <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                        Reasignando...\n                      </>\n                    ) : (\n                      <>\n                        <UserPlus className=\"w-4 h-4 mr-2\" />\n                        Confirmar Reasignación\n                      </>\n                    )}\n                  </Button>\n\n                  {!canAssign && (\n                    <p className=\"text-sm text-red-600 mt-2 text-center\">\n                      Esta trabajadora no puede asumir más horas semanales\n                    </p>\n                  )}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  )\n} ","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"/Users/alamia.es/Public/SAD/src/app/admin/assignments/new/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getAvailableDaysForWorker' is defined but never used.","line":14,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":35},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getBlockedDaysForWorker' is defined but never used.","line":14,"column":37,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":60},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.","line":109,"column":6,"nodeType":"ArrayExpression","endLine":109,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [fetchData]","fix":{"range":[2726,2728],"text":"[fetchData]"}}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":119,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":119,"endColumn":20,"suggestions":[{"fix":{"range":[3038,3084],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":133,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":133,"endColumn":22,"suggestions":[{"fix":{"range":[3403,3463],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":145,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":145,"endColumn":22,"suggestions":[{"fix":{"range":[3802,3856],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":152,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":152,"endColumn":20,"suggestions":[{"fix":{"range":[4031,4072],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":184,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":184,"endColumn":26,"suggestions":[{"fix":{"range":[5078,5138],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'year' is assigned a value but never used.","line":230,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":230,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'month' is assigned a value but never used.","line":231,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":231,"endColumn":18},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":285,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":285,"endColumn":20,"suggestions":[{"fix":{"range":[8741,8815],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":425,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":425,"endColumn":20,"suggestions":[{"fix":{"range":[12481,12520],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport { useState, useEffect } from 'react'\nimport { useRouter } from 'next/navigation'\nimport Link from 'next/link'\nimport { supabase } from '@/lib/supabase'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\n\nimport { ArrowLeft, Save, Calendar, Clock, Zap, Plus, X } from 'lucide-react'\nimport { useNotificationHelpers } from '@/components/ui/toast-notification'\nimport AssignmentCalendar from '@/components/AssignmentCalendar'\nimport { getAvailableDaysForWorker, getBlockedDaysForWorker } from '@/lib/holidayUtils'\n\ninterface Worker {\n  id: string\n  name: string\n  surname: string\n  email: string\n  is_active: boolean\n}\n\ninterface User {\n  id: string\n  name: string\n  surname: string\n  email: string\n  is_active: boolean\n}\n\ninterface TimeSlot {\n  start: string\n  end: string\n}\n\ninterface DaySchedule {\n  enabled: boolean\n  timeSlots: TimeSlot[]\n}\n\ninterface WeeklySchedule {\n  monday: DaySchedule\n  tuesday: DaySchedule\n  wednesday: DaySchedule\n  thursday: DaySchedule\n  friday: DaySchedule\n  saturday: DaySchedule\n  sunday: DaySchedule\n  holiday: DaySchedule // Festivos entre semana\n}\n\ninterface FormData {\n  worker_id: string\n  user_id: string\n  assignment_type: 'laborables' | 'festivos' | 'flexible'\n  start_date: string\n  end_date: string\n  weekly_hours: number\n  schedule: WeeklySchedule\n  selectedTypes: {\n    laborables: boolean\n    festivos: boolean\n    flexible: boolean\n  }\n}\n\nconst defaultDaySchedule: DaySchedule = {\n  enabled: false,\n  timeSlots: [{ start: '08:00', end: '09:00' }]\n}\n\nconst defaultWeeklySchedule: WeeklySchedule = {\n  monday: { ...defaultDaySchedule },\n  tuesday: { ...defaultDaySchedule },\n  wednesday: { ...defaultDaySchedule },\n  thursday: { ...defaultDaySchedule },\n  friday: { ...defaultDaySchedule },\n  saturday: { ...defaultDaySchedule },\n  sunday: { ...defaultDaySchedule },\n  holiday: { ...defaultDaySchedule } // Festivos entre semana\n}\n\nexport default function NewAssignmentPage() {\n  const router = useRouter()\n  const { success, error: showError } = useNotificationHelpers()\n  \n  const [workers, setWorkers] = useState<Worker[]>([])\n  const [users, setUsers] = useState<User[]>([])\n  const [loading, setLoading] = useState(true)\n  const [saving, setSaving] = useState(false)\n  const [formData, setFormData] = useState<FormData>({\n    worker_id: '',\n    user_id: '',\n    assignment_type: 'laborables',\n    start_date: '',\n    end_date: '',\n    weekly_hours: 0,\n    schedule: defaultWeeklySchedule,\n    selectedTypes: {\n      laborables: false,\n      festivos: false,\n      flexible: false\n    }\n  })\n\n  useEffect(() => {\n    fetchData()\n  }, [])\n\n  // Calcular horas semanales automáticamente cuando cambia el horario\n  useEffect(() => {\n    const totalHours = calculateWeeklyHours(formData.schedule)\n    setFormData(prev => ({ ...prev, weekly_hours: totalHours }))\n  }, [formData.schedule])\n\n  const fetchData = async () => {\n    if (!supabase) {\n      console.error('Supabase client no disponible')\n      setLoading(false)\n      return\n    }\n\n    try {\n      // Fetch workers\n      const { data: workersData, error: workersError } = await supabase\n        .from('workers')\n        .select('id, name, surname, email, is_active')\n        .eq('is_active', true)\n        .order('name')\n\n      if (workersError) {\n        console.error('Error al cargar trabajadoras:', workersError)\n        showError('Error al cargar trabajadoras: ' + workersError.message)\n      }\n\n      // Fetch users\n      const { data: usersData, error: usersError } = await supabase\n        .from('users')\n        .select('id, name, surname, email, is_active')\n        .eq('is_active', true)\n        .order('name')\n\n      if (usersError) {\n        console.error('Error al cargar usuarios:', usersError)\n        showError('Error al cargar usuarios: ' + usersError.message)\n      }\n\n      setWorkers(workersData || [])\n      setUsers(usersData || [])\n    } catch (error) {\n      console.error('Error inesperado:', error)\n      showError('Error inesperado al cargar datos')\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const calculateWeeklyHours = (schedule: WeeklySchedule): number => {\n    let totalHours = 0\n    const days = Object.keys(schedule) as (keyof WeeklySchedule)[]\n    \n    days.forEach(day => {\n      if (schedule[day].enabled) {\n        schedule[day].timeSlots.forEach(slot => {\n          try {\n            const start = new Date(`2000-01-01T${slot.start}`)\n            const end = new Date(`2000-01-01T${slot.end}`)\n            \n            // Verificar que las fechas son válidas\n            if (isNaN(start.getTime()) || isNaN(end.getTime())) {\n              return\n            }\n            \n            const hours = (end.getTime() - start.getTime()) / (1000 * 60 * 60)\n            \n            // Verificar que las horas son válidas\n            if (isNaN(hours) || hours < 0) {\n              return\n            }\n            \n            totalHours += hours\n          } catch (error) {\n            console.error(`Error al calcular horas para ${day}:`, error)\n          }\n        })\n      }\n    })\n    \n    // Verificar que el total es válido\n    if (isNaN(totalHours)) {\n      return 0\n    }\n    \n    return Math.round(totalHours * 100) / 100 // Redondear a 2 decimales\n  }\n\n  const handleInputChange = (field: keyof FormData, value: string | number) => {\n    setFormData(prev => ({\n      ...prev,\n      [field]: value\n    }))\n  }\n\n  const handleAssignmentTypeChange = (type: string) => {\n    if (type === 'laborables' || type === 'festivos' || type === 'flexible') {\n      setFormData(prev => {\n        const newSelectedTypes = { ...prev.selectedTypes }\n        newSelectedTypes[type as keyof FormData['selectedTypes']] = !newSelectedTypes[type as keyof FormData['selectedTypes']]\n        \n        const newFormData = { \n          ...prev, \n          selectedTypes: newSelectedTypes,\n          assignment_type: type as FormData['assignment_type'] // Mantener el tipo principal para compatibilidad\n        }\n        \n        // Ajustar el horario según los tipos seleccionados\n        adjustScheduleForSelectedTypes(newSelectedTypes)\n        \n        return newFormData\n      })\n    }\n  }\n\n  const adjustScheduleForSelectedTypes = async (selectedTypes: { laborables: boolean, festivos: boolean, flexible: boolean }) => {\n    if (!formData.worker_id || !formData.start_date) return\n\n    try {\n      const startDate = new Date(formData.start_date)\n      const year = startDate.getFullYear()\n      const month = startDate.getMonth() + 1\n\n      // Obtener días disponibles para la trabajadora\n      // const availableDays = await getAvailableDaysForWorker(formData.worker_id, year, month)\n      // const blockedDays = await getBlockedDaysForWorker(formData.worker_id, year, month)\n\n      setFormData(prev => {\n        const newSchedule = { ...prev.schedule }\n\n        // Si ningún tipo está seleccionado, deshabilitar todos los días\n        if (!selectedTypes.laborables && !selectedTypes.festivos && !selectedTypes.flexible) {\n          newSchedule.monday.enabled = false\n          newSchedule.tuesday.enabled = false\n          newSchedule.wednesday.enabled = false\n          newSchedule.thursday.enabled = false\n          newSchedule.friday.enabled = false\n          newSchedule.saturday.enabled = false\n          newSchedule.sunday.enabled = false\n          newSchedule.holiday.enabled = false\n        } else {\n          // Configurar según los tipos seleccionados\n          if (selectedTypes.laborables) {\n            // Habilitar días laborables (L-V)\n            newSchedule.monday.enabled = true\n            newSchedule.tuesday.enabled = true\n            newSchedule.wednesday.enabled = true\n            newSchedule.thursday.enabled = true\n            newSchedule.friday.enabled = true\n          }\n\n          if (selectedTypes.festivos) {\n            // Habilitar fines de semana y festivos\n            newSchedule.saturday.enabled = true\n            newSchedule.sunday.enabled = true\n            newSchedule.holiday.enabled = true\n          }\n\n          if (selectedTypes.flexible) {\n            // Habilitar todos los días (sobrescribe las configuraciones anteriores)\n            newSchedule.monday.enabled = true\n            newSchedule.tuesday.enabled = true\n            newSchedule.wednesday.enabled = true\n            newSchedule.thursday.enabled = true\n            newSchedule.friday.enabled = true\n            newSchedule.saturday.enabled = true\n            newSchedule.sunday.enabled = true\n            newSchedule.holiday.enabled = true\n          }\n        }\n\n        return { ...prev, schedule: newSchedule }\n      })\n\n    } catch (error) {\n      console.error('Error al ajustar horario para tipos seleccionados:', error)\n    }\n  }\n\n  const toggleDayEnabled = (day: keyof WeeklySchedule) => {\n    setFormData(prev => ({\n      ...prev,\n      schedule: {\n        ...prev.schedule,\n        [day]: {\n          ...prev.schedule[day],\n          enabled: !prev.schedule[day].enabled\n        }\n      }\n    }))\n  }\n\n  const updateTimeSlot = (day: keyof WeeklySchedule, slotIndex: number, field: 'start' | 'end', value: string) => {\n    setFormData(prev => ({\n      ...prev,\n      schedule: {\n        ...prev.schedule,\n        [day]: {\n          ...prev.schedule[day],\n          timeSlots: prev.schedule[day].timeSlots.map((slot, index) =>\n            index === slotIndex ? { ...slot, [field]: value } : slot\n          )\n        }\n      }\n    }))\n  }\n\n  const addTimeSlot = (day: keyof WeeklySchedule) => {\n    setFormData(prev => ({\n      ...prev,\n      schedule: {\n        ...prev.schedule,\n        [day]: {\n          ...prev.schedule[day],\n          timeSlots: [...prev.schedule[day].timeSlots, { start: '08:00', end: '09:00' }]\n        }\n      }\n    }))\n  }\n\n  const removeTimeSlot = (day: keyof WeeklySchedule, slotIndex: number) => {\n    setFormData(prev => ({\n      ...prev,\n      schedule: {\n        ...prev.schedule,\n        [day]: {\n          ...prev.schedule[day],\n          timeSlots: prev.schedule[day].timeSlots.filter((_, index) => index !== slotIndex)\n        }\n      }\n    }))\n  }\n\n  const validateForm = (): string[] => {\n    const errors: string[] = []\n\n    if (!formData.worker_id) {\n      errors.push('Debe seleccionar una trabajadora')\n    }\n\n    if (!formData.user_id) {\n      errors.push('Debe seleccionar un usuario')\n    }\n\n    if (!formData.start_date) {\n      errors.push('Debe especificar una fecha de inicio')\n    }\n\n    // Verificar que al menos un día esté habilitado\n    const hasEnabledDay = Object.values(formData.schedule).some(day => day.enabled)\n    if (!hasEnabledDay) {\n      errors.push('Debe habilitar al menos un día en el horario')\n    }\n\n        // Verificar que los días habilitados tengan horarios válidos\n        Object.entries(formData.schedule).forEach(([day, daySchedule]) => {\n          if (daySchedule.enabled) {\n            daySchedule.timeSlots.forEach((slot: TimeSlot, index: number) => {\n              if (!slot.start || !slot.end) {\n                errors.push(`El tramo ${index + 1} del ${day} no tiene horario completo`)\n              }\n            })\n          }\n        })\n\n    return errors\n  }\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    \n    const errors = validateForm()\n    if (errors.length > 0) {\n      errors.forEach(error => showError(error))\n      return\n    }\n\n    setSaving(true)\n\n    try {\n      if (!supabase) {\n        throw new Error('Cliente Supabase no disponible')\n      }\n      \n      const { data, error } = await supabase\n        .from('assignments')\n        .insert({\n          worker_id: formData.worker_id,\n          user_id: formData.user_id,\n          assignment_type: formData.assignment_type,\n          start_date: formData.start_date,\n          end_date: formData.end_date || null,\n          weekly_hours: formData.weekly_hours,\n          schedule: formData.schedule,\n          status: 'active',\n          priority: 2\n        })\n        .select()\n\n      if (error) {\n        throw new Error(`Error de base de datos: ${error.message} (${error.code})`)\n      }\n\n      if (!data || data.length === 0) {\n        throw new Error('No se pudo crear la asignación')\n      }\n\n      success('Asignación creada correctamente')\n\n      // Redirect to assignments list\n      setTimeout(() => {\n        router.push('/admin/assignments')\n      }, 1500)\n\n    } catch (error) {\n      console.error('Error completo:', error)\n      const errorMessage = error instanceof Error ? error.message : 'Error desconocido'\n      showError(`Error al crear asignación: ${errorMessage}`)\n    } finally {\n      setSaving(false)\n    }\n  }\n\n  const dayNames = {\n    monday: 'Lunes',\n    tuesday: 'Martes',\n    wednesday: 'Miércoles',\n    thursday: 'Jueves',\n    friday: 'Viernes',\n    saturday: 'Sábado',\n    sunday: 'Domingo'\n  }\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto\"></div>\n          <p className=\"mt-4 text-slate-600\">Cargando datos...</p>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\n        <div className=\"flex items-center space-x-4\">\n          <Link href=\"/admin/assignments\">\n            <Button className=\"border border-slate-300 hover:bg-slate-50 bg-white text-slate-700\">\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Volver\n            </Button>\n          </Link>\n          <div>\n            <h1 className=\"text-2xl sm:text-3xl font-bold text-slate-900\">\n              Nueva Asignación\n            </h1>\n            <p className=\"text-slate-600 text-sm sm:text-base\">\n              Crear una nueva asignación de trabajadora a usuario\n            </p>\n          </div>\n        </div>\n      </div>\n\n      <form onSubmit={handleSubmit} className=\"space-y-6\">\n        {/* Assignment Details */}\n        <Card className=\"border-0 shadow-lg\">\n          <CardHeader className=\"bg-gradient-to-r from-slate-50 to-slate-100 border-b border-slate-200\">\n            <CardTitle className=\"flex items-center\">\n              <Calendar className=\"w-5 h-5 mr-2 text-slate-600\" />\n              Información de la Asignación\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"p-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              {/* Worker Selection */}\n              <div className=\"space-y-2\">\n                <label htmlFor=\"worker_id\" className=\"text-sm font-medium text-slate-700\">\n                  Trabajadora *\n                </label>\n                <select\n                  id=\"worker_id\"\n                  value={formData.worker_id}\n                  onChange={(e) => handleInputChange('worker_id', e.target.value)}\n                  className=\"w-full px-3 py-2 border border-slate-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                  required\n                >\n                  <option value=\"\">Seleccionar trabajadora</option>\n                  {workers.map((worker) => (\n                    <option key={worker.id} value={worker.id}>\n                      {worker.name} {worker.surname} - {worker.is_active ? 'Activo' : 'Inactivo'}\n                    </option>\n                  ))}\n                </select>\n              </div>\n\n              {/* User Selection */}\n              <div className=\"space-y-2\">\n                <label htmlFor=\"user_id\" className=\"text-sm font-medium text-slate-700\">\n                  Usuario *\n                </label>\n                <select\n                  id=\"user_id\"\n                  value={formData.user_id}\n                  onChange={(e) => handleInputChange('user_id', e.target.value)}\n                  className=\"w-full px-3 py-2 border border-slate-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                  required\n                >\n                  <option value=\"\">Seleccionar usuario</option>\n                  {users.map((user) => (\n                    <option key={user.id} value={user.id}>\n                      {user.name} {user.surname} - {user.is_active ? 'Activo' : 'Inactivo'}\n                    </option>\n                  ))}\n                </select>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Assignment Type with Toggle Switches */}\n        <Card className=\"border-0 shadow-lg\">\n          <CardHeader className=\"bg-gradient-to-r from-slate-50 to-slate-100 border-b border-slate-200\">\n            <CardTitle className=\"flex items-center\">\n              <Zap className=\"w-5 h-5 mr-2 text-slate-600\" />\n              Tipo de Asignación\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"p-6\">\n            <div className=\"space-y-4\">\n              <p className=\"text-sm text-slate-600 mb-4\">\n                Selecciona los tipos de asignación que deseas aplicar. Los cambios se reflejarán automáticamente en el horario semanal y el calendario:\n              </p>\n              \n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                {/* Días Laborables */}\n                <div className={`\n                  border-2 rounded-lg p-4 cursor-pointer transition-all duration-200\n                  ${formData.selectedTypes.laborables \n                    ? 'border-blue-500 bg-blue-50' \n                    : 'border-slate-200 hover:border-slate-300'\n                  }\n                `} onClick={() => handleAssignmentTypeChange('laborables')}>\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <h3 className=\"font-semibold text-slate-900\">Días Laborables</h3>\n                    <div className={`\n                      w-6 h-6 rounded-full border-2 flex items-center justify-center\n                      ${formData.selectedTypes.laborables \n                        ? 'border-blue-500 bg-blue-500' \n                        : 'border-slate-300'\n                      }\n                    `}>\n                      {formData.selectedTypes.laborables && (\n                        <div className=\"w-2 h-2 bg-white rounded-full\"></div>\n                      )}\n                    </div>\n                  </div>\n                  <p className=\"text-sm text-slate-600\">Lunes a Viernes, excluyendo festivos</p>\n                </div>\n\n                {/* Días Festivos */}\n                <div className={`\n                  border-2 rounded-lg p-4 cursor-pointer transition-all duration-200\n                  ${formData.selectedTypes.festivos \n                    ? 'border-purple-500 bg-purple-50' \n                    : 'border-slate-200 hover:border-slate-300'\n                  }\n                `} onClick={() => handleAssignmentTypeChange('festivos')}>\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <h3 className=\"font-semibold text-slate-900\">Días Festivos</h3>\n                    <div className={`\n                      w-6 h-6 rounded-full border-2 flex items-center justify-center\n                      ${formData.selectedTypes.festivos \n                        ? 'border-purple-500 bg-purple-500' \n                        : 'border-slate-300'\n                      }\n                    `}>\n                      {formData.selectedTypes.festivos && (\n                        <div className=\"w-2 h-2 bg-white rounded-full\"></div>\n                      )}\n                    </div>\n                  </div>\n                  <p className=\"text-sm text-slate-600\">Sábados, domingos y festivos entre semana</p>\n                </div>\n\n                {/* Asignación Flexible */}\n                <div className={`\n                  border-2 rounded-lg p-4 cursor-pointer transition-all duration-200\n                  ${formData.selectedTypes.flexible \n                    ? 'border-green-500 bg-green-50' \n                    : 'border-slate-200 hover:border-slate-300'\n                  }\n                `} onClick={() => handleAssignmentTypeChange('flexible')}>\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <h3 className=\"font-semibold text-slate-900\">Asignación Flexible</h3>\n                    <div className={`\n                      w-6 h-6 rounded-full border-2 flex items-center justify-center\n                      ${formData.selectedTypes.flexible \n                        ? 'border-green-500 bg-green-500' \n                        : 'border-slate-300'\n                      }\n                    `}>\n                      {formData.selectedTypes.flexible && (\n                        <div className=\"w-2 h-2 bg-white rounded-full\"></div>\n                      )}\n                    </div>\n                  </div>\n                  <p className=\"text-sm text-slate-600\">Todos los días de la semana</p>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Weekly Hours and Dates */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* Weekly Hours Card */}\n          <Card className=\"border-0 shadow-lg bg-gradient-to-br from-blue-50 to-blue-100\">\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"flex items-center text-blue-900\">\n                <Clock className=\"w-5 h-5 mr-2\" />\n                Horas Semanales\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-center\">\n                <div className=\"text-4xl font-bold text-blue-900 mb-2\">\n                  {isNaN(formData.weekly_hours) ? 0 : formData.weekly_hours}\n                </div>\n                <p className=\"text-sm text-blue-700\">horas calculadas automáticamente</p>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Start Date */}\n          <Card className=\"border-0 shadow-lg\">\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"flex items-center text-slate-900\">\n                <Calendar className=\"w-5 h-5 mr-2\" />\n                Fecha de Inicio *\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <Input\n                type=\"date\"\n                value={formData.start_date}\n                onChange={(e) => handleInputChange('start_date', e.target.value)}\n                className=\"border-slate-300 focus:border-blue-500 focus:ring-blue-500 text-lg py-3\"\n                required\n              />\n            </CardContent>\n          </Card>\n\n          {/* End Date */}\n          <Card className=\"border-0 shadow-lg\">\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"flex items-center text-slate-900\">\n                <Calendar className=\"w-5 h-5 mr-2\" />\n                Fecha de Fin (Opcional)\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <Input\n                type=\"date\"\n                value={formData.end_date}\n                onChange={(e) => handleInputChange('end_date', e.target.value)}\n                className=\"border-slate-300 focus:border-blue-500 focus:ring-blue-500 text-lg py-3\"\n              />\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Holiday Calendar Preview */}\n        <Card className=\"border-0 shadow-lg\">\n          <CardHeader className=\"bg-gradient-to-r from-slate-50 to-slate-100 border-b border-slate-200\">\n            <CardTitle className=\"flex items-center\">\n              <Calendar className=\"w-5 h-5 mr-2 text-slate-600\" />\n              Vista Previa del Calendario\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"p-6\">\n            <AssignmentCalendar\n              schedule={formData.schedule}\n              assignmentType={formData.assignment_type}\n              startDate={formData.start_date || new Date().toISOString().split('T')[0]}\n              year={new Date().getFullYear()}\n              month={new Date().getMonth() + 1}\n              className=\"mt-4\"\n            />\n          </CardContent>\n        </Card>\n\n        {/* Weekly Schedule */}\n        <Card className=\"border-0 shadow-lg\">\n          <CardHeader className=\"bg-gradient-to-r from-slate-50 to-slate-100 border-b border-slate-200\">\n            <CardTitle className=\"flex items-center\">\n              <Clock className=\"w-5 h-5 mr-2 text-slate-600\" />\n              Horario Semanal\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"p-6\">\n            <div className=\"space-y-4\">\n              {Object.entries(dayNames).map(([dayKey, dayName]) => {\n                const day = dayKey as keyof WeeklySchedule\n                const daySchedule = formData.schedule[day]\n                \n                return (\n                  <div key={day} className=\"border border-slate-200 rounded-lg p-4\">\n                    <div className=\"flex items-center justify-between mb-3\">\n                      <div className=\"flex items-center space-x-3\">\n                        <input\n                          type=\"checkbox\"\n                          id={`enable_${day}`}\n                          checked={daySchedule.enabled}\n                          onChange={() => toggleDayEnabled(day)}\n                          className=\"w-4 h-4 text-blue-600 border-slate-300 rounded focus:ring-blue-500\"\n                        />\n                        <label htmlFor={`enable_${day}`} className=\"text-sm font-medium text-slate-700\">\n                          {dayName}\n                        </label>\n                      </div>\n                      {daySchedule.enabled && (\n                        <Button\n                          type=\"button\"\n                          onClick={() => addTimeSlot(day)}\n                          className=\"text-xs px-2 py-1 bg-blue-100 text-blue-700 hover:bg-blue-200\"\n                        >\n                          <Plus className=\"w-3 h-3 mr-1\" />\n                          Añadir Tramo\n                        </Button>\n                      )}\n                    </div>\n                    \n                    {daySchedule.enabled && (\n                      <div className=\"space-y-2\">\n                        {daySchedule.timeSlots.map((slot, slotIndex) => (\n                          <div key={slotIndex} className=\"flex items-center space-x-2\">\n                            <Input\n                              type=\"time\"\n                              value={slot.start}\n                              onChange={(e) => updateTimeSlot(day, slotIndex, 'start', e.target.value)}\n                              className=\"w-24 border-slate-300 focus:border-blue-500 focus:ring-blue-500\"\n                            />\n                            <span className=\"text-slate-500\">-</span>\n                            <Input\n                              type=\"time\"\n                              value={slot.end}\n                              onChange={(e) => updateTimeSlot(day, slotIndex, 'end', e.target.value)}\n                              className=\"w-24 border-slate-300 focus:border-blue-500 focus:ring-blue-500\"\n                            />\n                            {daySchedule.timeSlots.length > 1 && (\n                              <Button\n                                type=\"button\"\n                                onClick={() => removeTimeSlot(day, slotIndex)}\n                                className=\"text-xs px-2 py-1 bg-red-100 text-red-700 hover:bg-red-200\"\n                              >\n                                <X className=\"w-3 h-3\" />\n                              </Button>\n                            )}\n                          </div>\n                        ))}\n                      </div>\n                    )}\n                  </div>\n                )\n              })}\n              {(formData.selectedTypes.festivos || formData.selectedTypes.flexible) && (\n                <div className=\"border border-slate-200 rounded-lg p-4\">\n                  <div className=\"mb-2 font-semibold text-blue-700\">Festivos entre semana</div>\n                  <div className=\"text-xs text-blue-600 mb-2\">Puedes definir un horario especial para los festivos que caen entre lunes y viernes. Este horario se aplicará automáticamente a todos los festivos entre semana.</div>\n                  <div className=\"flex items-center space-x-3 mb-3\">\n                    <input\n                      type=\"checkbox\"\n                      id=\"enable_holiday\"\n                      checked={formData.schedule.holiday?.enabled || false}\n                      onChange={() => toggleDayEnabled('holiday')}\n                      className=\"w-4 h-4 text-blue-600 border-slate-300 rounded focus:ring-blue-500\"\n                    />\n                    <label htmlFor=\"enable_holiday\" className=\"text-sm font-medium text-slate-700\">\n                      Habilitar horario para festivos entre semana\n                    </label>\n                  </div>\n                  {formData.schedule.holiday?.enabled && (\n                    <div className=\"space-y-2\">\n                      {formData.schedule.holiday.timeSlots.map((slot, slotIndex) => (\n                        <div key={slotIndex} className=\"flex items-center space-x-2\">\n                          <Input\n                            type=\"time\"\n                            value={slot.start}\n                            onChange={(e) => updateTimeSlot('holiday', slotIndex, 'start', e.target.value)}\n                            className=\"w-24 border-slate-300 focus:border-blue-500 focus:ring-blue-500\"\n                          />\n                          <span className=\"text-slate-500\">-</span>\n                          <Input\n                            type=\"time\"\n                            value={slot.end}\n                            onChange={(e) => updateTimeSlot('holiday', slotIndex, 'end', e.target.value)}\n                            className=\"w-24 border-slate-300 focus:border-blue-500 focus:ring-blue-500\"\n                          />\n                          {formData.schedule.holiday.timeSlots.length > 1 && (\n                            <Button\n                              type=\"button\"\n                              onClick={() => removeTimeSlot('holiday', slotIndex)}\n                              className=\"text-xs px-2 py-1 bg-red-100 text-red-700 hover:bg-red-200\"\n                            >\n                              <X className=\"w-3 h-3\" />\n                            </Button>\n                          )}\n                        </div>\n                      ))}\n                      <Button\n                        type=\"button\"\n                        onClick={() => addTimeSlot('holiday')}\n                        className=\"text-xs px-2 py-1 bg-blue-100 text-blue-700 hover:bg-blue-200\"\n                      >\n                        <Plus className=\"w-3 h-3 mr-1\" />\n                        Añadir Tramo\n                      </Button>\n                    </div>\n                  )}\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Submit Button */}\n        <div className=\"flex justify-end\">\n          <Button\n            type=\"submit\"\n            disabled={saving}\n            className=\"bg-blue-600 hover:bg-blue-700 text-white px-6 py-2\"\n          >\n            {saving ? (\n              <>\n                <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                Guardando...\n              </>\n            ) : (\n              <>\n                <Save className=\"w-4 h-4 mr-2\" />\n                Crear Asignación\n              </>\n            )}\n          </Button>\n        </div>\n      </form>\n\n      {/* ToastNotification is now managed by useNotificationHelpers */}\n    </div>\n  )\n} ","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"/Users/alamia.es/Public/SAD/src/app/admin/assignments/page.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchAssignments'. Either include it or remove the dependency array.","line":44,"column":6,"nodeType":"ArrayExpression","endLine":44,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [fetchAssignments]","fix":{"range":[1673,1675],"text":"[fetchAssignments]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'filterAssignments'. Either include it or remove the dependency array.","line":48,"column":6,"nodeType":"ArrayExpression","endLine":48,"endColumn":57,"suggestions":[{"desc":"Update the dependencies array to be: [assignments, filterAssignments, searchTerm, statusFilter, typeFilter]","fix":{"range":[1727,1778],"text":"[assignments, filterAssignments, searchTerm, statusFilter, typeFilter]"}}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":68,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":68,"endColumn":20,"suggestions":[{"fix":{"range":[2320,2366],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":91,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":91,"endColumn":22,"suggestions":[{"fix":{"range":[2845,2898],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":114,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":114,"endColumn":20,"suggestions":[{"fix":{"range":[3981,4022],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":197,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":197,"endColumn":20,"suggestions":[{"fix":{"range":[6966,7005],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport { useState, useEffect } from 'react'\nimport Link from 'next/link'\nimport { supabase } from '@/lib/supabase'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Search, Calendar, Plus, ChevronDown, Filter, Users, Clock, CheckCircle, XCircle } from 'lucide-react'\nimport ConfirmModal from '@/components/ui/confirm-modal'\nimport { useNotificationHelpers } from '@/components/ui/toast-notification'\n\ninterface Assignment {\n  id: string\n  worker_id: string\n  user_id: string\n  assignment_type: string\n  start_date: string\n  end_date: string | null\n  weekly_hours: number\n  status: string\n  worker_name: string\n  worker_surname: string\n  user_name: string\n  user_surname: string\n}\n\nexport default function AssignmentsPage() {\n  const { success, error: showError } = useNotificationHelpers()\n  \n  const [assignments, setAssignments] = useState<Assignment[]>([])\n  const [filteredAssignments, setFilteredAssignments] = useState<Assignment[]>([])\n  const [loading, setLoading] = useState(true)\n  const [searchTerm, setSearchTerm] = useState('')\n  const [statusFilter, setStatusFilter] = useState<'all' | 'active' | 'cancelled'>('all')\n  const [typeFilter, setTypeFilter] = useState<string>('all')\n  const [showStatusDropdown, setShowStatusDropdown] = useState(false)\n  const [showTypeDropdown, setShowTypeDropdown] = useState(false)\n  const [showDeleteModal, setShowDeleteModal] = useState(false)\n  const [assignmentToDelete, setAssignmentToDelete] = useState<string | null>(null)\n\n  useEffect(() => {\n    fetchAssignments()\n  }, [])\n\n  useEffect(() => {\n    filterAssignments()\n  }, [assignments, searchTerm, statusFilter, typeFilter])\n\n  // Cerrar dropdowns cuando se hace clic fuera\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      const target = event.target as Element\n      if (!target.closest('.filter-dropdown')) {\n        setShowStatusDropdown(false)\n        setShowTypeDropdown(false)\n      }\n    }\n\n    document.addEventListener('mousedown', handleClickOutside)\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside)\n    }\n  }, [])\n\n  const fetchAssignments = async () => {\n    if (!supabase) {\n      console.error('Supabase client no disponible')\n      setLoading(false)\n      return\n    }\n\n    try {\n      const { data, error } = await supabase\n        .from('assignments')\n        .select(`\n          id,\n          worker_id,\n          user_id,\n          assignment_type,\n          start_date,\n          end_date,\n          weekly_hours,\n          status,\n          workers!inner(name, surname),\n          users!inner(name, surname)\n        `)\n        .order('created_at', { ascending: false })\n\n      if (error) {\n        console.error('Error al cargar asignaciones:', error)\n        showError('Error al cargar asignaciones: ' + error.message)\n      } else {\n        type AssignmentDB = Omit<Assignment, 'worker_name' | 'worker_surname' | 'user_name' | 'user_surname'> & {\n          workers?: { name: string; surname: string }[] | { name: string; surname: string } | null;\n          users?: { name: string; surname: string }[] | { name: string; surname: string } | null;\n        };\n        const formattedData = (data as AssignmentDB[] | null)?.map((assignment) => {\n          const worker = Array.isArray(assignment.workers) ? assignment.workers[0] : assignment.workers;\n          const user = Array.isArray(assignment.users) ? assignment.users[0] : assignment.users;\n          return {\n            ...assignment,\n            worker_name: worker?.name || '',\n            worker_surname: worker?.surname || '',\n            user_name: user?.name || '',\n            user_surname: user?.surname || ''\n          };\n        }) || [];\n        \n        setAssignments(formattedData)\n        setFilteredAssignments(formattedData)\n      }\n    } catch (error) {\n      console.error('Error inesperado:', error)\n      showError('Error inesperado al cargar asignaciones')\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const filterAssignments = () => {\n    let filtered = assignments\n\n    // Filtrar por búsqueda\n    if (searchTerm) {\n      filtered = filtered.filter(assignment =>\n        assignment.worker_name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        assignment.worker_surname.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        assignment.user_name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        assignment.user_surname.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        assignment.assignment_type.toLowerCase().includes(searchTerm.toLowerCase())\n      )\n    }\n\n    // Filtrar por estado\n    if (statusFilter !== 'all') {\n      filtered = filtered.filter(assignment => assignment.status === statusFilter)\n    }\n\n    // Filtrar por tipo de asignación\n    if (typeFilter !== 'all') {\n      filtered = filtered.filter(assignment => assignment.assignment_type === typeFilter)\n    }\n\n    setFilteredAssignments(filtered)\n  }\n\n  const handleDeleteAssignment = async (assignmentId: string) => {\n    setAssignmentToDelete(assignmentId)\n    setShowDeleteModal(true)\n  }\n\n  const confirmDeleteAssignment = async () => {\n    if (!supabase || !assignmentToDelete) return\n    try {\n      const { error } = await supabase.from('assignments').delete().eq('id', assignmentToDelete)\n      if (error) throw error\n      setAssignments(assignments.filter(a => a.id !== assignmentToDelete))\n      setFilteredAssignments(filteredAssignments.filter(a => a.id !== assignmentToDelete))\n      success('Asignación eliminada correctamente')\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Error desconocido'\n      showError('Error al eliminar asignación: ' + errorMessage)\n    }\n  }\n\n  const handleToggleStatus = async (assignmentId: string, currentStatus: string) => {\n    if (!supabase) {\n      showError('Error: Cliente Supabase no disponible')\n      return\n    }\n    \n    try {\n      // Solo alternar entre activa y cancelada\n      const newStatus = currentStatus === 'active' ? 'cancelled' : 'active'\n      \n      const { data, error } = await supabase\n        .from('assignments')\n        .update({ status: newStatus })\n        .eq('id', assignmentId)\n        .select()\n\n      if (error) {\n        throw new Error(`Error de base de datos: ${error.message} (${error.code})`)\n      }\n\n      if (!data || data.length === 0) {\n        throw new Error('No se encontró la asignación para actualizar')\n      }\n      \n      // Actualizar el estado local\n      setAssignments(assignments.map(a => a.id === assignmentId ? { ...a, status: newStatus } : a))\n      setFilteredAssignments(filteredAssignments.map(a => a.id === assignmentId ? { ...a, status: newStatus } : a))\n      \n      success(`Estado cambiado correctamente a: ${getStatusLabel(newStatus)}`)\n    } catch (error) {\n      console.error('Error completo:', error)\n      const errorMessage = error instanceof Error ? error.message : 'Error desconocido'\n      showError(`Error al actualizar estado: ${errorMessage}`)\n    }\n  }\n\n  const getStatusLabel = (status: string) => {\n    switch (status) {\n      case 'active':\n        return 'Activa'\n      case 'cancelled':\n        return 'Cancelada'\n      case 'all':\n        return 'Todos los estados'\n      default:\n        return status\n    }\n  }\n\n  const getTypeLabel = (type: string) => {\n    switch (type) {\n      case 'all':\n        return 'Todos los tipos'\n      case 'regular':\n        return 'Regular'\n      case 'holidays':\n        return 'Festivos'\n      case 'weekends':\n        return 'Fines de semana'\n      case 'temporary':\n        return 'Temporal'\n      default:\n        return type\n    }\n  }\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active':\n        return 'bg-gradient-to-r from-green-500 to-green-600 text-white'\n      case 'cancelled':\n        return 'bg-gradient-to-r from-red-500 to-red-600 text-white'\n      default:\n        return 'bg-gradient-to-r from-slate-500 to-slate-600 text-white'\n    }\n  }\n\n  const getInitials = (name: string, surname: string) => {\n    const nameInitial = name?.trim()?.charAt(0)?.toUpperCase() || 'A'\n    const surnameInitial = surname?.trim()?.charAt(0)?.toUpperCase() || ''\n    return nameInitial + surnameInitial\n  }\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('es-ES', {\n      day: '2-digit',\n      month: '2-digit',\n      year: 'numeric'\n    })\n  }\n\n  // Stats calculations\n  const totalAssignments = assignments.length\n  const activeAssignments = assignments.filter(a => a.status === 'active').length\n  const cancelledAssignments = assignments.filter(a => a.status === 'cancelled').length\n  const totalWeeklyHours = assignments.reduce((sum, a) => sum + a.weekly_hours, 0)\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto\"></div>\n          <p className=\"mt-4 text-slate-600\">Cargando asignaciones...</p>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\n        <div>\n          <h1 className=\"text-2xl sm:text-3xl font-bold text-slate-900 mb-2\">\n            Gestión de Asignaciones\n          </h1>\n          <p className=\"text-slate-600 text-sm sm:text-base\">\n            Administra las asignaciones de trabajadoras a usuarios\n          </p>\n        </div>\n        <Link href=\"/admin/assignments/new\">\n          <Button className=\"bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 shadow-lg w-full sm:w-auto\">\n            <Plus className=\"w-4 h-4 mr-2\" />\n            Nueva Asignación\n          </Button>\n        </Link>\n      </div>\n\n      {/* Filters */}\n      <Card className=\"border-0 shadow-lg\">\n        <CardContent className=\"p-6\">\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4\">\n            {/* Search */}\n            <div className=\"relative sm:col-span-2 lg:col-span-1\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-slate-400 w-4 h-4\" />\n              <Input\n                placeholder=\"Buscar asignación...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10 border-slate-300 focus:border-blue-500 focus:ring-blue-500\"\n              />\n            </div>\n\n            {/* Status Filter */}\n            <div className=\"relative filter-dropdown\">\n              <Button\n                onClick={() => {\n                  setShowStatusDropdown(!showStatusDropdown)\n                  setShowTypeDropdown(false)\n                }}\n                className=\"w-full justify-between bg-white border border-slate-300 text-slate-700 hover:bg-slate-50\"\n              >\n                <span className=\"flex items-center\">\n                  <Filter className=\"w-4 h-4 mr-2\" />\n                  {getStatusLabel(statusFilter)}\n                </span>\n                <ChevronDown className=\"w-4 h-4\" />\n              </Button>\n              {showStatusDropdown && (\n                <div className=\"absolute z-10 w-full mt-1 bg-white border border-slate-300 rounded-md shadow-lg\">\n                  <div className=\"py-1\">\n                    <button\n                      onClick={() => {\n                        setStatusFilter('all')\n                        setShowStatusDropdown(false)\n                      }}\n                      className=\"block w-full text-left px-4 py-2 text-sm text-slate-700 hover:bg-slate-100\"\n                    >\n                      Todos los estados\n                    </button>\n                    <button\n                      onClick={() => {\n                        setStatusFilter('active')\n                        setShowStatusDropdown(false)\n                      }}\n                      className=\"block w-full text-left px-4 py-2 text-sm text-slate-700 hover:bg-slate-100\"\n                    >\n                      Activas\n                    </button>\n                    <button\n                      onClick={() => {\n                        setStatusFilter('cancelled')\n                        setShowStatusDropdown(false)\n                      }}\n                      className=\"block w-full text-left px-4 py-2 text-sm text-slate-700 hover:bg-slate-100\"\n                    >\n                      Canceladas\n                    </button>\n                  </div>\n                </div>\n              )}\n            </div>\n\n            {/* Type Filter */}\n            <div className=\"relative filter-dropdown\">\n              <Button\n                onClick={() => {\n                  setShowTypeDropdown(!showTypeDropdown)\n                  setShowStatusDropdown(false)\n                }}\n                className=\"w-full justify-between bg-white border border-slate-300 text-slate-700 hover:bg-slate-50\"\n              >\n                <span className=\"flex items-center\">\n                  <Filter className=\"w-4 h-4 mr-2\" />\n                  {getTypeLabel(typeFilter)}\n                </span>\n                <ChevronDown className=\"w-4 h-4\" />\n              </Button>\n              {showTypeDropdown && (\n                <div className=\"absolute z-10 w-full mt-1 bg-white border border-slate-300 rounded-md shadow-lg\">\n                  <div className=\"py-1\">\n                    <button\n                      onClick={() => {\n                        setTypeFilter('all')\n                        setShowTypeDropdown(false)\n                      }}\n                      className=\"block w-full text-left px-4 py-2 text-sm text-slate-700 hover:bg-slate-100\"\n                    >\n                      Todos los tipos\n                    </button>\n                    <button\n                      onClick={() => {\n                        setTypeFilter('regular')\n                        setShowTypeDropdown(false)\n                      }}\n                      className=\"block w-full text-left px-4 py-2 text-sm text-slate-700 hover:bg-slate-100\"\n                    >\n                      Regular\n                    </button>\n                    <button\n                      onClick={() => {\n                        setTypeFilter('holidays')\n                        setShowTypeDropdown(false)\n                      }}\n                      className=\"block w-full text-left px-4 py-2 text-sm text-slate-700 hover:bg-slate-100\"\n                    >\n                      Festivos\n                    </button>\n                    <button\n                      onClick={() => {\n                        setTypeFilter('weekends')\n                        setShowTypeDropdown(false)\n                      }}\n                      className=\"block w-full text-left px-4 py-2 text-sm text-slate-700 hover:bg-slate-100\"\n                    >\n                      Fines de semana\n                    </button>\n                    <button\n                      onClick={() => {\n                        setTypeFilter('temporary')\n                        setShowTypeDropdown(false)\n                      }}\n                      className=\"block w-full text-left px-4 py-2 text-sm text-slate-700 hover:bg-slate-100\"\n                    >\n                      Temporal\n                    </button>\n                  </div>\n                </div>\n              )}\n            </div>\n\n            {/* Clear Filters */}\n            <Button\n              onClick={() => {\n                setSearchTerm('')\n                setStatusFilter('all')\n                setTypeFilter('all')\n                setShowStatusDropdown(false)\n                setShowTypeDropdown(false)\n              }}\n              className=\"bg-slate-100 hover:bg-slate-200 text-slate-700 border-0 sm:col-span-2 lg:col-span-1\"\n            >\n              Limpiar Filtros\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Assignments List */}\n      <Card className=\"border-0 shadow-lg\">\n        <CardHeader className=\"bg-gradient-to-r from-slate-50 to-slate-100 border-b border-slate-200\">\n          <CardTitle className=\"flex items-center\">\n            <Users className=\"w-5 h-5 mr-2 text-slate-600\" />\n            Asignaciones ({filteredAssignments.length})\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"p-0\">\n          {filteredAssignments.length === 0 ? (\n            <div className=\"text-center py-12\">\n              <Calendar className=\"w-16 h-16 text-slate-300 mx-auto mb-4\" />\n              <p className=\"text-slate-500 text-lg\">No se encontraron asignaciones</p>\n              <p className=\"text-slate-400 text-sm mt-2\">Intenta ajustar los filtros de búsqueda</p>\n            </div>\n          ) : (\n            <>\n              {/* Desktop Table View - Card Layout */}\n              <div className=\"hidden md:block\">\n                <div className=\"space-y-4 p-6\">\n                  {filteredAssignments.slice(0, 15).map((assignment, index) => (\n                    <div key={assignment.id} className={`bg-white border border-slate-200 rounded-xl p-6 shadow-lg hover:shadow-xl transition-all duration-200 transform hover:scale-[1.01] ${index % 2 === 0 ? 'bg-white' : 'bg-slate-50/30'}`}>\n                      {/* Primera línea: Trabajadora y Usuario */}\n                      <div className=\"flex items-center justify-between mb-4\">\n                        <div className=\"flex items-center space-x-6\">\n                          <div className=\"flex items-center\">\n                            <div className=\"w-12 h-12 bg-gradient-to-br from-blue-500 to-indigo-600 rounded-full flex items-center justify-center text-white font-bold text-lg mr-4 shadow-lg\">\n                              {getInitials(assignment.worker_name, assignment.worker_surname)}\n                            </div>\n                            <div>\n                              <h3 className=\"font-bold text-slate-900 text-lg\">\n                                {assignment.worker_name} {assignment.worker_surname}\n                              </h3>\n                              <p className=\"text-sm text-slate-500 font-medium\">\n                                Trabajadora\n                              </p>\n                            </div>\n                          </div>\n                          <div className=\"flex items-center\">\n                            <div className=\"w-12 h-12 bg-gradient-to-br from-green-500 to-emerald-600 rounded-full flex items-center justify-center text-white font-bold text-lg mr-4 shadow-lg\">\n                              {getInitials(assignment.user_name, assignment.user_surname)}\n                            </div>\n                            <div>\n                              <h3 className=\"font-bold text-slate-900 text-lg\">\n                                {assignment.user_name} {assignment.user_surname}\n                              </h3>\n                              <p className=\"text-sm text-slate-500 font-medium\">\n                                Usuario\n                              </p>\n                            </div>\n                          </div>\n                        </div>\n                        <div className=\"flex gap-3\">\n                          <span className=\"inline-flex items-center px-3 py-1.5 rounded-full text-xs font-bold bg-gradient-to-r from-blue-500 to-blue-600 text-white shadow-md\">\n                            {assignment.assignment_type}\n                          </span>\n                          <span className={`inline-flex items-center px-3 py-1.5 rounded-full text-xs font-bold shadow-md ${getStatusColor(assignment.status)}`}>\n                            {getStatusLabel(assignment.status)}\n                          </span>\n                        </div>\n                      </div>\n                      \n                      {/* Segunda línea: Fecha de inicio y Horas */}\n                      <div className=\"flex items-center space-x-6 mb-4\">\n                        <div className=\"flex items-center\">\n                          <svg className=\"w-4 h-4 text-slate-400 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z\" />\n                          </svg>\n                          <span className=\"text-slate-700 font-medium\">\n                            Inicio: {formatDate(assignment.start_date)}\n                          </span>\n                        </div>\n                        <div className=\"flex items-center\">\n                          <Clock className=\"w-4 h-4 text-slate-400 mr-2\" />\n                          <span className=\"text-slate-700 font-medium\">\n                            {assignment.weekly_hours}h/semana\n                          </span>\n                        </div>\n                      </div>\n                      \n                      {/* Acciones */}\n                      <div className=\"flex justify-end gap-2\">\n                        <Link href={`/admin/assignments/${assignment.id}`}\n                          className=\"inline-flex items-center px-3 py-2 rounded-lg text-sm font-semibold bg-gradient-to-r from-blue-500 to-blue-600 text-white hover:from-blue-600 hover:to-blue-700 transition-all duration-200 shadow-md hover:shadow-lg transform hover:scale-105\">\n                          <svg className=\"w-4 h-4 mr-1\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\" />\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z\" />\n                          </svg>\n                          Ver\n                        </Link>\n                        <Link href={`/admin/assignments/${assignment.id}/edit`}\n                          className=\"inline-flex items-center px-3 py-2 rounded-lg text-sm font-semibold bg-gradient-to-r from-yellow-500 to-orange-500 text-white hover:from-yellow-600 hover:to-orange-600 transition-all duration-200 shadow-md hover:shadow-lg transform hover:scale-105\">\n                          <svg className=\"w-4 h-4 mr-1\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z\" />\n                          </svg>\n                          Editar\n                        </Link>\n                        <button\n                          onClick={() => handleToggleStatus(assignment.id, assignment.status)}\n                          className=\"inline-flex items-center px-3 py-2 rounded-lg text-sm font-semibold bg-gradient-to-r from-slate-500 to-slate-600 text-white hover:from-slate-600 hover:to-slate-700 transition-all duration-200 shadow-md hover:shadow-lg transform hover:scale-105\">\n                          <svg className=\"w-4 h-4 mr-1\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15\" />\n                          </svg>\n                          {assignment.status === 'active' ? 'Cancelar' : 'Activar'}\n                        </button>\n                        <button\n                          onClick={() => handleDeleteAssignment(assignment.id)}\n                          className=\"inline-flex items-center px-3 py-2 rounded-lg text-sm font-semibold bg-gradient-to-r from-red-500 to-pink-500 text-white hover:from-red-600 hover:to-pink-600 transition-all duration-200 shadow-md hover:shadow-lg transform hover:scale-105\">\n                          <svg className=\"w-4 h-4 mr-1\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 7l-.867 12.142A2 2 0 0116.138 21H7a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z\" />\n                          </svg>\n                          Eliminar\n                        </button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n\n              {/* Mobile Cards View */}\n              <div className=\"md:hidden\">\n                <div className=\"space-y-4 p-4\">\n                  {filteredAssignments.slice(0, 15).map((assignment) => (\n                    <div key={assignment.id} className=\"bg-white border-0 rounded-xl p-6 shadow-lg hover:shadow-xl transition-all duration-200 transform hover:scale-[1.02]\">\n                      {/* Header con avatares */}\n                      <div className=\"flex items-center justify-between mb-4\">\n                        <div className=\"flex items-center space-x-3\">\n                          <div className=\"w-10 h-10 bg-gradient-to-br from-blue-500 to-indigo-600 rounded-full flex items-center justify-center text-white font-bold text-sm shadow-lg\">\n                            {getInitials(assignment.worker_name, assignment.worker_surname)}\n                          </div>\n                          <div className=\"w-10 h-10 bg-gradient-to-br from-green-500 to-emerald-600 rounded-full flex items-center justify-center text-white font-bold text-sm shadow-lg\">\n                            {getInitials(assignment.user_name, assignment.user_surname)}\n                          </div>\n                        </div>\n                        <div className=\"flex gap-2\">\n                          <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-bold shadow-md ${getStatusColor(assignment.status)}`}>\n                            {getStatusLabel(assignment.status)}\n                          </span>\n                        </div>\n                      </div>\n                      \n                      {/* Información de trabajadora y usuario */}\n                      <div className=\"space-y-3 mb-4\">\n                        <div>\n                          <h3 className=\"font-bold text-slate-900 text-base\">\n                            {assignment.worker_name} {assignment.worker_surname}\n                          </h3>\n                          <p className=\"text-xs text-slate-500\">Trabajadora</p>\n                        </div>\n                        <div>\n                          <h3 className=\"font-bold text-slate-900 text-base\">\n                            {assignment.user_name} {assignment.user_surname}\n                          </h3>\n                          <p className=\"text-xs text-slate-500\">Usuario</p>\n                        </div>\n                      </div>\n                      \n                      {/* Tipo de asignación */}\n                      <div className=\"mb-4\">\n                        <span className=\"inline-flex items-center px-3 py-1.5 rounded-full text-xs font-bold bg-gradient-to-r from-blue-500 to-blue-600 text-white shadow-md\">\n                          {assignment.assignment_type}\n                        </span>\n                      </div>\n                      \n                      {/* Fecha de inicio y horas */}\n                      <div className=\"space-y-3 mb-4\">\n                        <div className=\"flex items-center\">\n                          <svg className=\"w-4 h-4 text-slate-400 mr-3\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z\" />\n                          </svg>\n                          <p className=\"text-slate-700 font-medium text-sm\">\n                            Inicio: {formatDate(assignment.start_date)}\n                          </p>\n                        </div>\n                        <div className=\"flex items-center\">\n                          <Clock className=\"w-4 h-4 text-slate-400 mr-3\" />\n                          <p className=\"text-slate-700 font-medium text-sm\">\n                            {assignment.weekly_hours}h/semana\n                          </p>\n                        </div>\n                      </div>\n                      \n                      {/* Botones de acción */}\n                      <div className=\"grid grid-cols-2 gap-3\">\n                        <Link href={`/admin/assignments/${assignment.id}`}\n                          className=\"inline-flex items-center justify-center px-4 py-3 rounded-lg text-sm font-semibold bg-gradient-to-r from-blue-500 to-blue-600 text-white hover:from-blue-600 hover:to-blue-700 transition-all duration-200 shadow-md hover:shadow-lg transform hover:scale-105\">\n                          <svg className=\"w-4 h-4 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\" />\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z\" />\n                          </svg>\n                          Ver\n                        </Link>\n                        <Link href={`/admin/assignments/${assignment.id}/edit`}\n                          className=\"inline-flex items-center justify-center px-4 py-3 rounded-lg text-sm font-semibold bg-gradient-to-r from-yellow-500 to-orange-500 text-white hover:from-yellow-600 hover:to-orange-600 transition-all duration-200 shadow-md hover:shadow-lg transform hover:scale-105\">\n                          <svg className=\"w-4 h-4 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z\" />\n                          </svg>\n                          Editar\n                        </Link>\n                        <button\n                          onClick={() => handleToggleStatus(assignment.id, assignment.status)}\n                          className=\"inline-flex items-center justify-center px-4 py-3 rounded-lg text-sm font-semibold bg-gradient-to-r from-slate-500 to-slate-600 text-white hover:from-slate-600 hover:to-slate-700 transition-all duration-200 shadow-md hover:shadow-lg transform hover:scale-105\">\n                          <svg className=\"w-4 h-4 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15\" />\n                          </svg>\n                          {assignment.status === 'active' ? 'Cancelar' : 'Activar'}\n                        </button>\n                        <button\n                          onClick={() => handleDeleteAssignment(assignment.id)}\n                          className=\"inline-flex items-center justify-center px-4 py-3 rounded-lg text-sm font-semibold bg-gradient-to-r from-red-500 to-pink-500 text-white hover:from-red-600 hover:to-pink-600 transition-all duration-200 shadow-md hover:shadow-lg transform hover:scale-105\">\n                          <svg className=\"w-4 h-4 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 7l-.867 12.142A2 2 0 0116.138 21H7a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z\" />\n                          </svg>\n                          Eliminar\n                        </button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Stats - Moved to bottom */}\n      <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4\">\n        <Card className=\"border-0 shadow-lg\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <div className=\"w-12 h-12 bg-gradient-to-br from-blue-500 to-indigo-600 rounded-full flex items-center justify-center mr-4 shadow-lg\">\n                <Calendar className=\"w-6 h-6 text-white\" />\n              </div>\n              <div>\n                <p className=\"text-sm font-medium text-slate-600\">Total</p>\n                <p className=\"text-2xl font-bold text-slate-900\">{totalAssignments}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"border-0 shadow-lg\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <div className=\"w-12 h-12 bg-gradient-to-br from-green-500 to-emerald-600 rounded-full flex items-center justify-center mr-4 shadow-lg\">\n                <CheckCircle className=\"w-6 h-6 text-white\" />\n              </div>\n              <div>\n                <p className=\"text-sm font-medium text-slate-600\">Activas</p>\n                <p className=\"text-2xl font-bold text-slate-900\">{activeAssignments}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"border-0 shadow-lg\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <div className=\"w-12 h-12 bg-gradient-to-br from-red-500 to-pink-600 rounded-full flex items-center justify-center mr-4 shadow-lg\">\n                <XCircle className=\"w-6 h-6 text-white\" />\n              </div>\n              <div>\n                <p className=\"text-sm font-medium text-slate-600\">Canceladas</p>\n                <p className=\"text-2xl font-bold text-slate-900\">{cancelledAssignments}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"border-0 shadow-lg\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <div className=\"w-12 h-12 bg-gradient-to-br from-purple-500 to-indigo-600 rounded-full flex items-center justify-center mr-4 shadow-lg\">\n                <Clock className=\"w-6 h-6 text-white\" />\n              </div>\n              <div>\n                <p className=\"text-sm font-medium text-slate-600\">Horas/Semana</p>\n                <p className=\"text-2xl font-bold text-slate-900\">{totalWeeklyHours}h</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Confirm Delete Modal */}\n      <ConfirmModal\n        isOpen={showDeleteModal}\n        onClose={() => setShowDeleteModal(false)}\n        onConfirm={confirmDeleteAssignment}\n        title=\"Eliminar Asignación\"\n        message=\"¿Estás seguro de que quieres eliminar esta asignación? Esta acción no se puede deshacer.\"\n        confirmText=\"Eliminar\"\n        cancelText=\"Cancelar\"\n      />\n\n      {/* Toast Notification */}\n      {/* The ToastNotification component was removed from imports, so this block is now empty */}\n    </div>\n  )\n} ","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"/Users/alamia.es/Public/SAD/src/app/admin/dashboard/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Badge' is defined but never used.","line":24,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DaySchedule' is defined but never used.","line":31,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":31,"endColumn":22},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":88,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":88,"endColumn":24,"suggestions":[{"fix":{"range":[2297,2350],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":90,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":90,"endColumn":24,"suggestions":[{"fix":{"range":[2378,2442],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'data' is defined but never used.","line":98,"column":37,"nodeType":null,"messageId":"unusedVar","endLine":98,"endColumn":41},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":100,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":100,"endColumn":22,"suggestions":[{"fix":{"range":[2597,2647],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":254,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":254,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'currentMonth' is assigned a value but never used.","line":305,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":305,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'currentYear' is assigned a value but never used.","line":306,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":306,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":361,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":361,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'index' is defined but never used.","line":532,"column":61,"nodeType":null,"messageId":"unusedVar","endLine":532,"endColumn":66}],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchRecentActivity'. Either include it or remove the dependency array.","line":267,"column":6,"nodeType":"ArrayExpression","endLine":267,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [fetchRecentActivity]","fix":{"range":[9346,9348],"text":"[fetchRecentActivity]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport { useState, useEffect } from 'react'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport {\n  Users,\n  UserCheck,\n  Calendar,\n  TrendingUp,\n  Clock,\n  Plus,\n  BarChart3,\n  ArrowRight,\n  Activity,\n  Target,\n  ExternalLink\n} from 'lucide-react'\nimport Link from 'next/link'\nimport { useRouter } from 'next/navigation'\nimport { supabase } from '@/lib/supabase'\nimport { useAuth } from '@/contexts/AuthContext'\nimport { useMonthlyBalances } from '@/hooks/useMonthlyBalances'\nimport { Badge } from '@/components/ui/badge'\n\ninterface TimeSlot {\n  start: string\n  end: string\n}\n\ninterface DaySchedule {\n  enabled: boolean\n  timeSlots: TimeSlot[]\n}\n\ninterface DashboardStats {\n  workers: {\n    total: number\n    active: number\n  }\n  users: {\n    total: number\n    active: number\n  }\n  assignments: {\n    total: number\n    active: number\n  }\n  monthlyHours: number\n}\n\ninterface RecentActivity {\n  id: string\n  type: 'worker' | 'user' | 'assignment' | 'monthly_plan'\n  message: string\n  time: string\n  icon: React.ReactNode\n  created_at: string\n}\n\nexport default function AdminDashboard() {\n  const { user } = useAuth();\n  const router = useRouter();\n  const [loading, setLoading] = useState(true)\n  const [stats, setStats] = useState<DashboardStats>({\n    workers: { total: 0, active: 0 },\n    users: { total: 0, active: 0 },\n    assignments: { total: 0, active: 0 },\n    monthlyHours: 0\n  })\n  const [recentActivity, setRecentActivity] = useState<RecentActivity[]>([])\n\n  // Hook para balances mensuales del mes actual\n  const { balances, loading: loadingBalances, error: errorBalances } = useMonthlyBalances({ year: new Date().getFullYear(), month: new Date().getMonth() + 1 })\n\n  // Estado para mapear user_id a nombre completo\n  const [userMap, setUserMap] = useState<Record<string, string>>({})\n  useEffect(() => {\n    async function fetchUsers() {\n      if (!supabase) return;\n      const { data, error } = await supabase.from('users').select('id, name, surname')\n      if (!error && Array.isArray(data)) {\n        const map: Record<string, string> = {};\n        data.forEach((u) => { map[u.id] = `${u.name} ${u.surname}` });\n        setUserMap(map);\n      } else {\n        if (error) {\n          console.error('Error al consultar usuarios:', error);\n        } else {\n          console.error('La respuesta de usuarios no es un array:', data);\n        }\n      }\n    }\n    fetchUsers()\n  }, [])\n\n  useEffect(() => {\n    supabase.auth.getUser().then(({ data, error }) => {\n      if (error) {\n        console.error('Error obteniendo usuario:', error);\n      }\n    });\n  }, []);\n\n  const fetchRecentActivity = async () => {\n    if (!supabase) return;\n\n    try {\n      const activities: RecentActivity[] = []\n\n      // 1. Obtener trabajadoras recientes (creadas y actualizadas)\n      const { data: recentWorkers, error: workersError } = await supabase\n        .from('workers')\n        .select('id, name, surname, created_at, updated_at, is_active')\n        .order('updated_at', { ascending: false })\n        .limit(10)\n\n      if (!workersError && recentWorkers) {\n        recentWorkers.forEach(worker => {\n          const isRecentlyCreated = new Date(worker.created_at).getTime() > new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).getTime()\n          const isRecentlyUpdated = new Date(worker.updated_at).getTime() > new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).getTime()\n\n          if (isRecentlyCreated) {\n            activities.push({\n              id: `worker-created-${worker.id}`,\n              type: 'worker',\n              message: `Trabajadora ${worker.name} ${worker.surname} registrada`,\n              time: formatTimeAgo(worker.created_at),\n              icon: <UserCheck className=\"w-4 h-4\" />,\n              created_at: worker.created_at\n            })\n          } else if (isRecentlyUpdated && worker.updated_at !== worker.created_at) {\n            activities.push({\n              id: `worker-updated-${worker.id}`,\n              type: 'worker',\n              message: `Datos de ${worker.name} ${worker.surname} actualizados`,\n              time: formatTimeAgo(worker.updated_at),\n              icon: <UserCheck className=\"w-4 h-4\" />,\n              created_at: worker.updated_at\n            })\n          }\n        })\n      }\n\n      // 2. Obtener usuarios recientes (creados y actualizados)\n      const { data: recentUsers, error: usersError } = await supabase\n        .from('users')\n        .select('id, name, surname, created_at, updated_at, is_active')\n        .order('updated_at', { ascending: false })\n        .limit(10)\n\n      if (!usersError && recentUsers) {\n        recentUsers.forEach(user => {\n          const isRecentlyCreated = new Date(user.created_at).getTime() > new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).getTime()\n          const isRecentlyUpdated = new Date(user.updated_at).getTime() > new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).getTime()\n\n          if (isRecentlyCreated) {\n            activities.push({\n              id: `user-created-${user.id}`,\n              type: 'user',\n              message: `Usuario ${user.name} ${user.surname} agregado`,\n              time: formatTimeAgo(user.created_at),\n              icon: <Users className=\"w-4 h-4\" />,\n              created_at: user.created_at\n            })\n          } else if (isRecentlyUpdated && user.updated_at !== user.created_at) {\n            activities.push({\n              id: `user-updated-${user.id}`,\n              type: 'user',\n              message: `Datos de ${user.name} ${user.surname} actualizados`,\n              time: formatTimeAgo(user.updated_at),\n              icon: <Users className=\"w-4 h-4\" />,\n              created_at: user.updated_at\n            })\n          }\n        })\n      }\n\n      // 3. Obtener asignaciones recientes (creadas y actualizadas)\n      const { data: recentAssignments, error: assignmentsError } = await supabase\n        .from('assignments')\n        .select(`\n          id,\n          created_at,\n          updated_at,\n          status,\n          assignment_type,\n          workers(name, surname),\n          users(name, surname)\n        `)\n        .order('updated_at', { ascending: false })\n        .limit(10)\n\n      if (!assignmentsError && recentAssignments) {\n        recentAssignments.forEach(assignment => {\n          const isRecentlyCreated = new Date(assignment.created_at).getTime() > new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).getTime()\n          const isRecentlyUpdated = new Date(assignment.updated_at).getTime() > new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).getTime()\n\n          const workerName = assignment.workers ? `${assignment.workers.name} ${assignment.workers.surname}` : 'Trabajadora'\n          const userName = assignment.users ? `${assignment.users.name} ${assignment.users.surname}` : 'Usuario'\n\n          if (isRecentlyCreated) {\n            activities.push({\n              id: `assignment-created-${assignment.id}`,\n              type: 'assignment',\n              message: `Asignación creada: ${workerName} → ${userName}`,\n              time: formatTimeAgo(assignment.created_at),\n              icon: <Calendar className=\"w-4 h-4\" />,\n              created_at: assignment.created_at\n            })\n          } else if (isRecentlyUpdated && assignment.updated_at !== assignment.created_at) {\n            activities.push({\n              id: `assignment-updated-${assignment.id}`,\n              type: 'assignment',\n              message: `Asignación actualizada: ${workerName} → ${userName}`,\n              time: formatTimeAgo(assignment.updated_at),\n              icon: <Calendar className=\"w-4 h-4\" />,\n              created_at: assignment.updated_at\n            })\n          }\n        })\n      }\n\n      // 4. Obtener balances mensuales recientes\n      const { data: recentBalances, error: balancesError } = await supabase\n        .from('monthly_balances')\n        .select('id, created_at, user_id')\n        .order('created_at', { ascending: false })\n        .limit(5)\n\n      if (!balancesError && recentBalances) {\n        recentBalances.forEach(balance => {\n          const isRecentlyCreated = new Date(balance.created_at).getTime() > new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).getTime()\n\n          if (isRecentlyCreated) {\n            activities.push({\n              id: `balance-created-${balance.id}`,\n              type: 'monthly_plan',\n              message: `Balance mensual generado para usuario ${balance.user_id}`,\n              time: formatTimeAgo(balance.created_at),\n              icon: <BarChart3 className=\"w-4 h-4\" />,\n              created_at: balance.created_at\n            })\n          }\n        })\n      }\n\n      // Ordenar todas las actividades por fecha de creación (más recientes primero)\n      activities.sort((a, b) => new Date(b.created_at).getTime() - new Date(a.created_at).getTime())\n\n      // Tomar solo las 15 más recientes\n      setRecentActivity(activities.slice(0, 15))\n\n    } catch (error) {\n      // Puedes dejar el error, pero sin console.log\n    }\n  }\n\n  useEffect(() => {\n    fetchDashboardStats();\n    fetchRecentActivity();\n    const activityInterval = setInterval(() => {\n      fetchRecentActivity();\n    }, 30000);\n    return () => clearInterval(activityInterval);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []); // Solo se ejecuta una vez al montar\n\n  const fetchDashboardStats = async () => {\n    if (!supabase) return;\n\n    try {\n      // Obtener estadísticas de trabajadoras\n      const { count: workersTotal } = await supabase\n        .from('workers')\n        .select('*', { count: 'exact', head: true })\n\n      const { count: workersActive } = await supabase\n        .from('workers')\n        .select('*', { count: 'exact', head: true })\n        .eq('is_active', true)\n\n      // Obtener estadísticas de usuarios\n      const { count: usersTotal } = await supabase\n        .from('users')\n        .select('*', { count: 'exact', head: true })\n\n      const { count: usersActive } = await supabase\n        .from('users')\n        .select('*', { count: 'exact', head: true })\n        .eq('is_active', true)\n\n      // Obtener estadísticas de asignaciones\n      const { count: assignmentsTotal } = await supabase\n        .from('assignments')\n        .select('*', { count: 'exact', head: true })\n\n      const { count: assignmentsActive } = await supabase\n        .from('assignments')\n        .select('*', { count: 'exact', head: true })\n        .eq('status', 'active')\n\n      // Obtener horas totales mensuales\n      const currentDate = new Date()\n      const currentMonth = currentDate.getMonth() + 1\n      const currentYear = currentDate.getFullYear()\n\n      const { data: monthlyHoursData, error: hoursError } = await supabase\n        .from('assignments')\n        .select('weekly_hours, schedule')\n        .eq('status', 'active')\n\n      let totalMonthlyHours = 0\n      if (monthlyHoursData && !hoursError) {\n        // Calcular horas totales mensuales considerando el horario semanal\n        totalMonthlyHours = monthlyHoursData.reduce((total, assignment) => {\n          let weeklyHours = assignment.weekly_hours || 0\n\n          // Si hay un horario detallado, calcular las horas basadas en el schedule\n          if (assignment.schedule) {\n            const schedule = assignment.schedule\n            let calculatedWeeklyHours = 0\n\n            // Calcular horas por semana basadas en el horario\n            Object.keys(schedule).forEach(day => {\n              const daySchedule = schedule[day]\n              if (daySchedule && daySchedule.enabled && daySchedule.timeSlots) {\n                daySchedule.timeSlots.forEach((slot: TimeSlot) => {\n                  const startTime = new Date(`2000-01-01T${slot.start}`)\n                  const endTime = new Date(`2000-01-01T${slot.end}`)\n                  const hours = (endTime.getTime() - startTime.getTime()) / (1000 * 60 * 60)\n                  calculatedWeeklyHours += hours\n                })\n              }\n            })\n\n            // Usar el valor más alto entre el cálculo del horario y el campo weekly_hours\n            weeklyHours = Math.max(weeklyHours, calculatedWeeklyHours)\n          }\n\n          return total + weeklyHours * 4.33\n        }, 0)\n      }\n\n      setStats({\n        workers: {\n          total: workersTotal || 0,\n          active: workersActive || 0\n        },\n        users: {\n          total: usersTotal || 0,\n          active: usersActive || 0\n        },\n        assignments: {\n          total: assignmentsTotal || 0,\n          active: assignmentsActive || 0\n        },\n        monthlyHours: Math.round(totalMonthlyHours)\n      })\n\n    } catch (error) {\n      // Puedes dejar el error, pero sin console.log\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const formatTimeAgo = (dateString: string): string => {\n    const now = new Date()\n    const date = new Date(dateString)\n    const diffInSeconds = Math.floor((now.getTime() - date.getTime()) / 1000)\n\n    if (diffInSeconds < 60) {\n      return 'Hace un momento'\n    } else if (diffInSeconds < 3600) {\n      const minutes = Math.floor(diffInSeconds / 60)\n      return `Hace ${minutes} ${minutes === 1 ? 'minuto' : 'minutos'}`\n    } else if (diffInSeconds < 86400) {\n      const hours = Math.floor(diffInSeconds / 3600)\n      return `Hace ${hours} ${hours === 1 ? 'hora' : 'horas'}`\n    } else if (diffInSeconds < 2592000) {\n      const days = Math.floor(diffInSeconds / 86400)\n      return `Hace ${days} ${days === 1 ? 'día' : 'días'}`\n    } else {\n      const months = Math.floor(diffInSeconds / 2592000)\n      return `Hace ${months} ${months === 1 ? 'mes' : 'meses'}`\n    }\n  }\n\n  // Función para navegar a las páginas con filtros\n  const navigateToFilteredPage = (page: string, filter: string) => {\n    router.push(`${page}?status=${filter}`)\n  }\n\n  const quickActions = [\n    {\n      title: 'Trabajadora',\n      description: 'Registrar una nueva trabajadora',\n      icon: <Plus className=\"w-6 h-6\" />, // Solo el icono +\n      href: '/admin/workers/new',\n      color: 'from-blue-500 to-blue-600',\n      bgColor: 'bg-gradient-to-r from-blue-500 to-blue-600'\n    },\n    {\n      title: 'Usuario',\n      description: 'Registrar un nuevo usuario',\n      icon: <Plus className=\"w-6 h-6\" />, // Solo el icono +\n      href: '/admin/users/new',\n      color: 'from-green-500 to-green-600',\n      bgColor: 'bg-gradient-to-r from-green-500 to-green-600'\n    },\n    {\n      title: 'Asignación',\n      description: 'Crear una nueva asignación',\n      icon: <Plus className=\"w-6 h-6\" />, // Solo el icono +\n      href: '/admin/assignments/new',\n      color: 'from-purple-500 to-purple-600',\n      bgColor: 'bg-gradient-to-r from-purple-500 to-purple-600'\n    },\n    {\n      title: 'Planificación',\n      description: 'Gestionar la planificación mensual',\n      icon: <BarChart3 className=\"w-6 h-6\" />,\n      href: '/admin/planning',\n      color: 'from-orange-500 to-orange-600',\n      bgColor: 'bg-gradient-to-r from-orange-500 to-orange-600'\n    }\n  ]\n\n  // Saludo personalizado\n  const adminName = user?.full_name || user?.email || 'Administrador';\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto\"></div>\n          <p className=\"mt-4 text-slate-600\">Cargando dashboard...</p>\n        </div>\n      </div>\n    )\n  }\n\n  // Antes del renderizado de la tabla, filtra balances para dejar solo uno por usuario (el más reciente)\n  const uniqueBalances = Array.from(\n    balances\n      .sort((a, b) => {\n        const dateA = a.created_at ? new Date(a.created_at).getTime() : 0;\n        const dateB = b.created_at ? new Date(b.created_at).getTime() : 0;\n        return dateB - dateA;\n      }) // más reciente primero\n      .reduce((map, b) => map.set(b.user_id, b), new Map())\n      .values()\n  );\n\n  return (\n    <div className=\"space-y-6 max-w-full overflow-x-hidden\">\n      {/* Welcome Section */}\n      <div className=\"bg-gradient-to-r from-blue-600 to-indigo-700 rounded-2xl p-6 sm:p-8 text-white\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"min-w-0 flex-1\">\n            <h1 className=\"text-2xl sm:text-3xl font-bold mb-2 truncate\">\n              ¡Bienvenido, {adminName}!\n            </h1>\n            <p className=\"text-blue-100 text-base sm:text-lg\">\n              Gestiona tu sistema de ayuda a domicilio de manera eficiente\n            </p>\n          </div>\n          <div className=\"hidden lg:block flex-shrink-0 ml-4\">\n            <div className=\"w-20 h-20 sm:w-24 sm:h-24 bg-white/10 rounded-full flex items-center justify-center\">\n              <Activity className=\"w-10 h-10 sm:w-12 sm:h-12 text-white\" />\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Quick Actions */}\n      <div className=\"max-w-full\">\n        <h2 className=\"text-xl sm:text-2xl font-bold text-slate-900 mb-6 flex items-center\">\n          <Target className=\"w-5 h-5 sm:w-6 sm:h-6 mr-3 text-blue-600 flex-shrink-0\" />\n          Acciones Rápidas\n        </h2>\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 sm:gap-6\">\n          {quickActions.map((action, index) => (\n            <Link key={index} href={action.href}>\n              <Card className=\"group hover:shadow-xl transition-all duration-300 cursor-pointer border-0 bg-white shadow-lg hover:-translate-y-1 h-28 sm:h-32\">\n                <CardContent className=\"p-4 sm:p-6 h-full flex flex-col justify-center\">\n                  <div className=\"flex items-center space-x-3 sm:space-x-4\">\n                    <div className={`p-2 sm:p-3 rounded-xl text-white ${action.bgColor} group-hover:scale-110 transition-transform duration-300 flex-shrink-0`}>\n                      {action.icon}\n                    </div>\n                    <div className=\"flex-1 min-w-0\">\n                      <h3 className=\"font-semibold text-slate-900 group-hover:text-blue-600 transition-colors text-sm sm:text-base leading-tight truncate\">\n                        {action.title}\n                      </h3>\n                    </div>\n                    <ArrowRight className=\"w-4 h-4 sm:w-5 sm:h-5 text-slate-400 group-hover:text-blue-600 group-hover:translate-x-1 transition-all duration-300 flex-shrink-0\" />\n                  </div>\n                </CardContent>\n              </Card>\n            </Link>\n          ))}\n        </div>\n      </div>\n\n      {/* Recent Activity */}\n      <div className=\"max-w-full\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h2 className=\"text-xl sm:text-2xl font-bold text-slate-900 flex items-center\">\n            <Activity className=\"w-5 h-5 sm:w-6 sm:h-6 mr-3 text-blue-600 flex-shrink-0\" />\n            Actividad Reciente\n          </h2>\n          <Button\n            variant=\"default\"\n            size=\"sm\"\n            onClick={() => fetchRecentActivity()}\n            className=\"text-xs\"\n          >\n            Actualizar\n          </Button>\n        </div>\n        <Card className=\"border-0 shadow-lg\">\n          <CardContent className=\"p-4 sm:p-6\">\n            {recentActivity.length === 0 ? (\n              <div className=\"text-center py-8\">\n                <Activity className=\"w-12 h-12 text-slate-300 mx-auto mb-4\" />\n                <p className=\"text-slate-500\">No hay actividad reciente</p>\n                <p className=\"text-sm text-slate-400 mt-1\">Las actividades aparecerán aquí automáticamente</p>\n              </div>\n            ) : (\n              <div className=\"space-y-3 sm:space-y-4\">\n                {recentActivity.slice(0, 12).map((activity, index) => {\n                  // Determinar el color según el tipo de actividad\n                  const getActivityColor = (type: string) => {\n                    switch (type) {\n                      case 'worker':\n                        return 'bg-blue-100 text-blue-600 border-blue-200'\n                      case 'user':\n                        return 'bg-green-100 text-green-600 border-green-200'\n                      case 'assignment':\n                        return 'bg-purple-100 text-purple-600 border-purple-200'\n                      case 'monthly_plan':\n                        return 'bg-orange-100 text-orange-600 border-orange-200'\n                      default:\n                        return 'bg-slate-100 text-slate-600 border-slate-200'\n                    }\n                  }\n\n                  const getActivityBadge = (type: string) => {\n                    switch (type) {\n                      case 'worker':\n                        return 'Trabajadora'\n                      case 'user':\n                        return 'Usuario'\n                      case 'assignment':\n                        return 'Asignación'\n                      case 'monthly_plan':\n                        return 'Balance'\n                      default:\n                        return 'Actividad'\n                    }\n                  }\n\n                  return (\n                    <div key={activity.id} className=\"flex items-start space-x-3 sm:space-x-4 p-3 rounded-lg hover:bg-slate-50 transition-colors border border-transparent hover:border-slate-200\">\n                      <div className={`p-2 rounded-lg flex-shrink-0 border ${getActivityColor(activity.type)}`}>\n                        {activity.icon}\n                      </div>\n                      <div className=\"flex-1 min-w-0\">\n                        <div className=\"flex items-center space-x-2 mb-1\">\n                          <span className=\"text-xs font-medium text-slate-500 bg-slate-100 px-2 py-1 rounded-full\">\n                            {getActivityBadge(activity.type)}\n                          </span>\n                          <span className=\"text-xs text-slate-400\">•</span>\n                          <span className=\"text-xs text-slate-400\">{activity.time}</span>\n                        </div>\n                        <p className=\"text-sm font-medium text-slate-900 leading-relaxed\">{activity.message}</p>\n                      </div>\n                    </div>\n                  )\n                })}\n              </div>\n            )}\n\n            {recentActivity.length > 12 && (\n              <div className=\"mt-4 pt-4 border-t border-slate-200 text-center\">\n                <p className=\"text-xs text-slate-500\">\n                  Mostrando las 12 actividades más recientes de {recentActivity.length} total\n                </p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Stats Overview (moved to bottom) */}\n      <div className=\"max-w-full\">\n        <h2 className=\"text-xl sm:text-2xl font-bold text-slate-900 mb-6 flex items-center\">\n          <TrendingUp className=\"w-5 h-5 sm:w-6 sm:h-6 mr-3 text-blue-600 flex-shrink-0\" />\n          Resumen General\n        </h2>\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 sm:gap-6\">\n          {/* Tarjeta Trabajadoras Activas - Interactiva */}\n          <Card\n            className=\"border-0 shadow-lg bg-gradient-to-br from-blue-50 to-blue-100 hover:shadow-xl transition-all duration-300 cursor-pointer group hover:-translate-y-1\"\n            onClick={() => navigateToFilteredPage('/admin/workers', 'active')}\n          >\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-blue-700 truncate group-hover:text-blue-800 transition-colors\">\n                Trabajadoras Activas\n              </CardTitle>\n              <div className=\"p-2 bg-blue-500 rounded-lg flex-shrink-0 group-hover:bg-blue-600 transition-colors\">\n                <UserCheck className=\"h-4 w-4 text-white\" />\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl sm:text-3xl font-bold text-blue-900 group-hover:text-blue-950 transition-colors\">\n                {stats.workers.active}\n              </div>\n              <p className=\"text-xs text-blue-600 mt-1 group-hover:text-blue-700 transition-colors\">\n                de {stats.workers.total} total\n              </p>\n              <div className=\"mt-2 w-full bg-blue-200 rounded-full h-2\">\n                <div\n                  className=\"bg-blue-500 h-2 rounded-full transition-all duration-500\"\n                  style={{ width: `${stats.workers.total > 0 ? (stats.workers.active / stats.workers.total) * 100 : 0}%` }}\n                ></div>\n              </div>\n              <div className=\"mt-3 flex items-center justify-between\">\n                <span className=\"text-xs text-blue-600 font-medium\">Ver todas</span>\n                <ExternalLink className=\"w-3 h-3 text-blue-600 group-hover:translate-x-1 transition-transform\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Tarjeta Usuarios Activos - Interactiva */}\n          <Card\n            className=\"border-0 shadow-lg bg-gradient-to-br from-green-50 to-green-100 hover:shadow-xl transition-all duration-300 cursor-pointer group hover:-translate-y-1\"\n            onClick={() => navigateToFilteredPage('/admin/users', 'active')}\n          >\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-green-700 truncate group-hover:text-green-800 transition-colors\">\n                Usuarios Activos\n              </CardTitle>\n              <div className=\"p-2 bg-green-500 rounded-lg flex-shrink-0 group-hover:bg-green-600 transition-colors\">\n                <Users className=\"h-4 w-4 text-white\" />\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl sm:text-3xl font-bold text-green-900 group-hover:text-green-950 transition-colors\">\n                {stats.users.active}\n              </div>\n              <p className=\"text-xs text-green-600 mt-1 group-hover:text-green-700 transition-colors\">\n                de {stats.users.total} total\n              </p>\n              <div className=\"mt-2 w-full bg-green-200 rounded-full h-2\">\n                <div\n                  className=\"bg-green-500 h-2 rounded-full transition-all duration-500\"\n                  style={{ width: `${stats.users.total > 0 ? (stats.users.active / stats.users.total) * 100 : 0}%` }}\n                ></div>\n              </div>\n              <div className=\"mt-3 flex items-center justify-between\">\n                <span className=\"text-xs text-green-600 font-medium\">Ver todos</span>\n                <ExternalLink className=\"w-3 h-3 text-green-600 group-hover:translate-x-1 transition-transform\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Tarjeta Asignaciones Activas - Interactiva */}\n          <Card\n            className=\"border-0 shadow-lg bg-gradient-to-br from-purple-50 to-purple-100 hover:shadow-xl transition-all duration-300 cursor-pointer group hover:-translate-y-1\"\n            onClick={() => navigateToFilteredPage('/admin/assignments', 'active')}\n          >\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-purple-700 truncate group-hover:text-purple-800 transition-colors\">\n                Asignaciones Activas\n              </CardTitle>\n              <div className=\"p-2 bg-purple-500 rounded-lg flex-shrink-0 group-hover:bg-purple-600 transition-colors\">\n                <Calendar className=\"h-4 w-4 text-white\" />\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl sm:text-3xl font-bold text-purple-900 group-hover:text-purple-950 transition-colors\">\n                {stats.assignments.active}\n              </div>\n              <p className=\"text-xs text-purple-600 mt-1 group-hover:text-purple-700 transition-colors\">\n                de {stats.assignments.total} total\n              </p>\n              <div className=\"mt-2 w-full bg-purple-200 rounded-full h-2\">\n                <div\n                  className=\"bg-purple-500 h-2 rounded-full transition-all duration-500\"\n                  style={{ width: `${stats.assignments.total > 0 ? (stats.assignments.active / stats.assignments.total) * 100 : 0}%` }}\n                ></div>\n              </div>\n              <div className=\"mt-3 flex items-center justify-between\">\n                <span className=\"text-xs text-purple-600 font-medium\">Ver todas</span>\n                <ExternalLink className=\"w-3 h-3 text-purple-600 group-hover:translate-x-1 transition-transform\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Tarjeta Horas Mensuales - No interactiva */}\n          <Card className=\"border-0 shadow-lg bg-gradient-to-br from-orange-50 to-orange-100\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-orange-700 truncate\">\n                Horas Mensuales\n              </CardTitle>\n              <div className=\"p-2 bg-orange-500 rounded-lg flex-shrink-0\">\n                <Clock className=\"h-4 w-4 text-white\" />\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl sm:text-3xl font-bold text-orange-900\">\n                {stats.monthlyHours}\n              </div>\n              <p className=\"text-xs text-orange-600 mt-1\">\n                horas programadas\n              </p>\n              <div className=\"mt-2 w-full bg-orange-200 rounded-full h-2\">\n                <div className=\"bg-orange-500 h-2 rounded-full\" style={{ width: '75%' }}></div>\n              </div>\n              <div className=\"mt-3 flex items-center justify-center\">\n                <span className=\"text-xs text-orange-600 font-medium\">Información general</span>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n      {/* NUEVA SECCIÓN: Balances mensuales */}\n      <Card className=\"mt-4\">\n        <CardHeader>\n          <CardTitle>Balances mensuales de usuarios ({new Date().getMonth() + 1}/{new Date().getFullYear()})</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {loadingBalances ? (\n            <div className=\"py-8 text-center text-muted-foreground\">Cargando balances mensuales...</div>\n          ) : errorBalances ? (\n            <div className=\"py-8 text-center text-destructive\">{errorBalances}</div>\n          ) : uniqueBalances.length === 0 ? (\n            <div className=\"py-8 text-center text-muted-foreground\">No hay balances generados para este mes.</div>\n          ) : (\n            <div className=\"overflow-x-auto\">\n              <table className=\"min-w-full text-sm border\">\n                <thead>\n                  <tr className=\"bg-slate-100\">\n                    <th className=\"px-3 py-2 text-left\">Usuario</th>\n                    <th className=\"px-3 py-2 text-left\">Horas asignadas</th>\n                    <th className=\"px-3 py-2 text-left\">Horas reales</th>\n                    <th className=\"px-3 py-2 text-left\">Diferencia</th>\n                    <th className=\"px-3 py-2 text-left\">Estado</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {uniqueBalances.map((b) => {\n                    let estado: 'perfect' | 'excess' | 'deficit' = 'perfect'\n                    if (Math.abs(b.balance) < 0.1) estado = 'perfect'\n                    else if (b.balance > 0) estado = 'excess'\n                    else estado = 'deficit'\n                    return (\n                      <tr key={b.id} className=\"border-b\">\n                        <td className=\"px-3 py-2\">{userMap[b.user_id] || b.user_id}</td>\n                        <td className=\"px-3 py-2\">{typeof b.assigned_hours === 'number' ? b.assigned_hours.toFixed(2) : '-'}</td>\n                        <td className=\"px-3 py-2\">{typeof b.scheduled_hours === 'number' ? b.scheduled_hours.toFixed(2) : '-'}</td>\n                        <td className=\"px-3 py-2\">{typeof b.balance === 'number' ? b.balance.toFixed(2) : '-'}</td>\n                        <td className=\"px-3 py-2\">\n                          {estado === 'perfect' && <span className=\"text-green-600 bg-green-100 px-2 py-1 rounded text-xs\">Perfecto</span>}\n                          {estado === 'excess' && <span className=\"text-orange-600 bg-orange-100 px-2 py-1 rounded text-xs\">Exceso</span>}\n                          {estado === 'deficit' && <span className=\"text-red-600 bg-red-100 px-2 py-1 rounded text-xs\">Defecto</span>}\n                        </td>\n                      </tr>\n                    )\n                  })}\n                </tbody>\n              </table>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  )\n}","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"/Users/alamia.es/Public/SAD/src/app/admin/layout.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Settings' is defined but never used.","line":13,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Building2' is defined but never used.","line":17,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":12}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport { useState, useEffect } from 'react'\nimport Link from 'next/link'\nimport { usePathname, useRouter } from 'next/navigation'\nimport { useAuth } from '@/contexts/AuthContext'\nimport { \n  Home, \n  Users, \n  UserCheck, \n  Calendar, \n  BarChart3, \n  Settings, \n  LogOut,\n  Menu,\n  X,\n  Building2,\n  Bell,\n  Search,\n  Heart\n} from 'lucide-react'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\n\nconst navigation = [\n  { name: 'Dashboard', href: '/admin/dashboard', icon: Home },\n  { name: 'Trabajadoras', href: '/admin/workers', icon: UserCheck },\n  { name: 'Usuarios', href: '/admin/users', icon: Users },\n  { name: 'Asignaciones', href: '/admin/assignments', icon: Calendar },\n  { name: 'Planificación', href: '/admin/planning', icon: BarChart3 },\n]\n\nexport default function AdminLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  const [sidebarOpen, setSidebarOpen] = useState(false)\n  const pathname = usePathname()\n  const router = useRouter()\n  const { user, isAuthenticated, isLoading, logout } = useAuth()\n  \n  // Si estamos en la página de login, no usar el contexto de autenticación\n  const isLoginPage = pathname === '/admin/login'\n\n  // Redirigir si no está autenticado o no es admin (solo si no estamos en login)\n  useEffect(() => {\n    if (!isLoginPage && !isLoading && (!isAuthenticated || !user || (user.role !== 'admin' && user.role !== 'super_admin'))) {\n      router.push('/admin/login')\n    }\n  }, [isLoginPage, isLoading, isAuthenticated, user, router])\n\n  const handleLogout = async () => {\n    if (logout) {\n      await logout()\n      router.push('/admin/login')\n    }\n  }\n\n  // Si estamos en la página de login, solo renderizar los children\n  if (isLoginPage) {\n    return <>{children}</>\n  }\n\n  // Mostrar loading mientras se verifica la autenticación\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-50 flex items-center justify-center overflow-x-hidden\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto\"></div>\n          <p className=\"mt-4 text-slate-600\">Verificando autenticación...</p>\n        </div>\n      </div>\n    )\n  }\n\n  // No mostrar nada si no está autenticado\n  if (!isAuthenticated || !user || (user.role !== 'admin' && user.role !== 'super_admin')) {\n    return null\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-50 overflow-x-hidden\">\n      {/* Mobile sidebar overlay */}\n      {sidebarOpen && (\n        <div \n          className=\"fixed inset-0 z-40 bg-black bg-opacity-50 lg:hidden\"\n          onClick={() => setSidebarOpen(false)}\n        />\n      )}\n\n      {/* Mobile sidebar */}\n      <div className={`\n        fixed inset-y-0 left-0 z-50 w-64 bg-white shadow-xl transform transition-transform duration-300 ease-in-out lg:hidden\n        ${sidebarOpen ? 'translate-x-0' : '-translate-x-full'}\n      `}>\n        {/* Mobile sidebar header */}\n        <div className=\"flex items-center justify-between h-16 px-6 border-b border-slate-200\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-10 h-10 bg-gradient-to-br from-blue-500 to-green-500 rounded-lg flex items-center justify-center shadow-lg\">\n              <Heart className=\"w-6 h-6 text-white\" />\n            </div>\n            <div>\n              <h1 className=\"text-lg font-bold text-slate-900\">App SAD</h1>\n              <p className=\"text-xs text-slate-500\">Servicios de Ayuda a Domicilio</p>\n            </div>\n          </div>\n          <button\n            onClick={() => setSidebarOpen(false)}\n            className=\"p-2 rounded-md text-slate-400 hover:text-slate-600 hover:bg-slate-100\"\n          >\n            <X className=\"w-5 h-5\" />\n          </button>\n        </div>\n\n        {/* Mobile navigation */}\n        <nav className=\"flex-1 px-4 py-6 space-y-2\">\n          {navigation.map((item) => {\n            const isActive = pathname === item.href\n            return (\n              <Link\n                key={item.name}\n                href={item.href}\n                className={`\n                  flex items-center space-x-3 px-4 py-3 rounded-lg text-sm font-medium transition-all duration-200\n                  ${isActive \n                    ? 'bg-gradient-to-r from-blue-600 to-indigo-600 text-white shadow-lg' \n                    : 'text-slate-600 hover:bg-slate-100 hover:text-slate-900'\n                  }\n                `}\n                onClick={() => setSidebarOpen(false)}\n              >\n                <item.icon className={`w-5 h-5 ${isActive ? 'text-white' : 'text-slate-400'}`} />\n                <span>{item.name}</span>\n              </Link>\n            )\n          })}\n        </nav>\n\n        {/* Mobile sidebar footer */}\n        <div className=\"p-4 border-t border-slate-200\">\n          <Button\n            onClick={handleLogout}\n            className=\"w-full justify-start text-slate-600 hover:text-slate-900 hover:bg-slate-100 bg-transparent border-0\"\n          >\n            <LogOut className=\"w-5 h-5 mr-3\" />\n            Cerrar Sesión\n          </Button>\n        </div>\n      </div>\n\n      {/* Main layout */}\n      <div className=\"w-full\">\n        {/* Top navigation bar */}\n        <div className=\"sticky top-0 z-30 bg-white/95 backdrop-blur-md border-b border-slate-200 shadow-sm\">\n          <div className=\"flex flex-col h-20 lg:h-24 px-4 sm:px-6 lg:px-8 max-w-full\">\n            {/* First row - Logo and navigation icons */}\n            <div className=\"flex items-center justify-between h-12 lg:h-14\">\n              {/* Left side - Logo */}\n              <div className=\"flex items-center space-x-3 min-w-0\">\n                <div className=\"w-10 h-10 bg-gradient-to-br from-blue-500 to-green-500 rounded-lg flex items-center justify-center shadow-lg\">\n                  <Heart className=\"w-6 h-6 text-white\" />\n                </div>\n                <div className=\"hidden sm:block min-w-0\">\n                  <h1 className=\"text-lg font-bold text-slate-900 truncate\">App SAD</h1>\n                  <p className=\"text-xs text-slate-500 truncate\">Servicios de Ayuda a Domicilio</p>\n                </div>\n                {/* Mobile page title */}\n                <div className=\"sm:hidden min-w-0\">\n                  <h2 className=\"text-sm font-semibold text-slate-900 truncate\">\n                    {navigation.find(item => item.href === pathname)?.name || 'Dashboard'}\n                  </h2>\n                </div>\n              </div>\n\n              {/* Center - Desktop navigation with icons and names */}\n              <nav className=\"hidden lg:flex items-center space-x-2 flex-shrink-0\">\n                {navigation.map((item) => {\n                  const isActive = pathname === item.href\n                  return (\n                    <Link\n                      key={item.name}\n                      href={item.href}\n                      className={`\n                        flex items-center space-x-2 px-3 py-2 rounded-lg text-sm font-medium transition-all duration-200 relative flex-shrink-0\n                        ${isActive \n                          ? 'bg-gradient-to-r from-blue-600 to-indigo-600 text-white shadow-lg' \n                          : 'text-slate-600 hover:bg-slate-100 hover:text-slate-900'\n                        }\n                      `}\n                    >\n                      <item.icon className={`w-4 h-4 ${isActive ? 'text-white' : 'text-slate-400'}`} />\n                      <span>{item.name}</span>\n                      {isActive && (\n                        <div className=\"absolute bottom-0 left-1/2 transform -translate-x-1/2 w-1 h-1 bg-white rounded-full\"></div>\n                      )}\n                    </Link>\n                  )\n                })}\n              </nav>\n\n              {/* Right side - Mobile menu button */}\n              <button\n                onClick={() => setSidebarOpen(true)}\n                className=\"lg:hidden p-2 rounded-md text-slate-400 hover:text-slate-600 hover:bg-slate-100 flex-shrink-0\"\n              >\n                <Menu className=\"w-6 h-6\" />\n              </button>\n            </div>\n\n            {/* Second row - Search, notifications, user */}\n            <div className=\"flex items-center justify-between h-8 lg:h-10\">\n              {/* Left side - Search (larger) */}\n              <div className=\"hidden md:flex items-center space-x-2 flex-shrink-0\">\n                <div className=\"relative\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-slate-400 w-4 h-4\" />\n                  <Input\n                    placeholder=\"Buscar trabajadoras, usuarios, asignaciones...\"\n                    className=\"pl-10 w-64 lg:w-80 xl:w-96 h-8 text-sm border-slate-300 focus:border-blue-500 focus:ring-blue-500\"\n                  />\n                </div>\n              </div>\n\n              {/* Right side - Notifications and user */}\n              <div className=\"flex items-center space-x-3 min-w-0 ml-auto\">\n                {/* Notifications */}\n                <button className=\"p-1.5 rounded-md text-slate-400 hover:text-slate-600 hover:bg-slate-100 relative flex-shrink-0\">\n                  <Bell className=\"w-4 h-4\" />\n                  <span className=\"absolute top-0.5 right-0.5 w-1.5 h-1.5 bg-red-500 rounded-full\"></span>\n                </button>\n\n                {/* User menu */}\n                <div className=\"flex items-center space-x-2 min-w-0\">\n                  <div className=\"hidden sm:flex items-center space-x-2 text-sm text-slate-600 min-w-0\">\n                    <span className=\"truncate\">{user?.full_name || user?.email}</span>\n                    <div className=\"w-2 h-2 bg-green-400 rounded-full flex-shrink-0\"></div>\n                    <span className=\"text-xs text-slate-500 flex-shrink-0\">({user?.role === 'super_admin' ? 'Super Admin' : 'Admin'})</span>\n                  </div>\n                  <Button\n                    onClick={handleLogout}\n                    className=\"hidden sm:flex items-center space-x-2 text-slate-600 hover:text-slate-900 hover:bg-slate-100 bg-transparent border-0 flex-shrink-0 text-sm\"\n                  >\n                    <LogOut className=\"w-4 h-4\" />\n                    <span>Cerrar</span>\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Page content */}\n        <main className=\"flex-1 p-4 sm:p-6 max-w-full overflow-x-hidden\">\n          <div className=\"max-w-full\">\n            {children}\n          </div>\n        </main>\n      </div>\n    </div>\n  )\n} ","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"/Users/alamia.es/Public/SAD/src/app/admin/login/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":31,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":31,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport { useState } from 'react'\nimport { useRouter } from 'next/navigation'\nimport { useAuth } from '@/contexts/AuthContext'\nimport Link from 'next/link'\n\nexport default function AdminLoginPage() {\n  const [email, setEmail] = useState('')\n  const [password, setPassword] = useState('')\n  const [isLoading, setIsLoading] = useState(false)\n  const [error, setError] = useState('')\n  \n  const router = useRouter()\n  const { loginAdmin } = useAuth()\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setIsLoading(true)\n    setError('')\n\n    try {\n      const result = await loginAdmin(email, password)\n      \n      if (result.success) {\n        // Redirigir al dashboard del admin\n        router.push('/admin/dashboard')\n      } else {\n        setError(result.error || 'Error de autenticación')\n      }\n    } catch (error) {\n      setError('Error interno del servidor')\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 via-white to-green-50 flex items-center justify-center p-4\">\n      <div className=\"max-w-md w-full space-y-8\">\n        {/* Header */}\n        <div className=\"text-center\">\n          <div className=\"mx-auto h-16 w-16 bg-gradient-to-br from-blue-500 to-green-500 rounded-full flex items-center justify-center mb-4\">\n            <svg className=\"h-8 w-8 text-white\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\" />\n            </svg>\n          </div>\n          <h2 className=\"text-3xl font-bold text-gray-900 mb-2\">\n            Panel Administrativo\n          </h2>\n          <p className=\"text-gray-600\">\n            Accede al sistema de gestión SAD LAS\n          </p>\n        </div>\n\n        {/* Form */}\n        <div className=\"bg-white rounded-xl shadow-lg p-8 border border-gray-200\">\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            {/* Email */}\n            <div>\n              <label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Correo electrónico\n              </label>\n              <input\n                id=\"email\"\n                name=\"email\"\n                type=\"email\"\n                autoComplete=\"email\"\n                required\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors\"\n                placeholder=\"admin@sadlas.com\"\n              />\n            </div>\n\n            {/* Password */}\n            <div>\n              <label htmlFor=\"password\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Contraseña\n              </label>\n              <input\n                id=\"password\"\n                name=\"password\"\n                type=\"password\"\n                autoComplete=\"current-password\"\n                required\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors\"\n                placeholder=\"••••••••\"\n              />\n            </div>\n\n            {/* Error Message */}\n            {error && (\n              <div className=\"bg-red-50 border border-red-200 rounded-lg p-4\">\n                <div className=\"flex\">\n                  <svg className=\"h-5 w-5 text-red-400\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                    <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\" clipRule=\"evenodd\" />\n                  </svg>\n                  <p className=\"ml-3 text-sm text-red-700\">{error}</p>\n                </div>\n              </div>\n            )}\n\n            {/* Submit Button */}\n            <button\n              type=\"submit\"\n              disabled={isLoading}\n              className=\"w-full bg-gradient-to-r from-blue-600 to-green-600 hover:from-blue-700 hover:to-green-700 text-white font-semibold py-3 px-4 rounded-lg transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center\"\n            >\n              {isLoading ? (\n                <>\n                  <svg className=\"animate-spin -ml-1 mr-3 h-5 w-5 text-white\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\n                    <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\n                    <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n                  </svg>\n                  Iniciando sesión...\n                </>\n              ) : (\n                'Iniciar sesión'\n              )}\n            </button>\n          </form>\n\n          {/* Links */}\n          <div className=\"mt-6 text-center space-y-4\">\n            <div className=\"text-sm text-gray-600\">\n              ¿Eres trabajadora?{' '}\n              <Link href=\"/worker/login\" className=\"font-medium text-blue-600 hover:text-blue-500 transition-colors\">\n                Accede aquí\n              </Link>\n            </div>\n            <div className=\"text-sm text-gray-600\">\n              <Link href=\"/\" className=\"font-medium text-gray-600 hover:text-gray-500 transition-colors\">\n                ← Volver al inicio\n              </Link>\n            </div>\n          </div>\n        </div>\n\n        {/* Footer */}\n        <div className=\"text-center text-sm text-gray-500\">\n          <p>SAD LAS - Sistema de Gestión de Servicios Domiciliarios</p>\n          <p className=\"mt-1\">© 2025 Todos los derechos reservados</p>\n        </div>\n      </div>\n    </div>\n  )\n} ","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"/Users/alamia.es/Public/SAD/src/app/admin/planning/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Eye' is defined but never used.","line":19,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":6},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'EyeOff' is defined but never used.","line":20,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ArrowRight' is defined but never used.","line":25,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":13},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":50,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":50,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[938,941],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[938,941],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'viewMode' is assigned a value but never used.","line":84,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":84,"endColumn":18},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadHolidays'. Either include it or remove the dependency array.","line":103,"column":6,"nodeType":"ArrayExpression","endLine":103,"endColumn":20,"suggestions":[{"desc":"Update the dependencies array to be: [currentMonth, loadHolidays]","fix":{"range":[2571,2585],"text":"[currentMonth, loadHolidays]"}}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":140,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":140,"endColumn":22,"suggestions":[{"fix":{"range":[3581,3654],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":142,"column":78,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":142,"endColumn":81,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3747,3750],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3747,3750],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":157,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":157,"endColumn":22,"suggestions":[{"fix":{"range":[4264,4333],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":163,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":163,"endColumn":22,"suggestions":[{"fix":{"range":[4448,4511],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":169,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":169,"endColumn":20,"suggestions":[{"fix":{"range":[4608,4649],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":182,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":182,"endColumn":20,"suggestions":[{"fix":{"range":[4969,5018],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'showAlways' is assigned a value but never used.","line":663,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":663,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'hasAssignment' is assigned a value but never used.","line":664,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":664,"endColumn":36}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport { useState, useEffect, useMemo } from 'react'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { \n  Calendar, \n  Clock, \n  Users, \n  BarChart3, \n  Plus, \n  Filter, \n  Search,\n  X,\n  User,\n  UserCheck,\n  AlertTriangle,\n  Eye,\n  EyeOff,\n  ChevronDown,\n  ChevronUp,\n  Edit,\n  UserPlus,\n  ArrowRight\n} from 'lucide-react'\nimport Link from 'next/link'\nimport { supabase } from '@/lib/supabase'\nimport { getHolidaysForYear } from '@/lib/holidayUtils'\n\ninterface Assignment {\n  id: string\n  worker: {\n    id: string\n    name: string\n    surname: string\n    worker_type: string\n  }\n  user: {\n    id: string\n    name: string\n    surname: string\n    client_code: string\n  }\n  weekly_hours: number\n  status: string\n  start_date: string\n  end_date?: string\n  assignment_type?: string\n  schedule?: any\n}\n\ninterface Worker {\n  id: string\n  name: string\n  surname: string\n  worker_type: string\n  is_active: boolean\n}\n\ninterface User {\n  id: string\n  name: string\n  surname: string\n  client_code: string\n  is_active: boolean\n}\n\nexport default function PlanningPage() {\n  const [assignments, setAssignments] = useState<Assignment[]>([])\n  const [workers, setWorkers] = useState<Worker[]>([])\n  const [users, setUsers] = useState<User[]>([])\n  const [loading, setLoading] = useState(true)\n  const [currentMonth, setCurrentMonth] = useState(new Date())\n  const [holidays, setHolidays] = useState<string[]>([])\n  \n  // Filtros\n  const [searchTerm, setSearchTerm] = useState('')\n  const [selectedWorker, setSelectedWorker] = useState<string>('')\n  const [selectedUser, setSelectedUser] = useState<string>('')\n  const [selectedAssignmentType, setSelectedAssignmentType] = useState<string>('')\n  const [selectedStatus, setSelectedStatus] = useState<string>('active')\n  const [showFilters, setShowFilters] = useState(false)\n  const [viewMode, setViewMode] = useState<'general' | 'worker' | 'user'>('general')\n\n  useEffect(() => {\n    loadData()\n    \n    // Verificar si hay parámetro de reasignación exitosa\n    const urlParams = new URLSearchParams(window.location.search)\n    if (urlParams.get('reassigned') === 'true') {\n      // Mostrar notificación de éxito\n      setTimeout(() => {\n        alert('✅ Reasignación completada exitosamente')\n        // Limpiar el parámetro de la URL\n        window.history.replaceState({}, document.title, window.location.pathname)\n      }, 100)\n    }\n  }, [])\n\n  useEffect(() => {\n    loadHolidays()\n  }, [currentMonth])\n\n  const loadData = async () => {\n    try {\n      setLoading(true)\n      \n      // Cargar asignaciones\n      const assignmentsResponse = await supabase\n        ?.from('assignments')\n        .select(`\n          id,\n          weekly_hours,\n          status,\n          start_date,\n          end_date,\n          assignment_type,\n          schedule,\n          worker:workers(id, name, surname, worker_type, is_active),\n          user:users(id, name, surname, client_code, is_active)\n        `)\n        .eq('status', 'active')\n\n      // Cargar trabajadoras\n      const workersResponse = await supabase\n        ?.from('workers')\n        .select('id, name, surname, worker_type, is_active')\n        .eq('is_active', true)\n        .order('name')\n\n      // Cargar usuarios\n      const usersResponse = await supabase\n        ?.from('users')\n        .select('id, name, surname, client_code, is_active')\n        .eq('is_active', true)\n        .order('name')\n\n      if (assignmentsResponse?.error) {\n        console.error('Error al cargar asignaciones:', assignmentsResponse.error)\n      } else {\n        const transformedData = (assignmentsResponse?.data || []).map((item: any) => ({\n          id: item.id,\n          weekly_hours: item.weekly_hours,\n          status: item.status,\n          start_date: item.start_date,\n          end_date: item.end_date,\n          assignment_type: item.assignment_type,\n          schedule: item.schedule,\n          worker: Array.isArray(item.worker) ? item.worker[0] : item.worker,\n          user: Array.isArray(item.user) ? item.user[0] : item.user,\n        }))\n        setAssignments(transformedData)\n      }\n\n      if (workersResponse?.error) {\n        console.error('Error al cargar trabajadoras:', workersResponse.error)\n      } else {\n        setWorkers(workersResponse?.data || [])\n      }\n\n      if (usersResponse?.error) {\n        console.error('Error al cargar usuarios:', usersResponse.error)\n      } else {\n        setUsers(usersResponse?.data || [])\n      }\n\n    } catch (error) {\n      console.error('Error inesperado:', error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const loadHolidays = async () => {\n    try {\n      const year = currentMonth.getFullYear()\n      const holidaysData = await getHolidaysForYear(year)\n      const holidayDates = holidaysData.map(h => h.date)\n      setHolidays(holidayDates)\n    } catch (error) {\n      console.error('Error al cargar festivos:', error)\n    }\n  }\n\n  // Filtros aplicados\n  const filteredAssignments = useMemo(() => {\n    return assignments.filter(assignment => {\n      // Filtro por trabajadora\n      if (selectedWorker && assignment.worker.id !== selectedWorker) return false\n      \n      // Filtro por usuario\n      if (selectedUser && assignment.user.id !== selectedUser) return false\n      \n      // Filtro por tipo de asignación\n      if (selectedAssignmentType && assignment.assignment_type !== selectedAssignmentType) return false\n      \n      // Filtro por estado\n      if (selectedStatus && assignment.status !== selectedStatus) return false\n      \n      // Filtro por búsqueda\n      if (searchTerm) {\n        const searchLower = searchTerm.toLowerCase()\n        const workerName = `${assignment.worker.name} ${assignment.worker.surname}`.toLowerCase()\n        const userName = `${assignment.user.name} ${assignment.user.surname}`.toLowerCase()\n        const userCode = assignment.user.client_code?.toLowerCase() || ''\n        \n        if (!workerName.includes(searchLower) && \n            !userName.includes(searchLower) && \n            !userCode.includes(searchLower)) {\n          return false\n        }\n      }\n      \n      return true\n    })\n  }, [assignments, selectedWorker, selectedUser, selectedAssignmentType, selectedStatus, searchTerm])\n\n  // Estadísticas filtradas\n  const stats = useMemo(() => {\n    const totalHours = filteredAssignments.reduce((sum, a) => sum + a.weekly_hours, 0)\n    const uniqueWorkers = new Set(filteredAssignments.map(a => a.worker.id)).size\n    const uniqueUsers = new Set(filteredAssignments.map(a => a.user.id)).size\n    const laborables = filteredAssignments.filter(a => a.assignment_type === 'laborables').length\n    const festivos = filteredAssignments.filter(a => a.assignment_type === 'festivos').length\n\n    return {\n      totalAssignments: filteredAssignments.length,\n      totalHours,\n      uniqueWorkers,\n      uniqueUsers,\n      laborables,\n      festivos\n    }\n  }, [filteredAssignments])\n\n  const clearFilters = () => {\n    setSearchTerm('')\n    setSelectedWorker('')\n    setSelectedUser('')\n    setSelectedAssignmentType('')\n    setSelectedStatus('active')\n    setViewMode('general')\n  }\n\n  const getMonthName = (date: Date) => {\n    return date.toLocaleDateString('es-ES', { month: 'long', year: 'numeric' })\n  }\n\n  const getDaysInMonth = (date: Date) => {\n    return new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate()\n  }\n\n  const getFirstDayOfMonth = (date: Date) => {\n    const jsDay = new Date(date.getFullYear(), date.getMonth(), 1).getDay()\n    return jsDay === 0 ? 6 : jsDay - 1\n  }\n\n  const generateCalendarDays = () => {\n    const daysInMonth = getDaysInMonth(currentMonth)\n    const firstDay = getFirstDayOfMonth(currentMonth)\n    const days = []\n\n    for (let i = 0; i < firstDay; i++) {\n      days.push({ date: null })\n    }\n\n    for (let day = 1; day <= daysInMonth; day++) {\n      days.push({ date: new Date(currentMonth.getFullYear(), currentMonth.getMonth(), day) })\n    }\n\n    return days\n  }\n\n  const changeMonth = (direction: 'prev' | 'next') => {\n    setCurrentMonth(prev => {\n      const newDate = new Date(prev)\n      if (direction === 'prev') {\n        newDate.setMonth(newDate.getMonth() - 1)\n      } else {\n        newDate.setMonth(newDate.getMonth() + 1)\n      }\n      return newDate\n    })\n  }\n\n  const isHolidayOrWeekend = (date: Date) => {\n    const dayOfWeek = date.getDay()\n    const dateString = date.toLocaleDateString('en-CA')\n    const isWeekend = dayOfWeek === 0 || dayOfWeek === 6\n    const isHoliday = holidays.includes(dateString)\n    return isWeekend || isHoliday\n  }\n\n  const getAssignmentsForDay = (date: Date) => {\n    const dayOfWeek = date.getDay()\n    const dateString = date.toLocaleDateString('en-CA')\n    const isWeekend = dayOfWeek === 0 || dayOfWeek === 6\n    const isHoliday = holidays.includes(dateString)\n    const isSpecialDay = isWeekend || isHoliday\n\n    const result = filteredAssignments.filter(assignment => {\n      // Verificar que la asignación esté activa en esta fecha\n      const start = new Date(assignment.start_date)\n      const end = assignment.end_date ? new Date(assignment.end_date) : null\n      const isActive = (!end && date >= start) || (end && date >= start && date <= end)\n      if (!isActive) return false\n      // Para días especiales (fines de semana o festivos), mostrar asignaciones de tipo 'festivos'\n      if (isSpecialDay) {\n        return assignment.assignment_type === 'festivos'\n      }\n      // Para días laborables, mostrar asignaciones de tipo 'laborables'\n      return assignment.assignment_type === 'laborables'\n    })\n    return result\n  }\n\n  // Función para obtener el horario específico de una asignación para un día\n  const getAssignmentScheduleForDay = (assignment: Assignment, date: Date) => {\n    if (!assignment.schedule) return null\n\n    const dayNames = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday']\n    const dayName = dayNames[date.getDay()]\n    const dateString = date.toLocaleDateString('en-CA')\n    const isHoliday = holidays.includes(dateString)\n\n    // NUEVA LÓGICA: Si es festivo y la asignación es de festivos y tiene schedule.holiday.enabled, usar ese horario\n    if (isHoliday && assignment.assignment_type === 'festivos' && assignment.schedule && assignment.schedule.holiday && assignment.schedule.holiday.enabled) {\n      const holidaySchedule = assignment.schedule.holiday\n      if (holidaySchedule.timeSlots && holidaySchedule.timeSlots.length > 0) {\n        return holidaySchedule.timeSlots[0]\n      }\n    }\n\n    const daySchedule = assignment.schedule[dayName]\n    if (daySchedule && daySchedule.enabled && daySchedule.timeSlots && daySchedule.timeSlots.length > 0) {\n      return daySchedule.timeSlots[0] // Tomamos el primer timeSlot\n    }\n    return null\n  }\n\n  // Función para formatear el horario\n  const formatTimeSlot = (timeSlot: { start: string; end: string }) => {\n    return `${timeSlot.start} - ${timeSlot.end}`\n  }\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto\"></div>\n          <p className=\"mt-4 text-slate-600\">Cargando planning...</p>\n        </div>\n      </div>\n    )\n  }\n\n  const weekDays = ['Lun', 'Mar', 'Mié', 'Jue', 'Vie', 'Sáb', 'Dom']\n\n  return (\n    <div className=\"min-h-screen bg-slate-50\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-slate-900 mb-2\">\n                Planning Mensual\n              </h1>\n              <p className=\"text-slate-600\">\n                Gestión y visualización del planning de servicios\n              </p>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <Button \n                variant=\"secondary\" \n                onClick={() => setShowFilters(!showFilters)}\n              >\n                <Filter className=\"w-4 h-4 mr-2\" />\n                Filtros\n                {showFilters ? <ChevronUp className=\"w-4 h-4 ml-2\" /> : <ChevronDown className=\"w-4 h-4 ml-2\" />}\n              </Button>\n              <Link href=\"/admin/assignments/new\">\n                <Button>\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Nueva Asignación\n                </Button>\n              </Link>\n            </div>\n          </div>\n        </div>\n\n        {/* Buscador Inteligente */}\n        <Card className=\"mb-6\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center space-x-4 mb-4\">\n              <div className=\"relative flex-1\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-slate-400 w-4 h-4\" />\n                <Input\n                  placeholder=\"Buscar por trabajadora, usuario o código de cliente...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10\"\n                />\n              </div>\n                             {(searchTerm || selectedWorker || selectedUser || selectedAssignmentType !== '') && (\n                 <Button variant=\"secondary\" onClick={clearFilters}>\n                   <X className=\"w-4 h-4 mr-2\" />\n                   Limpiar\n                 </Button>\n               )}\n            </div>\n\n            {/* Filtros Avanzados */}\n            {showFilters && (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 pt-4 border-t border-slate-200\">\n                {/* Filtro por Trabajadora */}\n                <div>\n                  <label className=\"block text-sm font-medium text-slate-700 mb-2\">\n                    Trabajadora\n                  </label>\n                  <select\n                    value={selectedWorker}\n                    onChange={(e) => setSelectedWorker(e.target.value)}\n                    className=\"w-full p-2 border border-slate-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                  >\n                    <option value=\"\">Todas las trabajadoras</option>\n                    {workers.map(worker => (\n                      <option key={worker.id} value={worker.id}>\n                        {worker.name} {worker.surname} ({worker.worker_type})\n                      </option>\n                    ))}\n                  </select>\n                </div>\n\n                {/* Filtro por Usuario */}\n                <div>\n                  <label className=\"block text-sm font-medium text-slate-700 mb-2\">\n                    Usuario\n                  </label>\n                  <select\n                    value={selectedUser}\n                    onChange={(e) => setSelectedUser(e.target.value)}\n                    className=\"w-full p-2 border border-slate-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                  >\n                    <option value=\"\">Todos los usuarios</option>\n                    {users.map(user => (\n                      <option key={user.id} value={user.id}>\n                        {user.name} {user.surname} ({user.client_code})\n                      </option>\n                    ))}\n                  </select>\n                </div>\n\n                {/* Filtro por Tipo de Asignación */}\n                <div>\n                  <label className=\"block text-sm font-medium text-slate-700 mb-2\">\n                    Tipo de Asignación\n                  </label>\n                  <select\n                    value={selectedAssignmentType}\n                    onChange={(e) => setSelectedAssignmentType(e.target.value)}\n                    className=\"w-full p-2 border border-slate-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                  >\n                    <option value=\"\">Todos los tipos</option>\n                    <option value=\"laborables\">Laborables</option>\n                    <option value=\"festivos\">Festivos</option>\n                  </select>\n                </div>\n\n                {/* Filtro por Estado */}\n                <div>\n                  <label className=\"block text-sm font-medium text-slate-700 mb-2\">\n                    Estado\n                  </label>\n                  <select\n                    value={selectedStatus}\n                    onChange={(e) => setSelectedStatus(e.target.value)}\n                    className=\"w-full p-2 border border-slate-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                  >\n                    <option value=\"active\">Activas</option>\n                    <option value=\"paused\">Pausadas</option>\n                    <option value=\"\">Todas</option>\n                  </select>\n                </div>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Breadcrumbs y Vista Actual */}\n        <div className=\"mb-6\">\n          <div className=\"flex items-center space-x-2 text-sm text-slate-600\">\n            <span>Vista:</span>\n            <span className=\"font-medium text-slate-900\">\n              {selectedWorker \n                ? `Trabajadora: ${workers.find(w => w.id === selectedWorker)?.name} ${workers.find(w => w.id === selectedWorker)?.surname}`\n                : selectedUser\n                ? `Usuario: ${users.find(u => u.id === selectedUser)?.name} ${users.find(u => u.id === selectedUser)?.surname}`\n                : 'General'\n              }\n            </span>\n            {filteredAssignments.length !== assignments.length && (\n              <span className=\"text-blue-600\">\n                ({filteredAssignments.length} de {assignments.length} asignaciones)\n              </span>\n            )}\n          </div>\n        </div>\n\n        {/* Stats Overview */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-6 gap-4 mb-8\">\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-slate-600\">\n                Asignaciones\n              </CardTitle>\n              <Users className=\"h-4 w-4 text-blue-600\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-slate-900\">\n                {stats.totalAssignments}\n              </div>\n              <p className=\"text-xs text-slate-600\">\n                activas\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-slate-600\">\n                Horas/Semana\n              </CardTitle>\n              <Clock className=\"h-4 w-4 text-green-600\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-slate-900\">\n                {stats.totalHours}\n              </div>\n              <p className=\"text-xs text-slate-600\">\n                programadas\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-slate-600\">\n                Trabajadoras\n              </CardTitle>\n              <UserCheck className=\"h-4 w-4 text-purple-600\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-slate-900\">\n                {stats.uniqueWorkers}\n              </div>\n              <p className=\"text-xs text-slate-600\">\n                asignadas\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-slate-600\">\n                Usuarios\n              </CardTitle>\n              <User className=\"h-4 w-4 text-orange-600\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-slate-900\">\n                {stats.uniqueUsers}\n              </div>\n              <p className=\"text-xs text-slate-600\">\n                atendidos\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-slate-600\">\n                Laborables\n              </CardTitle>\n              <Calendar className=\"h-4 w-4 text-blue-600\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-slate-900\">\n                {stats.laborables}\n              </div>\n              <p className=\"text-xs text-slate-600\">\n                asignaciones\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-slate-600\">\n                Festivos\n              </CardTitle>\n              <Calendar className=\"h-4 w-4 text-red-600\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-slate-900\">\n                {stats.festivos}\n              </div>\n              <p className=\"text-xs text-slate-600\">\n                asignaciones\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Calendar Navigation */}\n        <div className=\"flex items-center justify-between mb-6\">\n          <Button variant=\"secondary\" onClick={() => changeMonth('prev')}>\n            ← Mes Anterior\n          </Button>\n          <h2 className=\"text-xl font-semibold text-slate-900 capitalize\">\n            {getMonthName(currentMonth)}\n          </h2>\n          <Button variant=\"secondary\" onClick={() => changeMonth('next')}>\n            Mes Siguiente →\n          </Button>\n        </div>\n\n        {/* Calendar */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <Calendar className=\"w-5 h-5 text-blue-600\" />\n              <span>Calendario Mensual</span>\n              {filteredAssignments.length > 0 && (\n                <span className=\"text-sm text-slate-500 font-normal\">\n                  ({filteredAssignments.length} asignaciones mostradas)\n                </span>\n              )}\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-7 gap-1\">\n              {/* Headers */}\n              {weekDays.map(day => (\n                <div key={day} className=\"p-2 text-center text-sm font-medium text-slate-600 bg-slate-50 rounded\">\n                  {day}\n                </div>\n              ))}\n\n              {/* Calendar Days */}\n              {generateCalendarDays().map((cell, index) => {\n                const { date } = cell\n                let isSpecialDay = false\n                let dayAssignments: Assignment[] = []\n                \n                if (date) {\n                  isSpecialDay = isHolidayOrWeekend(date)\n                  dayAssignments = getAssignmentsForDay(date)\n                }\n\n                // Si hay filtro de trabajadora o usuario, mostrar siempre la celda aunque no haya asignación\n                const showAlways = selectedWorker || selectedUser\n                const hasAssignment = dayAssignments.length > 0\n\n                return (\n                  <div\n                    key={index}\n                    className={`p-2 min-h-[100px] border border-slate-200 ${\n                      date ? 'bg-white' : 'bg-slate-50'\n                    } ${isSpecialDay ? 'bg-red-50 border-red-200' : ''}`}\n                  >\n                    {date && (\n                      <>\n                        <div \n                          className={`text-sm font-medium mb-2 ${\n                            isSpecialDay ? 'text-red-900' : 'text-slate-900'\n                          }`}\n                        >\n                          {date.getDate()}\n                          {isSpecialDay && (\n                            <span className=\"ml-1 text-xs text-red-600\">\n                              {isHolidayOrWeekend(date) ? '🎯' : '🏖️'}\n                            </span>\n                          )}\n                        </div>\n                        <div className=\"space-y-1 max-h-[200px] overflow-y-auto\">\n                          {dayAssignments.map(assignment => {\n                            const schedule = getAssignmentScheduleForDay(assignment, date)\n                            // Solo mostrar si hay un horario específico para este día\n                            if (!schedule) return null\n                            \n                            return (\n                              <div\n                                key={assignment.id}\n                                className={`text-xs p-1 rounded border ${\n                                  assignment.assignment_type === 'festivos'\n                                    ? 'bg-red-100 border-red-300 text-red-800'\n                                    : 'bg-blue-100 border-blue-300 text-blue-800'\n                                }`}\n                                title={`${assignment.worker.name} ${assignment.worker.surname} → ${assignment.user.name} ${assignment.user.surname} (${assignment.weekly_hours}h)`}\n                              >\n                                <div className=\"font-medium truncate\">\n                                  {assignment.worker.name} → {assignment.user.name}\n                                </div>\n                                <div className=\"text-xs opacity-75\">\n                                  {formatTimeSlot(schedule)}\n                                </div>\n                              </div>\n                            )\n                          })}\n                        </div>\n                      </>\n                    )}\n                  </div>\n                )\n              })}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Assignments List */}\n        <Card className=\"mt-8\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <BarChart3 className=\"w-5 h-5 text-green-600\" />\n              <span>Asignaciones Filtradas</span>\n              {filteredAssignments.length > 0 && (\n                <span className=\"text-sm text-slate-500 font-normal\">\n                  ({filteredAssignments.length} resultados)\n                </span>\n              )}\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {filteredAssignments.length === 0 ? (\n              <div className=\"text-center py-8\">\n                <AlertTriangle className=\"w-12 h-12 text-slate-400 mx-auto mb-4\" />\n                <p className=\"text-slate-600\">No se encontraron asignaciones con los filtros aplicados</p>\n                <Button variant=\"secondary\" onClick={clearFilters} className=\"mt-4\">\n                  Limpiar filtros\n                </Button>\n              </div>\n            ) : (\n              <div className=\"overflow-x-auto\">\n                <table className=\"w-full\">\n                  <thead>\n                    <tr className=\"border-b border-slate-200\">\n                      <th className=\"text-left py-3 px-4 font-medium text-slate-700\">Trabajadora</th>\n                      <th className=\"text-left py-3 px-4 font-medium text-slate-700\">Usuario</th>\n                      <th className=\"text-left py-3 px-4 font-medium text-slate-700\">Tipo</th>\n                      <th className=\"text-left py-3 px-4 font-medium text-slate-700\">Horas/Semana</th>\n                      <th className=\"text-left py-3 px-4 font-medium text-slate-700\">Inicio</th>\n                      <th className=\"text-left py-3 px-4 font-medium text-slate-700\">Fin</th>\n                      <th className=\"text-left py-3 px-4 font-medium text-slate-700\">Estado</th>\n                      <th className=\"text-left py-3 px-4 font-medium text-slate-700\">Acciones</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {filteredAssignments.map(assignment => (\n                      <tr key={assignment.id} className=\"border-b border-slate-100 hover:bg-slate-50\">\n                        <td className=\"py-3 px-4\">\n                          <div className=\"font-medium text-slate-900\">\n                            {assignment.worker.name} {assignment.worker.surname}\n                          </div>\n                          <div className=\"text-sm text-slate-500\">\n                            {assignment.worker.worker_type}\n                          </div>\n                        </td>\n                        <td className=\"py-3 px-4\">\n                          <div className=\"font-medium text-slate-900\">\n                            {assignment.user.name} {assignment.user.surname}\n                          </div>\n                          <div className=\"text-sm text-slate-500\">\n                            {assignment.user.client_code}\n                          </div>\n                        </td>\n                        <td className=\"py-3 px-4\">\n                          <span className={`inline-flex px-2 py-1 text-xs font-medium rounded-full ${\n                            assignment.assignment_type === 'festivos'\n                              ? 'bg-red-100 text-red-800'\n                              : 'bg-blue-100 text-blue-800'\n                          }`}>\n                            {assignment.assignment_type === 'festivos' ? 'Festivos' : 'Laborables'}\n                          </span>\n                        </td>\n                        <td className=\"py-3 px-4\">\n                          <div className=\"font-medium text-slate-900\">\n                            {assignment.weekly_hours}h\n                          </div>\n                        </td>\n                        <td className=\"py-3 px-4 text-slate-600\">\n                          {new Date(assignment.start_date).toLocaleDateString('es-ES')}\n                        </td>\n                        <td className=\"py-3 px-4 text-slate-600\">\n                          {assignment.end_date \n                            ? new Date(assignment.end_date).toLocaleDateString('es-ES')\n                            : 'Indefinido'\n                          }\n                        </td>\n                        <td className=\"py-3 px-4\">\n                          <span className={`inline-flex px-2 py-1 text-xs font-medium rounded-full ${\n                            assignment.status === 'active' \n                              ? 'bg-green-100 text-green-800'\n                              : 'bg-yellow-100 text-yellow-800'\n                          }`}>\n                            {assignment.status === 'active' ? 'Activa' : 'Pausada'}\n                          </span>\n                        </td>\n                        <td className=\"py-3 px-4 flex space-x-2\">\n                          <Link href={`/admin/assignments/${assignment.id}/edit`}>\n                            <Button variant=\"ghost\" size=\"sm\">\n                              <Edit className=\"w-4 h-4 text-blue-600\" />\n                            </Button>\n                          </Link>\n                          <Link href={`/admin/assignments/${assignment.id}/reassign`}>\n                            <Button variant=\"ghost\" size=\"sm\">\n                              <UserPlus className=\"w-4 h-4 text-purple-600\" />\n                            </Button>\n                          </Link>\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  )\n} ","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"/Users/alamia.es/Public/SAD/src/app/admin/users/[id]/edit/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Phone' is defined but never used.","line":10,"column":39,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":44},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'MapPin' is defined but never used.","line":10,"column":46,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":52},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Badge' is defined but never used.","line":10,"column":108,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":113},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'warning' is assigned a value but never used.","line":73,"column":38,"nodeType":null,"messageId":"unusedVar","endLine":73,"endColumn":45},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'info' is assigned a value but never used.","line":73,"column":47,"nodeType":null,"messageId":"unusedVar","endLine":73,"endColumn":51},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchUser'. Either include it or remove the dependency array.","line":102,"column":6,"nodeType":"ArrayExpression","endLine":102,"endColumn":17,"suggestions":[{"desc":"Update the dependencies array to be: [fetchUser, params.id]","fix":{"range":[2873,2884],"text":"[fetchUser, params.id]"}}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":106,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":106,"endColumn":20,"suggestions":[{"fix":{"range":[2962,3008],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":119,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":119,"endColumn":22,"suggestions":[{"fix":{"range":[3224,3272],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":146,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":146,"endColumn":20,"suggestions":[{"fix":{"range":[4314,4355],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport { useState, useEffect } from 'react'\nimport { useParams, useRouter } from 'next/navigation'\nimport Link from 'next/link'\nimport { supabase } from '@/lib/supabase'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { ArrowLeft, Save, User, Mail, Phone, MapPin, AlertTriangle, CheckCircle, XCircle, Calendar, Heart, Badge, X } from 'lucide-react'\nimport { Badge as UIBadge } from '@/components/ui/badge'\nimport { useNotificationHelpers } from '@/components/ui/toast-notification'\n\ninterface EmergencyContact {\n  name: string\n  phone: string\n  relationship: string\n}\n\ninterface User {\n  id: string\n  name: string\n  surname: string\n  email: string\n  is_active: boolean\n  client_code: string\n  phone: string\n  address: string\n  city: string\n  postal_code: string\n  emergency_contacts?: EmergencyContact[]\n  dni?: string\n  monthly_hours?: number\n  special_requirements?: string[]\n  medical_conditions?: string[]\n  allergies?: string[]\n  medications?: string[]\n  created_at?: string\n}\n\nconst DAY_OPTIONS = [\n  { key: 'monday', label: 'Lunes' },\n  { key: 'tuesday', label: 'Martes' },\n  { key: 'wednesday', label: 'Miércoles' },\n  { key: 'thursday', label: 'Jueves' },\n  { key: 'friday', label: 'Viernes' },\n  { key: 'saturday', label: 'Sábado' },\n  { key: 'sunday', label: 'Domingo' },\n]\n\n// Definir tipo explícito para el estado del formulario\ninterface UserFormData {\n  name: string\n  surname: string\n  email: string\n  phone: string\n  address: string\n  city: string\n  postal_code: string\n  is_active: boolean\n  dni: string\n  monthly_hours: number\n  special_requirements: string[]\n  medical_conditions: string[]\n  allergies: string[]\n  medications: string[]\n  [key: string]: string | boolean | number | string[] // para acceso dinámico\n}\n\nexport default function EditUserPage() {\n  const params = useParams()\n  const router = useRouter()\n  const { success, error: showError, warning, info } = useNotificationHelpers()\n  \n  const [user, setUser] = useState<User | null>(null)\n  const [loading, setLoading] = useState(true)\n  const [saving, setSaving] = useState(false)\n  // Usar el tipo UserFormData en el useState de formData\n  const [formData, setFormData] = useState<UserFormData>({\n    name: '',\n    surname: '',\n    email: '',\n    phone: '',\n    address: '',\n    city: '',\n    postal_code: '',\n    is_active: true,\n    dni: '',\n    monthly_hours: 0,\n    special_requirements: [],\n    medical_conditions: [],\n    allergies: [],\n    medications: [],\n  })\n  const [errors, setErrors] = useState<{[key: string]: string}>({})\n  const [validationStates, setValidationStates] = useState<{[key: string]: 'valid' | 'invalid' | 'neutral'}>({})\n\n  useEffect(() => {\n    if (params.id) {\n      fetchUser(params.id as string)\n    }\n  }, [params.id])\n\n  const fetchUser = async (userId: string) => {\n    if (!supabase) {\n      console.error('Supabase client no disponible')\n      setLoading(false)\n      return\n    }\n\n    try {\n      const { data, error } = await supabase\n        .from('users')\n        .select('*')\n        .eq('id', userId)\n        .single()\n\n      if (error) {\n        console.error('Error al cargar usuario:', error)\n        alert('Error al cargar usuario: ' + JSON.stringify(error))\n      } else {\n        setUser(data)\n        setFormData({\n          name: data.name || '',\n          surname: data.surname || '',\n          email: data.email || '',\n          phone: data.phone?.replace('+34', '') || '',\n          address: data.address || '',\n          city: data.city || '',\n          postal_code: data.postal_code || '',\n          is_active: data.is_active,\n          dni: data.dni || '',\n          monthly_hours: data.monthly_hours || 0,\n          special_requirements: data.special_requirements || [],\n          medical_conditions: data.medical_conditions || [],\n          allergies: data.allergies || [],\n          medications: data.medications || [],\n        })\n        \n        // Validar campos al cargar\n        if (data.phone) validateField('phone', data.phone.replace('+34', ''))\n        if (data.postal_code) validateField('postal_code', data.postal_code)\n        if (data.dni) validateField('dni', data.dni)\n      }\n    } catch (error) {\n      console.error('Error inesperado:', error)\n      alert('Error inesperado: ' + JSON.stringify(error))\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const handleInputChange = (field: string, value: string | boolean | number) => {\n    setFormData(prev => ({\n      ...prev,\n      [field]: value\n    }))\n    \n    // Validar en tiempo real\n    if (typeof value === 'string') {\n      validateField(field, value)\n    }\n  }\n\n  // Funciones de validación\n  const validateDNI = (dni: string): { isValid: boolean; error?: string } => {\n    if (!dni) return { isValid: true }\n    \n    // Formato básico: 8 dígitos + 1 letra\n    const dniRegex = /^[0-9]{8}[A-Z]$/\n    if (!dniRegex.test(dni)) {\n      return { isValid: false, error: 'El DNI debe tener 8 dígitos seguidos de una letra mayúscula' }\n    }\n    \n    // Validar letra de control\n    const numbers = dni.substring(0, 8)\n    const letter = dni.substring(8, 9)\n    const validLetters = 'TRWAGMYFPDXBNJZSQVHLCKE'\n    const expectedLetter = validLetters.charAt(parseInt(numbers) % 23)\n    \n    if (letter !== expectedLetter) {\n      return { isValid: false, error: `La letra correcta para ${numbers} es ${expectedLetter}` }\n    }\n    \n    return { isValid: true }\n  }\n\n  const validatePostalCode = (postalCode: string): { isValid: boolean; error?: string; province?: string } => {\n    if (!postalCode) return { isValid: true }\n    \n    // Formato: 5 dígitos\n    const postalCodeRegex = /^[0-9]{5}$/\n    if (!postalCodeRegex.test(postalCode)) {\n      return { isValid: false, error: 'El código postal debe tener 5 dígitos' }\n    }\n    \n    const code = parseInt(postalCode)\n    \n    // Validar rangos por provincia\n    const provinces: { [key: string]: { min: number; max: number } } = {\n      'Álava': { min: 1000, max: 1999 },\n      'Albacete': { min: 2000, max: 2999 },\n      'Alicante': { min: 3000, max: 3999 },\n      'Almería': { min: 4000, max: 4999 },\n      'Asturias': { min: 33000, max: 33999 },\n      'Ávila': { min: 5000, max: 5999 },\n      'Badajoz': { min: 6000, max: 6999 },\n      'Baleares': { min: 7000, max: 7999 },\n      'Barcelona': { min: 8000, max: 8999 },\n      'Burgos': { min: 9000, max: 9999 },\n      'Cáceres': { min: 10000, max: 10999 },\n      'Cádiz': { min: 11000, max: 11999 },\n      'Cantabria': { min: 39000, max: 39999 },\n      'Castellón': { min: 12000, max: 12999 },\n      'Ciudad Real': { min: 13000, max: 13999 },\n      'Córdoba': { min: 14000, max: 14999 },\n      'La Coruña': { min: 15000, max: 15999 },\n      'Cuenca': { min: 16000, max: 16999 },\n      'Girona': { min: 17000, max: 17999 },\n      'Granada': { min: 18000, max: 18999 },\n      'Guadalajara': { min: 19000, max: 19999 },\n      'Guipúzcoa': { min: 20000, max: 20999 },\n      'Huelva': { min: 21000, max: 21999 },\n      'Huesca': { min: 22000, max: 22999 },\n      'Jaén': { min: 23000, max: 23999 },\n      'León': { min: 24000, max: 24999 },\n      'Lleida': { min: 25000, max: 25999 },\n      'La Rioja': { min: 26000, max: 26999 },\n      'Lugo': { min: 27000, max: 27999 },\n      'Madrid': { min: 28000, max: 28999 },\n      'Málaga': { min: 29000, max: 29999 },\n      'Murcia': { min: 30000, max: 30999 },\n      'Navarra': { min: 31000, max: 31999 },\n      'Ourense': { min: 32000, max: 32999 },\n      'Palencia': { min: 34000, max: 34999 },\n      'Las Palmas': { min: 35000, max: 35999 },\n      'Pontevedra': { min: 36000, max: 36999 },\n      'Salamanca': { min: 37000, max: 37999 },\n      'Santa Cruz de Tenerife': { min: 38000, max: 38999 },\n      'Segovia': { min: 40000, max: 40999 },\n      'Sevilla': { min: 41000, max: 41999 },\n      'Soria': { min: 42000, max: 42999 },\n      'Tarragona': { min: 43000, max: 43999 },\n      'Teruel': { min: 44000, max: 44999 },\n      'Toledo': { min: 45000, max: 45999 },\n      'Valencia': { min: 46000, max: 46999 },\n      'Valladolid': { min: 47000, max: 47999 },\n      'Vizcaya': { min: 48000, max: 48999 },\n      'Zamora': { min: 49000, max: 49999 },\n      'Zaragoza': { min: 50000, max: 50999 },\n      'Ceuta': { min: 51000, max: 51999 },\n      'Melilla': { min: 52000, max: 52999 }\n    }\n    \n    let province = ''\n    for (const [prov, range] of Object.entries(provinces)) {\n      if (code >= range.min && code <= range.max) {\n        province = prov\n        break\n      }\n    }\n    \n    if (!province) {\n      return { isValid: false, error: 'Código postal no válido para España' }\n    }\n    \n    return { isValid: true, province }\n  }\n\n  const validateField = (field: string, value: string) => {\n    let isValid = true\n    let error = ''\n    let province = ''\n    \n    switch (field) {\n      case 'phone':\n        if (value && !/^[679][0-9]{8}$/.test(value.replace(/\\s/g, ''))) {\n          isValid = false\n          error = 'El teléfono debe tener 9 dígitos y comenzar con 6, 7 o 9'\n        }\n        break\n      case 'postal_code': {\n        const postalValidation = validatePostalCode(value)\n        isValid = postalValidation.isValid\n        error = postalValidation.error || ''\n        province = postalValidation.province || ''\n        // Validación cruzada ciudad-código postal\n        if (formData.city.trim().toLowerCase() === 'mataró' && !value.startsWith('0830')) {\n          isValid = false\n          error = 'El código postal de Mataró debe empezar por 0830'\n        }\n        break\n      }\n      case 'city': {\n        // Si la ciudad es Mataró, validar el código postal\n        if (value.trim().toLowerCase() === 'mataró' && formData.postal_code && !formData.postal_code.startsWith('0830')) {\n          isValid = false\n          error = 'El código postal de Mataró debe empezar por 0830'\n        }\n        break\n      }\n      case 'dni':\n        const dniValidation = validateDNI(value)\n        isValid = dniValidation.isValid\n        error = dniValidation.error || ''\n        break\n    }\n    \n    setErrors(prev => ({\n      ...prev,\n      [field]: error\n    }))\n    \n    setValidationStates(prev => ({\n      ...prev,\n      [field]: value ? (isValid ? 'valid' : 'invalid') : 'neutral'\n    }))\n    \n    // Auto-detectar provincia si el código postal es válido\n    if (field === 'postal_code' && province && !formData.city) {\n      setFormData(prev => ({\n        ...prev,\n        city: province\n      }))\n    }\n  }\n\n  const getValidationIcon = (field: string) => {\n    const state = validationStates[field]\n    if (state === 'valid') {\n      return <CheckCircle className=\"w-4 h-4 text-green-500\" />\n    } else if (state === 'invalid') {\n      return <XCircle className=\"w-4 h-4 text-red-500\" />\n    }\n    return null\n  }\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    if (!user || !supabase) return\n\n    // Validar campos antes de enviar\n    validateField('dni', formData.dni)\n    validateField('postal_code', formData.postal_code)\n    validateField('city', formData.city)\n    const hasErrors = Object.values(errors).some(error => error !== '') || !!validateDNI(formData.dni).error\n    if (hasErrors) {\n      showError('Por favor, corrige los errores en el formulario antes de guardar.')\n      return\n    }\n\n    setSaving(true)\n    try {\n      // Preparar datos para guardar (añadir +34 al teléfono)\n      const dataToSave = {\n        ...formData,\n        phone: formData.phone ? `+34${formData.phone}` : '',\n        monthly_hours: formData.monthly_hours || 0,\n        special_requirements: formData.special_requirements || [],\n        medical_conditions: formData.medical_conditions || [],\n        allergies: formData.allergies || [],\n        medications: formData.medications || [],\n      }\n\n      const { error } = await supabase\n        .from('users')\n        .update(dataToSave)\n        .eq('id', user.id)\n\n      if (error) {\n        throw error\n      }\n\n      success('Usuario actualizado correctamente')\n      setTimeout(() => {\n        router.push('/admin/users')\n      }, 1500)\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Error desconocido'\n      showError('Error al actualizar usuario: ' + errorMessage)\n    } finally {\n      setSaving(false)\n    }\n  }\n\n  const handleArrayChange = (field: string, value: string[]) => {\n    setFormData(prev => ({ ...prev, [field]: value }))\n  }\n  const handleDayToggle = (day: string) => {\n    setFormData(prev => {\n      const days = prev.special_requirements.includes(day)\n        ? prev.special_requirements.filter(d => d !== day)\n        : [...prev.special_requirements, day]\n      return { ...prev, special_requirements: days }\n    })\n  }\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto\"></div>\n          <p className=\"mt-4 text-slate-600\">Cargando usuario...</p>\n        </div>\n      </div>\n    )\n  }\n\n  if (!user) {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"text-center\">\n          <AlertTriangle className=\"w-16 h-16 text-red-500 mx-auto mb-4\" />\n          <h1 className=\"text-2xl font-bold text-slate-900 mb-2\">Usuario no encontrado</h1>\n          <p className=\"text-slate-600 mb-6\">El usuario que buscas no existe o ha sido eliminado.</p>\n          <Link href=\"/admin/users\">\n            <Button>\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Volver a Usuarios\n            </Button>\n          </Link>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      {/* Header */}\n      <div className=\"flex justify-between items-center mb-8\">\n        <div className=\"flex items-center\">\n          <Link href={`/admin/users/${user.id}`}>\n            <Button variant=\"default\" className=\"mr-4\">\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Volver\n            </Button>\n          </Link>\n          <div>\n            <h1 className=\"text-3xl font-bold text-slate-900\">\n              Editar Usuario\n            </h1>\n            <p className=\"text-slate-600\">Modificar información de {user.name} {user.surname}</p>\n          </div>\n        </div>\n      </div>\n\n      <form onSubmit={handleSubmit}>\n        <Card className=\"mb-8\">\n          <CardHeader className=\"bg-gradient-to-r from-blue-50 to-blue-100 border-b border-blue-200\">\n            <CardTitle className=\"flex items-center gap-2 text-blue-900\">\n              <Calendar className=\"w-6 h-6 text-blue-600\" />\n              Servicio Asignado\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"flex flex-col md:flex-row md:items-center md:justify-between gap-6 p-8\">\n            <div className=\"flex flex-col items-center justify-center flex-1\">\n              <input\n                type=\"number\"\n                step=\"0.25\"\n                min={0}\n                className=\"text-5xl md:text-7xl font-extrabold text-blue-700 mb-2 bg-transparent border-none focus:ring-0 focus:outline-none text-center w-32\"\n                value={formData.monthly_hours}\n                onChange={e => handleInputChange('monthly_hours', parseFloat(e.target.value) || 0)}\n                style={{ outline: 'none', boxShadow: 'none' }}\n              />\n              <span className=\"text-base text-slate-600\">Horas mensuales asignadas</span>\n            </div>\n            <div className=\"flex-1\">\n              <div className=\"mb-2 text-slate-700 font-semibold\">Días de servicio:</div>\n              <div className=\"flex flex-wrap gap-2\">\n                {DAY_OPTIONS.map(day => (\n                  <button\n                    type=\"button\"\n                    key={day.key}\n                    className={`px-4 py-2 rounded-full border font-semibold text-base transition-all ${formData.special_requirements.includes(day.key)\n                      ? 'bg-blue-100 text-blue-800 border-blue-300'\n                      : 'bg-slate-100 text-slate-500 border-slate-300'}`}\n                    onClick={() => handleDayToggle(day.key)}\n                  >\n                    {day.label}\n                  </button>\n                ))}\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n          {/* Información Personal */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <User className=\"w-5 h-5 mr-2\" />\n                Información Personal\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"text-sm font-medium text-slate-600\">Nombre *</label>\n                  <Input\n                    type=\"text\"\n                    value={formData.name}\n                    onChange={(e) => handleInputChange('name', e.target.value)}\n                    required\n                  />\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium text-slate-600\">Apellidos *</label>\n                  <Input\n                    type=\"text\"\n                    value={formData.surname}\n                    onChange={(e) => handleInputChange('surname', e.target.value)}\n                    required\n                  />\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"text-sm font-medium text-slate-600\">DNI</label>\n                  <div className=\"relative\">\n                    <Input\n                      type=\"text\"\n                      value={formData.dni}\n                      onChange={e => handleInputChange('dni', e.target.value.toUpperCase())}\n                      maxLength={9}\n                      required\n                      className={`pr-10 ${validationStates.dni === 'invalid' ? 'border-red-500 focus:border-red-500' : validationStates.dni === 'valid' ? 'border-green-500 focus:border-green-500' : ''}`}\n                    />\n                    <div className=\"absolute inset-y-0 right-0 flex items-center pr-3\">\n                      {getValidationIcon('dni')}\n                    </div>\n                  </div>\n                  {errors.dni && (\n                    <p className=\"text-red-500 text-xs mt-1\">{errors.dni}</p>\n                  )}\n                  {!errors.dni && formData.dni && validationStates.dni === 'valid' && (\n                    <p className=\"text-green-600 text-xs mt-1\">DNI válido</p>\n                  )}\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium text-slate-600\">Código de Cliente</label>\n                  <p className=\"text-slate-900 font-mono bg-slate-100 px-2 py-1 rounded text-sm\">\n                    {user.client_code}\n                  </p>\n                  <p className=\"text-xs text-slate-500 mt-1\">El código de cliente no se puede modificar</p>\n                </div>\n              </div>\n              <div>\n                <label className=\"text-sm font-medium text-slate-600\">Fecha de Registro</label>\n                <p className=\"text-slate-900\">\n                  {user.created_at ? new Date(user.created_at).toLocaleDateString('es-ES', { year: 'numeric', month: 'long', day: 'numeric' }) : '-'}\n                </p>\n              </div>\n\n              <div>\n                <label className=\"text-sm font-medium text-slate-600\">Estado</label>\n                <div className=\"flex items-center mt-2\">\n                  <input\n                    type=\"checkbox\"\n                    id=\"is_active\"\n                    checked={formData.is_active}\n                    onChange={(e) => handleInputChange('is_active', e.target.checked)}\n                    className=\"mr-2\"\n                  />\n                  <label htmlFor=\"is_active\" className=\"text-sm text-slate-700\">\n                    Usuario activo\n                  </label>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Información de Contacto */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Mail className=\"w-5 h-5 mr-2\" />\n                Información de Contacto\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <label className=\"text-sm font-medium text-slate-600\">Email *</label>\n                <Input\n                  type=\"email\"\n                  value={formData.email}\n                  onChange={(e) => handleInputChange('email', e.target.value)}\n                  required\n                />\n              </div>\n\n              <div>\n                <label className=\"text-sm font-medium text-slate-600\">Teléfono *</label>\n                <div className=\"relative\">\n                  <Input\n                    type=\"tel\"\n                    value={formData.phone?.replace('+34', '') || ''}\n                    onChange={(e) => handleInputChange('phone', e.target.value)}\n                    placeholder=\"612345678\"\n                    className={`pr-10 ${validationStates.phone === 'invalid' ? 'border-red-500 focus:border-red-500' : validationStates.phone === 'valid' ? 'border-green-500 focus:border-green-500' : ''}`}\n                    required\n                  />\n                  <div className=\"absolute inset-y-0 right-0 flex items-center pr-3\">\n                    {getValidationIcon('phone')}\n                  </div>\n                </div>\n                {errors.phone && (\n                  <p className=\"text-red-500 text-xs mt-1\">{errors.phone}</p>\n                )}\n                <p className=\"text-xs text-slate-500 mt-1\">Sin código de país (+34)</p>\n              </div>\n\n              <div>\n                <label className=\"text-sm font-medium text-slate-600\">Dirección</label>\n                <Input\n                  type=\"text\"\n                  value={formData.address}\n                  onChange={(e) => handleInputChange('address', e.target.value)}\n                />\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"text-sm font-medium text-slate-600\">Ciudad</label>\n                  <Input\n                    type=\"text\"\n                    value={formData.city}\n                    onChange={e => handleInputChange('city', e.target.value)}\n                    onBlur={e => validateField('city', e.target.value)}\n                  />\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium text-slate-600\">Código Postal</label>\n                  <div className=\"relative\">\n                    <Input\n                      type=\"text\"\n                      value={formData.postal_code}\n                      onChange={e => handleInputChange('postal_code', e.target.value)}\n                      placeholder=\"28001\"\n                      maxLength={5}\n                      className={`pr-10 ${validationStates.postal_code === 'invalid' ? 'border-red-500 focus:border-red-500' : validationStates.postal_code === 'valid' ? 'border-green-500 focus:border-green-500' : ''}`}\n                    />\n                    <div className=\"absolute inset-y-0 right-0 flex items-center pr-3\">\n                      {getValidationIcon('postal_code')}\n                    </div>\n                  </div>\n                  {errors.postal_code && (\n                    <p className=\"text-red-500 text-xs mt-1\">{errors.postal_code}</p>\n                  )}\n                  {!errors.postal_code && formData.postal_code && validationStates.postal_code === 'valid' && (\n                    <p className=\"text-green-600 text-xs mt-1\">Código postal válido</p>\n                  )}\n                  <p className=\"text-xs text-slate-500 mt-1\">5 dígitos (ej: 28001 para Madrid, 0830X para Mataró)</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Botones de Acción */}\n        <div className=\"flex justify-end gap-4 mt-8\">\n          <Link href={`/admin/users/${user.id}`}>\n            <Button variant=\"default\" type=\"button\">\n              Cancelar\n            </Button>\n          </Link>\n          <Button type=\"submit\" disabled={saving} className=\"bg-blue-600 hover:bg-blue-700\">\n            <Save className=\"w-4 h-4 mr-2\" />\n            {saving ? 'Guardando...' : 'Guardar Cambios'}\n          </Button>\n        </div>\n      </form>\n\n      {/* Añadir tarjeta de Información Médica editable */}\n      <Card className=\"lg:col-span-2\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <Heart className=\"w-5 h-5 mr-2 text-red-500\" />\n            Información Médica\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          {['medical_conditions','allergies','medications'].map(field => (\n            <div key={field}>\n              <label className=\"text-sm font-medium text-slate-600\">\n                {field === 'medical_conditions' ? 'Condiciones Médicas' : field === 'allergies' ? 'Alergias' : 'Medicamentos'}\n              </label>\n              <div className=\"flex flex-wrap gap-2 mt-1\">\n                {(formData[field] as string[]).length > 0 && (formData[field] as string[]).map((item: string, idx: number) => (\n                  <UIBadge key={idx} className=\"bg-blue-100 text-blue-800 border border-blue-300 font-semibold px-3 py-1 flex items-center\">\n                    {item}\n                    <button type=\"button\" className=\"ml-2 text-red-500\" onClick={() => handleArrayChange(field, (formData[field] as string[]).filter((_: string, i: number) => i !== idx))}><X className=\"w-3 h-3\" /></button>\n                  </UIBadge>\n                ))}\n                <input\n                  type=\"text\"\n                  className=\"border rounded px-2 py-1 text-sm\"\n                  placeholder={`Añadir ${field === 'medical_conditions' ? 'condición' : field === 'allergies' ? 'alergia' : 'medicamento'}`}\n                  onKeyDown={e => {\n                    if (e.key === 'Enter' && e.currentTarget.value.trim()) {\n                      e.preventDefault()\n                      handleArrayChange(field, [...(formData[field] as string[]), e.currentTarget.value.trim()])\n                      e.currentTarget.value = ''\n                    }\n                  }}\n                />\n              </div>\n            </div>\n          ))}\n        </CardContent>\n      </Card>\n    </div>\n  )\n} ","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"/Users/alamia.es/Public/SAD/src/app/admin/users/[id]/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'router' is assigned a value but never used.","line":41,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":41,"endColumn":15},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":53,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":53,"endColumn":20,"suggestions":[{"fix":{"range":[1345,1391],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":66,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":66,"endColumn":22,"suggestions":[{"fix":{"range":[1607,1655],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":72,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":72,"endColumn":20,"suggestions":[{"fix":{"range":[1796,1837],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport { useState, useEffect } from 'react'\nimport { useParams, useRouter } from 'next/navigation'\nimport Link from 'next/link'\nimport { supabase } from '@/lib/supabase'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { ArrowLeft, Edit, User, Mail, Phone, MapPin, Calendar, AlertTriangle, Heart } from 'lucide-react'\nimport { Badge } from '@/components/ui/badge'\n\ninterface EmergencyContact {\n  name: string\n  phone: string\n  relationship: string\n}\n\ninterface User {\n  id: string\n  name: string\n  surname: string\n  email: string\n  is_active: boolean\n  client_code: string\n  phone: string\n  address: string\n  city: string\n  postal_code: string\n  emergency_contacts?: EmergencyContact[]\n  created_at: string\n  monthly_hours?: number\n  special_requirements?: string[]\n  dni?: string\n  medical_conditions?: string[]\n  allergies?: string[]\n  medications?: string[]\n}\n\nexport default function UserDetailPage() {\n  const params = useParams()\n  const router = useRouter()\n  const [user, setUser] = useState<User | null>(null)\n  const [loading, setLoading] = useState(true)\n\n  useEffect(() => {\n    if (params.id) {\n      fetchUser(params.id as string)\n    }\n  }, [params.id])\n\n  const fetchUser = async (userId: string) => {\n    if (!supabase) {\n      console.error('Supabase client no disponible')\n      setLoading(false)\n      return\n    }\n\n    try {\n      const { data, error } = await supabase\n        .from('users')\n        .select('*')\n        .eq('id', userId)\n        .single()\n\n      if (error) {\n        console.error('Error al cargar usuario:', error)\n        alert('Error al cargar usuario: ' + JSON.stringify(error))\n      } else {\n        setUser(data)\n      }\n    } catch (error) {\n      console.error('Error inesperado:', error)\n      alert('Error inesperado: ' + JSON.stringify(error))\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  // Helper para mostrar el nombre del día\n  const getDayName = (day: string) => {\n    const dayNames: { [key: string]: string } = {\n      monday: 'Lunes',\n      tuesday: 'Martes',\n      wednesday: 'Miércoles',\n      thursday: 'Jueves',\n      friday: 'Viernes',\n      saturday: 'Sábado',\n      sunday: 'Domingo',\n    }\n    return dayNames[day] || day\n  }\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto\"></div>\n          <p className=\"mt-4 text-slate-600\">Cargando usuario...</p>\n        </div>\n      </div>\n    )\n  }\n\n  if (!user) {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"text-center\">\n          <AlertTriangle className=\"w-16 h-16 text-red-500 mx-auto mb-4\" />\n          <h1 className=\"text-2xl font-bold text-slate-900 mb-2\">Usuario no encontrado</h1>\n          <p className=\"text-slate-600 mb-6\">El usuario que buscas no existe o ha sido eliminado.</p>\n          <Link href=\"/admin/users\">\n            <Button>\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Volver a Usuarios\n            </Button>\n          </Link>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      {/* Header */}\n      <div className=\"flex justify-between items-center mb-8\">\n        <div className=\"flex items-center\">\n          <Link href=\"/admin/users\">\n            <Button variant=\"default\" className=\"mr-4\">\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Volver\n            </Button>\n          </Link>\n          <div>\n            <h1 className=\"text-3xl font-bold text-slate-900\">\n              {user.name} {user.surname}\n            </h1>\n            <p className=\"text-slate-600\">Detalles del usuario</p>\n          </div>\n        </div>\n        <Link href={`/admin/users/${user.id}/edit`}>\n          <Button className=\"bg-blue-600 hover:bg-blue-700\">\n            <Edit className=\"w-4 h-4 mr-2\" />\n            Editar Usuario\n          </Button>\n        </Link>\n      </div>\n\n      {/* Servicio: Horas y Días */}\n      <Card className=\"mb-8\">\n        <CardHeader className=\"bg-gradient-to-r from-blue-50 to-blue-100 border-b border-blue-200\">\n          <CardTitle className=\"flex items-center gap-2 text-blue-900\">\n            <Calendar className=\"w-6 h-6 text-blue-600\" />\n            Servicio Asignado\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"flex flex-col md:flex-row md:items-center md:justify-between gap-6 p-8\">\n          <div className=\"flex flex-col items-center justify-center flex-1\">\n            <span className=\"text-5xl md:text-7xl font-extrabold text-blue-700 mb-2\">{user.monthly_hours || 0}h</span>\n            <span className=\"text-base text-slate-600\">Horas mensuales asignadas</span>\n          </div>\n          <div className=\"flex-1\">\n            <div className=\"mb-2 text-slate-700 font-semibold\">Días de servicio:</div>\n            <div className=\"flex flex-wrap gap-2\">\n              {(user.special_requirements && user.special_requirements.length > 0)\n                ? [\n                    'monday','tuesday','wednesday','thursday','friday','saturday','sunday'\n                  ].filter(day => (user.special_requirements ?? []).includes(day)).map(day => (\n                    <Badge key={day} className=\"text-base px-4 py-2 bg-blue-100 text-blue-800 border border-blue-300 font-semibold\">\n                      {getDayName(day)}\n                    </Badge>\n                  ))\n                : <span className=\"text-slate-400 italic\">No hay días asignados</span>\n              }\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n        {/* Información Personal */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <User className=\"w-5 h-5 mr-2\" />\n              Información Personal\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <label className=\"text-sm font-medium text-slate-600\">Nombre</label>\n                <p className=\"text-slate-900\">{user.name}</p>\n              </div>\n              <div>\n                <label className=\"text-sm font-medium text-slate-600\">Apellidos</label>\n                <p className=\"text-slate-900\">{user.surname}</p>\n              </div>\n            </div>\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <label className=\"text-sm font-medium text-slate-600\">DNI</label>\n                <p className=\"text-slate-900\">{user.dni || <span className=\"text-slate-400 italic\">No registrado</span>}</p>\n              </div>\n              <div>\n                <label className=\"text-sm font-medium text-slate-600\">Código de Cliente</label>\n                <p className=\"text-slate-900 font-mono bg-slate-100 px-2 py-1 rounded\">{user.client_code}</p>\n              </div>\n            </div>\n            <div>\n              <label className=\"text-sm font-medium text-slate-600\">Estado</label>\n              <span className={user.is_active ? 'bg-green-100 text-green-800 px-2 py-1 rounded text-xs font-semibold' : 'bg-red-100 text-red-800 px-2 py-1 rounded text-xs font-semibold'}>\n                {user.is_active ? 'Activo' : 'Inactivo'}\n              </span>\n            </div>\n            <div>\n              <label className=\"text-sm font-medium text-slate-600\">Fecha de Registro</label>\n              <p className=\"text-slate-900\">\n                {new Date(user.created_at).toLocaleDateString('es-ES', {\n                  year: 'numeric',\n                  month: 'long',\n                  day: 'numeric'\n                })}\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n        {/* Información de Contacto */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Mail className=\"w-5 h-5 mr-2\" />\n              Información de Contacto\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div>\n              <label className=\"text-sm font-medium text-slate-600\">Email</label>\n              <p className=\"text-slate-900 flex items-center\">\n                <Mail className=\"w-4 h-4 mr-2 text-slate-400\" />\n                {user.email}\n              </p>\n            </div>\n            <div>\n              <label className=\"text-sm font-medium text-slate-600\">Teléfono</label>\n              <p className=\"text-slate-900 flex items-center\">\n                <Phone className=\"w-4 h-4 mr-2 text-slate-400\" />\n                {user.phone}\n              </p>\n            </div>\n            <div>\n              <label className=\"text-sm font-medium text-slate-600\">Dirección</label>\n              <p className=\"text-slate-900 flex items-center\">\n                <MapPin className=\"w-4 h-4 mr-2 text-slate-400\" />\n                {user.address}\n              </p>\n            </div>\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <label className=\"text-sm font-medium text-slate-600\">Ciudad</label>\n                <p className=\"text-slate-900\">{user.city}</p>\n              </div>\n              <div>\n                <label className=\"text-sm font-medium text-slate-600\">Código Postal</label>\n                <p className=\"text-slate-900\">{user.postal_code}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        {/* Información Médica */}\n        <Card className=\"lg:col-span-2\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Heart className=\"w-5 h-5 mr-2 text-red-500\" />\n              Información Médica\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div>\n              <label className=\"text-sm font-medium text-slate-600\">Condiciones Médicas</label>\n              <div className=\"flex flex-wrap gap-2 mt-1\">\n                {user.medical_conditions && user.medical_conditions.length > 0\n                  ? user.medical_conditions.map((cond, idx) => (\n                      <Badge key={idx} className=\"bg-pink-100 text-pink-800 border border-pink-300 font-semibold px-3 py-1\">\n                        {cond}\n                      </Badge>\n                    ))\n                  : <span className=\"text-slate-400 italic\">Sin condiciones médicas</span>\n                }\n              </div>\n            </div>\n            <div>\n              <label className=\"text-sm font-medium text-slate-600\">Alergias</label>\n              <div className=\"flex flex-wrap gap-2 mt-1\">\n                {user.allergies && user.allergies.length > 0\n                  ? user.allergies.map((allergy, idx) => (\n                      <Badge key={idx} className=\"bg-yellow-100 text-yellow-800 border border-yellow-300 font-semibold px-3 py-1\">\n                        {allergy}\n                      </Badge>\n                    ))\n                  : <span className=\"text-slate-400 italic\">Sin alergias</span>\n                }\n              </div>\n            </div>\n            <div>\n              <label className=\"text-sm font-medium text-slate-600\">Medicamentos</label>\n              <div className=\"flex flex-wrap gap-2 mt-1\">\n                {user.medications && user.medications.length > 0\n                  ? user.medications.map((med, idx) => (\n                      <Badge key={idx} className=\"bg-blue-100 text-blue-800 border border-blue-300 font-semibold px-3 py-1\">\n                        {med}\n                      </Badge>\n                    ))\n                  : <span className=\"text-slate-400 italic\">Sin medicamentos</span>\n                }\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  )\n} ","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"/Users/alamia.es/Public/SAD/src/app/admin/users/new/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Phone' is defined but never used.","line":8,"column":33,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":38},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Mail' is defined but never used.","line":8,"column":40,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":44},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'MapPin' is defined but never used.","line":8,"column":46,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":52},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Calendar' is defined but never used.","line":8,"column":54,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":62},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CheckCircle' is defined but never used.","line":8,"column":71,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":82},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'XCircle' is defined but never used.","line":8,"column":84,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":91},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'validateAddress' is defined but never used.","line":13,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isValidSpanishPostalCode' is defined but never used.","line":15,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isValidPostalCodeForProvince' is defined but never used.","line":16,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isValidDNI' is defined but never used.","line":19,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isValidDNIFormat' is defined but never used.","line":20,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getCorrectDNILetter' is defined but never used.","line":21,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'formatDNI' is defined but never used.","line":22,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":12},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":43,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":43,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1143,1146],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1143,1146],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":89,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":89,"endColumn":20,"suggestions":[{"fix":{"range":[2191,2237],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is assigned a value but never used.","line":93,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":93,"endColumn":26},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":110,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":110,"endColumn":20,"suggestions":[{"fix":{"range":[2882,2941],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":142,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":142,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3750,3753],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3750,3753],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":163,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":163,"endColumn":22,"suggestions":[{"fix":{"range":[4866,4913],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":171,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":171,"endColumn":20,"suggestions":[{"fix":{"range":[5138,5179],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":178,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":178,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5382,5385],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5382,5385],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport { useRouter } from 'next/navigation'\nimport { useToast } from '@/components/ui/toast'\nimport { supabase } from '@/lib/supabase'\nimport { Button } from '@/components/ui/button'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { ArrowLeft, Save, User, Phone, Mail, MapPin, Calendar, Heart, CheckCircle, XCircle } from 'lucide-react'\nimport Link from 'next/link'\nimport { useState, useEffect } from 'react'\nimport {\n  validateWorker,\n  validateAddress,\n  isValidPostalCodeFormat,\n  isValidSpanishPostalCode,\n  isValidPostalCodeForProvince,\n  getProvinceByPostalCode,\n  getPostalCodeSuggestions,\n  isValidDNI,\n  isValidDNIFormat,\n  getCorrectDNILetter,\n  formatDNI,\n  POSTAL_CODE_RANGES\n} from '@/lib/utils'\n\ninterface UserFormData {\n  client_code: string\n  name: string\n  surname: string\n  email: string\n  phone: string\n  dni: string\n  address: string\n  postal_code: string\n  city: string\n  province: string\n  monthly_hours: number\n  service_type: string\n  special_requirements: string[]\n  medical_conditions: string[]\n  allergies: string[]\n  medications: string[]\n  emergency_contacts: any[]\n  status: 'active' | 'paused' | 'completed' | 'cancelled'\n  notes: string\n}\n\nexport default function NewUserPage() {\n  const router = useRouter()\n  const { showToast, ToastComponent } = useToast()\n  const [loading, setLoading] = useState(false)\n  const [validationErrors, setValidationErrors] = useState<{\n    dni?: string\n    address?: string\n    postal_code?: string\n    city?: string\n    province?: string\n  }>({})\n\n  const [formData, setFormData] = useState<UserFormData>({\n    client_code: '',\n    name: '',\n    surname: '',\n    email: '',\n    phone: '',\n    dni: '',\n    address: '',\n    postal_code: '',\n    city: 'Mataró',\n    province: 'Barcelona',\n    monthly_hours: 0,\n    service_type: '',\n    special_requirements: [],\n    medical_conditions: [],\n    allergies: [],\n    medications: [],\n    emergency_contacts: [],\n    status: 'active',\n    notes: ''\n  })\n\n  // Generar código de cliente automáticamente\n  useEffect(() => {\n    generateClientCode()\n  }, [])\n\n  const generateClientCode = async () => {\n    if (!supabase) {\n      console.error('Supabase client no disponible')\n      return\n    }\n    try {\n      const { data, error } = await supabase\n        .from('users')\n        .select('client_code')\n        .order('client_code', { ascending: false })\n        .limit(1)\n      let nextCode = 'US001'\n      if (data && data.length > 0) {\n        const lastCode = data[0].client_code\n        if (lastCode && lastCode.startsWith('US')) {\n          const number = parseInt(lastCode.substring(2))\n          if (!isNaN(number)) {\n            nextCode = `US${(number + 1).toString().padStart(3, '0')}`\n          }\n        }\n      }\n      setFormData(prev => ({ ...prev, client_code: nextCode }))\n    } catch (error) {\n      console.error('Error al generar código de cliente:', error)\n    }\n  }\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setLoading(true)\n\n    // Validar usuario antes de enviar\n    const userValidation = validateWorker({\n      dni: formData.dni,\n      street_address: formData.address,\n      postal_code: formData.postal_code,\n      city: formData.city,\n      province: formData.province\n    })\n\n    if (!userValidation.isValid) {\n      setValidationErrors(userValidation.errors)\n      showToast('Por favor, corrige los errores en el formulario', 'error')\n      setLoading(false)\n      return\n    }\n\n    if (!supabase) {\n      showToast('Error: Cliente de base de datos no disponible', 'error')\n      setLoading(false)\n      return\n    }\n\n    try {\n      // Preparar datos para guardar (añadir +34 al teléfono)\n      const dataToSave: any = {\n        ...formData,\n        phone: formData.phone ? `+34${formData.phone}` : '',\n        is_active: formData.status === 'active'\n      }\n      // Eliminar campos que no existen en la tabla o arrays vacíos\n      delete dataToSave.emergency_contacts\n      if (Array.isArray(dataToSave.special_requirements) && dataToSave.special_requirements.length === 0) delete dataToSave.special_requirements\n      if (Array.isArray(dataToSave.medical_conditions) && dataToSave.medical_conditions.length === 0) delete dataToSave.medical_conditions\n      if (Array.isArray(dataToSave.allergies) && dataToSave.allergies.length === 0) delete dataToSave.allergies\n      if (Array.isArray(dataToSave.medications) && dataToSave.medications.length === 0) delete dataToSave.medications\n      // monthly_hours nunca debe ser NaN ni null\n      if (!dataToSave.monthly_hours || isNaN(dataToSave.monthly_hours)) dataToSave.monthly_hours = 0\n      // Log para depuración\n      // const { data, error } = await supabase\n        .from('users')\n        .insert([dataToSave])\n        .select()\n        .single()\n\n      if (error) {\n        console.error('Error al crear usuario:', error)\n        showToast(`Error al crear usuario: ${JSON.stringify(error)}`, 'error')\n        return\n      }\n\n      showToast('Usuario creado correctamente', 'success')\n      router.push('/admin/users')\n    } catch (error) {\n      console.error('Error inesperado:', error)\n      showToast('Error inesperado al crear usuario: ' + JSON.stringify(error), 'error')\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const handleInputChange = (field: keyof UserFormData, value: any) => {\n    setFormData(prev => ({ ...prev, [field]: value }))\n\n    // Validar en tiempo real para campos con validación\n    if (['dni', 'address', 'postal_code', 'city', 'province'].includes(field)) {\n      const newFormData = { ...formData, [field]: value }\n      const validation = validateWorker({\n        dni: newFormData.dni,\n        street_address: newFormData.address,\n        postal_code: newFormData.postal_code,\n        city: newFormData.city,\n        province: newFormData.province\n      })\n      setValidationErrors(validation.errors)\n    }\n  }\n\n  // Auto-detectar provincia por código postal\n  const handlePostalCodeChange = (postalCode: string) => {\n    handleInputChange('postal_code', postalCode)\n\n    if (postalCode && isValidPostalCodeFormat(postalCode)) {\n      const detectedProvince = getProvinceByPostalCode(postalCode)\n      if (detectedProvince && detectedProvince !== formData.province) {\n        handleInputChange('province', detectedProvince)\n      }\n    }\n  }\n\n  // Helper para mostrar el nombre del día\n  const getDayName = (day: string) => {\n    const dayNames: { [key: string]: string } = {\n      monday: 'Lunes',\n      tuesday: 'Martes',\n      wednesday: 'Miércoles',\n      thursday: 'Jueves',\n      friday: 'Viernes',\n      saturday: 'Sábado',\n      sunday: 'Domingo',\n    }\n    return dayNames[day] || day\n  }\n\n  return (\n    <div className=\"min-h-screen bg-slate-50\">\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Header */}\n        <div className=\"mb-6\">\n          <div className=\"flex items-center space-x-4 mb-4\">\n            <Link href=\"/admin/users\">\n              <Button variant=\"secondary\" size=\"sm\">\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                Volver\n              </Button>\n            </Link>\n            <div>\n              <h1 className=\"text-xl sm:text-2xl font-bold text-slate-900\">\n                Nuevo Usuario\n              </h1>\n              <p className=\"text-sm sm:text-base text-slate-600\">\n                Creando nuevo perfil de usuario/cliente\n              </p>\n            </div>\n          </div>\n        </div>\n\n        {/* Form */}\n        <form onSubmit={handleSubmit}>\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* Información Personal */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <User className=\"w-5 h-5 text-blue-600\" />\n                  <span>Información Personal</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-slate-700 mb-1\">\n                      Código de Cliente *\n                    </label>\n                    <input\n                      type=\"text\"\n                      required\n                      value={formData.client_code}\n                      readOnly\n                      className=\"w-full px-3 py-2 border border-slate-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500 bg-slate-50\"\n                      placeholder=\"US001\"\n                    />\n                    <p className=\"text-xs text-slate-500 mt-1\">Generado automáticamente</p>\n                  </div>\n                  <div>\n                    <label className=\"block text-sm font-medium text-slate-700 mb-1\">\n                      DNI\n                    </label>\n                    <input\n                      type=\"text\"\n                      value={formData.dni}\n                      onChange={(e) => handleInputChange('dni', e.target.value.toUpperCase())}\n                      className={`w-full px-3 py-2 border rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\n                        validationErrors.dni\n                          ? 'border-red-300 bg-red-50'\n                          : 'border-slate-300'\n                      }`}\n                      placeholder=\"12345678A\"\n                      maxLength={9}\n                    />\n                    {validationErrors.dni && (\n                      <p className=\"text-sm text-red-600 mt-1\">{validationErrors.dni}</p>\n                    )}\n                    {formData.dni && !validationErrors.dni && (\n                      <p className=\"text-sm text-green-600 mt-1\">\n                        ✅ DNI válido\n                      </p>\n                    )}\n                  </div>\n                </div>\n                <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-slate-700 mb-1\">\n                      Nombre *\n                    </label>\n                    <input\n                      type=\"text\"\n                      required\n                      value={formData.name}\n                      onChange={(e) => handleInputChange('name', e.target.value)}\n                      className=\"w-full px-3 py-2 border border-slate-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                      placeholder=\"José\"\n                    />\n                  </div>\n                  <div>\n                    <label className=\"block text-sm font-medium text-slate-700 mb-1\">\n                      Apellidos *\n                    </label>\n                    <input\n                      type=\"text\"\n                      required\n                      value={formData.surname}\n                      onChange={(e) => handleInputChange('surname', e.target.value)}\n                      className=\"w-full px-3 py-2 border border-slate-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                      placeholder=\"Pérez García\"\n                    />\n                  </div>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-slate-700 mb-1\">\n                    Email *\n                  </label>\n                  <input\n                    type=\"email\"\n                    required\n                    value={formData.email}\n                    onChange={(e) => handleInputChange('email', e.target.value)}\n                    className=\"w-full px-3 py-2 border border-slate-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                    placeholder=\"jose.perez@email.com\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-slate-700 mb-1\">\n                    Teléfono *\n                  </label>\n                  <input\n                    type=\"tel\"\n                    required\n                    value={formData.phone}\n                    onChange={(e) => handleInputChange('phone', e.target.value)}\n                    className=\"w-full px-3 py-2 border border-slate-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                    placeholder=\"600 123 456\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-slate-700 mb-1\">\n                    Calle y Número *\n                  </label>\n                  <input\n                    type=\"text\"\n                    required\n                    value={formData.address}\n                    onChange={(e) => handleInputChange('address', e.target.value)}\n                    className={`w-full px-3 py-2 border rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\n                      validationErrors.address\n                        ? 'border-red-300 bg-red-50'\n                        : 'border-slate-300'\n                    }`}\n                    placeholder=\"Calle Mayor 123\"\n                  />\n                  {validationErrors.address && (\n                    <p className=\"text-sm text-red-600 mt-1\">{validationErrors.address}</p>\n                  )}\n                </div>\n\n                <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-slate-700 mb-1\">\n                      Código Postal\n                    </label>\n                    <input\n                      type=\"text\"\n                      value={formData.postal_code}\n                      onChange={(e) => handlePostalCodeChange(e.target.value)}\n                      className={`w-full px-3 py-2 border rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\n                        validationErrors.postal_code\n                          ? 'border-red-300 bg-red-50'\n                          : 'border-slate-300'\n                      }`}\n                      placeholder=\"08301\"\n                      pattern=\"[0-9]{5}\"\n                      title=\"Código postal de 5 dígitos\"\n                      maxLength={5}\n                    />\n                    {validationErrors.postal_code && (\n                      <p className=\"text-sm text-red-600 mt-1\">{validationErrors.postal_code}</p>\n                    )}\n                    {formData.postal_code && !validationErrors.postal_code && (\n                      <p className=\"text-sm text-green-600 mt-1\">\n                        ✅ Código postal válido para {getProvinceByPostalCode(formData.postal_code) || 'España'}\n                      </p>\n                    )}\n                  </div>\n                  <div>\n                    <label className=\"block text-sm font-medium text-slate-700 mb-1\">\n                      Ciudad *\n                    </label>\n                    <input\n                      type=\"text\"\n                      required\n                      value={formData.city}\n                      onChange={(e) => handleInputChange('city', e.target.value)}\n                      className={`w-full px-3 py-2 border rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\n                        validationErrors.city\n                          ? 'border-red-300 bg-red-50'\n                          : 'border-slate-300'\n                      }`}\n                      placeholder=\"Mataró\"\n                    />\n                    {validationErrors.city && (\n                      <p className=\"text-sm text-red-600 mt-1\">{validationErrors.city}</p>\n                    )}\n                  </div>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-slate-700 mb-1\">\n                    Provincia\n                  </label>\n                  <select\n                    value={formData.province}\n                    onChange={(e) => handleInputChange('province', e.target.value)}\n                    className={`w-full px-3 py-2 border rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\n                      validationErrors.province\n                        ? 'border-red-300 bg-red-50'\n                        : 'border-slate-300'\n                    }`}\n                  >\n                    {Object.keys(POSTAL_CODE_RANGES).map(province => (\n                      <option key={province} value={province}>\n                        {province}\n                      </option>\n                    ))}\n                  </select>\n                  {validationErrors.province && (\n                    <p className=\"text-sm text-red-600 mt-1\">{validationErrors.province}</p>\n                  )}\n                  {formData.province && !validationErrors.province && formData.postal_code && (\n                    <p className=\"text-sm text-blue-600 mt-1\">\n                      💡 Sugerencias: {getPostalCodeSuggestions(formData.province).join(', ')}\n                    </p>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Información del Servicio */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Heart className=\"w-5 h-5 text-green-600\" />\n                  <span>Información del Servicio</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex flex-col items-center justify-center mb-4\">\n                  <label className=\"block text-base font-medium text-slate-700 mb-2 text-center\">\n                    Horas asignadas totales\n                  </label>\n                  <input\n                    type=\"number\"\n                    step=\"0.25\"\n                    value={formData.monthly_hours}\n                    onChange={(e) => handleInputChange('monthly_hours', parseFloat(e.target.value))}\n                    className=\"text-7xl font-extrabold text-blue-700 text-center bg-transparent border-0 focus:ring-0 focus:border-0 outline-none w-full max-w-xs py-4\"\n                    style={{ fontVariantNumeric: 'tabular-nums', letterSpacing: '0.05em' }}\n                    placeholder=\"0\"\n                    min={0}\n                  />\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-slate-700 mb-1\">\n                    Días de Servicio\n                  </label>\n                  <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-3\">\n                    {[\n                      { key: 'monday', label: 'Lunes' },\n                      { key: 'tuesday', label: 'Martes' },\n                      { key: 'wednesday', label: 'Miércoles' },\n                      { key: 'thursday', label: 'Jueves' },\n                      { key: 'friday', label: 'Viernes' },\n                      { key: 'saturday', label: 'Sábado' },\n                      { key: 'sunday', label: 'Domingo' }\n                    ].map((day) => (\n                      <label key={day.key} className={`relative flex items-center p-3 rounded-lg border-2 cursor-pointer transition-all duration-200 ${formData.special_requirements.includes(day.key) ? 'bg-gradient-to-r from-blue-50 to-blue-100 border-slate-300 shadow-md' : 'bg-white border-slate-200 hover:border-slate-300'}`}>\n                        <input\n                          type=\"checkbox\"\n                          checked={formData.special_requirements.includes(day.key)}\n                          onChange={(e) => {\n                            if (e.target.checked) {\n                              handleInputChange('special_requirements', [...formData.special_requirements, day.key])\n                            } else {\n                              handleInputChange('special_requirements', formData.special_requirements.filter(d => d !== day.key))\n                            }\n                          }}\n                          className=\"sr-only\"\n                        />\n                        <div className={`w-5 h-5 rounded border-2 mr-3 flex items-center justify-center ${formData.special_requirements.includes(day.key) ? 'bg-blue-600 border-blue-600' : 'border-slate-300'}`}>\n                          {formData.special_requirements.includes(day.key) && (\n                            <svg className=\"w-3 h-3 text-white\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                              <path fillRule=\"evenodd\" d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\" clipRule=\"evenodd\" />\n                            </svg>\n                          )}\n                        </div>\n                        <span className={`font-medium ${formData.special_requirements.includes(day.key) ? 'text-slate-900' : 'text-slate-700'}`}>{day.label}</span>\n                      </label>\n                    ))}\n                  </div>\n                  <div className=\"mt-2 p-2 bg-slate-50 rounded-lg\">\n                    <span className=\"text-sm text-slate-600\">\n                      <strong>Días seleccionados:</strong> {formData.special_requirements.length > 0 ? formData.special_requirements.map(getDayName).join(', ') : 'Ningún día seleccionado'}\n                    </span>\n                  </div>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-slate-700 mb-1\">\n                    Tipo de Servicio\n                  </label>\n                  <select\n                    value={formData.service_type}\n                    onChange={(e) => handleInputChange('service_type', e.target.value)}\n                    className=\"w-full px-3 py-2 border border-slate-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                  >\n                    <option value=\"\">Seleccionar tipo</option>\n                    <option value=\"elderly_care\">Cuidado de Ancianos</option>\n                    <option value=\"disability_care\">Cuidado de Discapacitados</option>\n                    <option value=\"medical_assistance\">Asistencia Médica</option>\n                    <option value=\"domestic_help\">Ayuda Doméstica</option>\n                  </select>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-slate-700 mb-1\">\n                    Estado\n                  </label>\n                  <select\n                    value={formData.status}\n                    onChange={(e) => handleInputChange('status', e.target.value)}\n                    className=\"w-full px-3 py-2 border border-slate-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                  >\n                    <option value=\"active\">Activo</option>\n                    <option value=\"paused\">Pausado</option>\n                    <option value=\"completed\">Completado</option>\n                    <option value=\"cancelled\">Cancelado</option>\n                  </select>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Información Médica */}\n          <Card className=\"mt-6\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Heart className=\"w-5 h-5 text-red-600\" />\n                <span>Información Médica</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <label className=\"block text-sm font-medium text-slate-700 mb-1\">\n                  Condiciones Médicas\n                </label>\n                <textarea\n                  value={formData.medical_conditions.join(', ')}\n                  onChange={(e) => handleInputChange('medical_conditions', e.target.value.split(',').map(s => s.trim()))}\n                  rows={2}\n                  className=\"w-full px-3 py-2 border border-slate-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                  placeholder=\"Diabetes, Hipertensión (separar con comas)\"\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-slate-700 mb-1\">\n                  Alergias\n                </label>\n                <textarea\n                  value={formData.allergies.join(', ')}\n                  onChange={(e) => handleInputChange('allergies', e.target.value.split(',').map(s => s.trim()))}\n                  rows={2}\n                  className=\"w-full px-3 py-2 border border-slate-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                  placeholder=\"Penicilina, Frutos secos (separar con comas)\"\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-slate-700 mb-1\">\n                  Medicamentos\n                </label>\n                <textarea\n                  value={formData.medications.join(', ')}\n                  onChange={(e) => handleInputChange('medications', e.target.value.split(',').map(s => s.trim()))}\n                  rows={2}\n                  className=\"w-full px-3 py-2 border border-slate-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                  placeholder=\"Insulina, Metformina (separar con comas)\"\n                />\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Notas */}\n          <Card className=\"mt-6\">\n            <CardHeader>\n              <CardTitle>Notas Adicionales</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <textarea\n                value={formData.notes}\n                onChange={(e) => handleInputChange('notes', e.target.value)}\n                rows={3}\n                className=\"w-full px-3 py-2 border border-slate-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                placeholder=\"Información adicional sobre el usuario...\"\n              />\n            </CardContent>\n          </Card>\n\n          {/* Actions */}\n          <div className=\"mt-6 flex justify-end space-x-4\">\n            <Link href=\"/admin/users\">\n              <Button variant=\"secondary\" type=\"button\">\n                Cancelar\n              </Button>\n            </Link>\n            <Button type=\"submit\" disabled={loading}>\n              <Save className=\"w-4 h-4 mr-2\" />\n              {loading ? 'Creando...' : 'Crear Usuario'}\n            </Button>\n          </div>\n        </form>\n\n        {ToastComponent}\n      </div>\n    </div>\n  )\n}","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"/Users/alamia.es/Public/SAD/src/app/admin/users/page.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'filterUsers'. Either include it or remove the dependency array.","line":46,"column":6,"nodeType":"ArrayExpression","endLine":46,"endColumn":39,"suggestions":[{"desc":"Update the dependencies array to be: [users, searchTerm, statusFilter, filterUsers]","fix":{"range":[1225,1258],"text":"[users, searchTerm, statusFilter, filterUsers]"}}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":50,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":50,"endColumn":20,"suggestions":[{"fix":{"range":[1323,1369],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":62,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":62,"endColumn":22,"suggestions":[{"fix":{"range":[1694,1743],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":69,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":69,"endColumn":20,"suggestions":[{"fix":{"range":[1929,1970],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport { useState, useEffect } from 'react'\nimport Link from 'next/link'\nimport { supabase } from '@/lib/supabase'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Search, Users, Plus, User, UserCheck, UserX, Filter, ChevronDown } from 'lucide-react'\n\ninterface EmergencyContact {\n  name: string\n  phone: string\n  relationship: string\n}\n\ninterface User {\n  id: string\n  name: string\n  surname: string\n  email: string\n  is_active: boolean\n  client_code: string\n  phone: string\n  address: string\n  city: string\n  postal_code: string\n  emergency_contacts?: EmergencyContact[]\n}\n\nexport default function UsersPage() {\n  const [users, setUsers] = useState<User[]>([])\n  const [filteredUsers, setFilteredUsers] = useState<User[]>([])\n  const [loading, setLoading] = useState(true)\n  const [searchTerm, setSearchTerm] = useState('')\n  const [statusFilter, setStatusFilter] = useState<'all' | 'active' | 'inactive'>('all')\n  const [showStatusDropdown, setShowStatusDropdown] = useState(false)\n\n\n  useEffect(() => {\n    fetchUsers()\n  }, [])\n\n  useEffect(() => {\n    filterUsers()\n  }, [users, searchTerm, statusFilter])\n\n  const fetchUsers = async () => {\n    if (!supabase) {\n      console.error('Supabase client no disponible')\n      setLoading(false)\n      return\n    }\n\n    try {\n      const { data, error } = await supabase\n        .from('users')\n        .select('id, name, surname, email, is_active, client_code, phone, address, city, postal_code, emergency_contacts')\n        .order('created_at', { ascending: false })\n\n      if (error) {\n        console.error('Error al cargar usuarios:', error)\n        alert('Error al cargar usuarios: ' + JSON.stringify(error))\n      } else {\n        setUsers(data || [])\n        setFilteredUsers(data || [])\n      }\n    } catch (error) {\n      console.error('Error inesperado:', error)\n      alert('Error inesperado: ' + JSON.stringify(error))\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const filterUsers = () => {\n    let filtered = users\n\n    // Filtrar por búsqueda\n    if (searchTerm) {\n      filtered = filtered.filter(user =>\n        user.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        user.surname.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        user.email?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        user.client_code.toLowerCase().includes(searchTerm.toLowerCase())\n      )\n    }\n\n    // Filtrar por estado\n    if (statusFilter !== 'all') {\n      filtered = filtered.filter(user =>\n        statusFilter === 'active' ? user.is_active : !user.is_active\n      )\n    }\n\n    setFilteredUsers(filtered)\n  }\n\n  const handleDeleteUser = async (userId: string) => {\n    if (!supabase) return\n    if (!confirm('¿Seguro que quieres eliminar este usuario?')) return\n    try {\n      const { error } = await supabase.from('users').delete().eq('id', userId)\n      if (error) throw error\n      setUsers(users.filter(u => u.id !== userId))\n      setFilteredUsers(filteredUsers.filter(u => u.id !== userId))\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Error desconocido'\n      alert('Error al eliminar usuario: ' + errorMessage)\n    }\n  }\n\n  const handleToggleActive = async (userId: string, isActive: boolean) => {\n    if (!supabase) return\n    try {\n      const { error } = await supabase.from('users').update({ is_active: !isActive }).eq('id', userId)\n      if (error) throw error\n      setUsers(users.map(u => u.id === userId ? { ...u, is_active: !isActive } : u))\n      setFilteredUsers(filteredUsers.map(u => u.id === userId ? { ...u, is_active: !isActive } : u))\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Error desconocido'\n      alert('Error al actualizar estado: ' + errorMessage)\n    }\n  }\n\n\n\n  // Stats calculations\n  const totalUsers = users.length\n  const activeUsers = users.filter(u => u.is_active).length\n  const inactiveUsers = users.filter(u => !u.is_active).length\n\n  const getStatusLabel = (status: string) => {\n    switch (status) {\n      case 'active': return 'Activos'\n      case 'inactive': return 'Inactivos'\n      default: return 'Todos los estados'\n    }\n  }\n\n  const getInitials = (name: string, surname: string) => {\n    const nameInitial = name?.trim()?.charAt(0)?.toUpperCase() || 'U'\n    const surnameInitial = surname?.trim()?.charAt(0)?.toUpperCase() || ''\n    return nameInitial + surnameInitial\n  }\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto\"></div>\n          <p className=\"mt-4 text-slate-600\">Cargando usuarios...</p>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\n        <div>\n          <h1 className=\"text-2xl sm:text-3xl font-bold text-slate-900 mb-2\">\n            Gestión de Usuarios\n          </h1>\n          <p className=\"text-slate-600\">\n            Administra clientes y sus servicios\n          </p>\n        </div>\n        <Link href=\"/admin/users/new\">\n          <Button className=\"bg-gradient-to-r from-green-600 to-green-700 hover:from-green-700 hover:to-green-800 shadow-lg w-full sm:w-auto\">\n            <Plus className=\"w-4 h-4 mr-2\" />\n            Nuevo Usuario\n          </Button>\n        </Link>\n      </div>\n\n      {/* Filters */}\n      <Card className=\"border-0 shadow-lg\">\n        <CardContent className=\"p-6\">\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4\">\n            {/* Search */}\n            <div className=\"relative sm:col-span-2 lg:col-span-1\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-slate-400 w-4 h-4\" />\n              <Input\n                placeholder=\"Buscar usuario...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10 border-slate-300 focus:border-blue-500 focus:ring-blue-500\"\n              />\n            </div>\n\n            {/* Status Filter */}\n            <div className=\"relative filter-dropdown\">\n              <Button\n                onClick={() => setShowStatusDropdown(!showStatusDropdown)}\n                className=\"w-full justify-between bg-white border border-slate-300 text-slate-700 hover:bg-slate-50\"\n              >\n                <span className=\"flex items-center\">\n                  <Filter className=\"w-4 h-4 mr-2\" />\n                  {getStatusLabel(statusFilter)}\n                </span>\n                <ChevronDown className=\"w-4 h-4\" />\n              </Button>\n              {showStatusDropdown && (\n                <div className=\"absolute z-10 w-full mt-1 bg-white border border-slate-300 rounded-md shadow-lg\">\n                  <div className=\"py-1\">\n                    <button\n                      onClick={() => {\n                        setStatusFilter('all')\n                        setShowStatusDropdown(false)\n                      }}\n                      className=\"block w-full text-left px-4 py-2 text-sm text-slate-700 hover:bg-slate-100\"\n                    >\n                      Todos los estados\n                    </button>\n                    <button\n                      onClick={() => {\n                        setStatusFilter('active')\n                        setShowStatusDropdown(false)\n                      }}\n                      className=\"block w-full text-left px-4 py-2 text-sm text-slate-700 hover:bg-slate-100\"\n                    >\n                      Activos\n                    </button>\n                    <button\n                      onClick={() => {\n                        setStatusFilter('inactive')\n                        setShowStatusDropdown(false)\n                      }}\n                      className=\"block w-full text-left px-4 py-2 text-sm text-slate-700 hover:bg-slate-100\"\n                    >\n                      Inactivos\n                    </button>\n                  </div>\n                </div>\n              )}\n            </div>\n\n            {/* Clear Filters */}\n            <Button\n              variant=\"default\"\n              onClick={() => {\n                setSearchTerm('')\n                setStatusFilter('all')\n              }}\n              className=\"bg-slate-100 hover:bg-slate-200 text-slate-700\"\n            >\n              Limpiar Filtros\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Users List */}\n      <Card className=\"border-0 shadow-lg\">\n        <CardHeader className=\"bg-gradient-to-r from-blue-50 to-blue-100 border-b border-blue-200\">\n          <CardTitle className=\"text-blue-900\">Lista de Usuarios</CardTitle>\n        </CardHeader>\n        <CardContent className=\"p-0\">\n          {filteredUsers.length === 0 ? (\n            <div className=\"text-center py-12\">\n              <Users className=\"w-16 h-16 text-slate-300 mx-auto mb-4\" />\n              <p className=\"text-slate-500 text-lg\">No se encontraron usuarios</p>\n              <p className=\"text-slate-400 text-sm mt-2\">Intenta ajustar los filtros de búsqueda</p>\n            </div>\n          ) : (\n            <>\n              {/* Desktop Table View - Two Rows Layout */}\n              <div className=\"hidden md:block\">\n                <div className=\"space-y-4\">\n                  {filteredUsers.slice(0, 15).map((user, index) => (\n                    <div key={user.id} className={`bg-white border border-slate-200 rounded-xl p-6 shadow-lg hover:shadow-xl transition-all duration-200 transform hover:scale-[1.01] ${index % 2 === 0 ? 'bg-white' : 'bg-slate-50/30'}`}>\n                      {/* First Row - Main Info */}\n                      <div className=\"flex items-center justify-between mb-4\">\n                        <div className=\"flex items-center\">\n                          <div className=\"w-12 h-12 bg-gradient-to-br from-green-500 to-emerald-600 rounded-full flex items-center justify-center text-white font-bold text-lg mr-4 shadow-lg min-w-[3rem] min-h-[3rem]\">\n                            {getInitials(user.name, user.surname)}\n                          </div>\n                          <div>\n                            <h3 className=\"font-bold text-slate-900 text-lg\">\n                              {user.name} {user.surname}\n                            </h3>\n                            <p className=\"text-sm text-slate-500 font-medium\">\n                              {user.client_code}\n                            </p>\n                          </div>\n                        </div>\n                        \n                        <div className=\"flex gap-3\">\n                          <span className={`inline-flex items-center px-3 py-1.5 rounded-full text-xs font-bold shadow-md ${\n                            user.is_active \n                              ? 'bg-gradient-to-r from-green-500 to-green-600 text-white' \n                              : 'bg-gradient-to-r from-red-500 to-red-600 text-white'\n                          }`}>\n                            <div className={`w-2 h-2 rounded-full mr-2 ${user.is_active ? 'bg-green-300' : 'bg-red-300'}`}></div>\n                            {user.is_active ? 'Activo' : 'Inactivo'}\n                          </span>\n                        </div>\n                      </div>\n                      \n                      {/* Second Row - Contact Info */}\n                      <div className=\"space-y-3 mb-4\">\n                        {/* Contact Info - Email and Phone */}\n                        <div className=\"flex items-center space-x-6\">\n                          {user.email && user.email.trim() !== '' && (\n                            <div className=\"flex items-center\">\n                              <svg className=\"w-4 h-4 text-slate-400 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z\" />\n                              </svg>\n                              <span className=\"text-slate-700 font-medium\">{user.email}</span>\n                            </div>\n                          )}\n                          <div className=\"flex items-center\">\n                            <svg className=\"w-4 h-4 text-slate-400 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z\" />\n                            </svg>\n                            <span className=\"text-slate-700 font-medium\">{user.phone?.replace('+34', '') || 'Sin teléfono'}</span>\n                          </div>\n                        </div>\n                        \n                        {/* Location Info - City and Address */}\n                        <div className=\"flex items-center space-x-6\">\n                          <div className=\"flex items-center\">\n                            <svg className=\"w-4 h-4 text-slate-400 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z\" />\n                              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 11a3 3 0 11-6 0 3 3 0 016 0z\" />\n                            </svg>\n                            <span className=\"text-slate-700 font-medium\">{user.city || 'Sin ciudad'}</span>\n                          </div>\n                          <div className=\"flex items-center\">\n                            <svg className=\"w-4 h-4 text-slate-400 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2H5a2 2 0 00-2-2z\" />\n                              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M8 5a2 2 0 012-2h4a2 2 0 012 2v2H8V5z\" />\n                            </svg>\n                            <span className=\"text-slate-700 font-medium max-w-xs truncate\" title={user.address}>\n                              {user.address || 'Sin dirección'}\n                            </span>\n                          </div>\n                        </div>\n                      </div>\n                      \n                      {/* Third Row - Actions */}\n                      <div className=\"flex justify-end gap-2\">\n                        <Link href={`/admin/users/${user.id}`}\n                          className=\"inline-flex items-center px-3 py-2 rounded-lg text-sm font-semibold bg-gradient-to-r from-blue-500 to-blue-600 text-white hover:from-blue-600 hover:to-blue-700 transition-all duration-200 shadow-md hover:shadow-lg transform hover:scale-105\">\n                          <svg className=\"w-4 h-4 mr-1\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\" />\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z\" />\n                          </svg>\n                          Ver\n                        </Link>\n                        <Link href={`/admin/users/${user.id}/edit`}\n                          className=\"inline-flex items-center px-3 py-2 rounded-lg text-sm font-semibold bg-gradient-to-r from-yellow-500 to-orange-500 text-white hover:from-yellow-600 hover:to-orange-600 transition-all duration-200 shadow-md hover:shadow-lg transform hover:scale-105\">\n                          <svg className=\"w-4 h-4 mr-1\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z\" />\n                          </svg>\n                          Editar\n                        </Link>\n                        <button\n                          onClick={() => handleToggleActive(user.id, user.is_active)}\n                          className={`inline-flex items-center px-3 py-2 rounded-lg text-sm font-semibold transition-all duration-200 shadow-md hover:shadow-lg transform hover:scale-105 ${\n                            user.is_active\n                              ? 'bg-gradient-to-r from-orange-500 to-red-500 text-white hover:from-orange-600 hover:to-red-600'\n                              : 'bg-gradient-to-r from-green-500 to-emerald-500 text-white hover:from-green-600 hover:to-emerald-600'\n                          }`}>\n                          <svg className=\"w-4 h-4 mr-1\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d={user.is_active ? \"M18.364 18.364A9 9 0 005.636 5.636m12.728 12.728L5.636 5.636m12.728 12.728L18.364 5.636M5.636 18.364l12.728-12.728\" : \"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"} />\n                          </svg>\n                          {user.is_active ? 'Desactivar' : 'Activar'}\n                        </button>\n                        <button\n                          onClick={() => handleDeleteUser(user.id)}\n                          className=\"inline-flex items-center px-3 py-2 rounded-lg text-sm font-semibold bg-gradient-to-r from-red-500 to-pink-500 text-white hover:from-red-600 hover:to-pink-600 transition-all duration-200 shadow-md hover:shadow-lg transform hover:scale-105\">\n                          <svg className=\"w-4 h-4 mr-1\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16\" />\n                          </svg>\n                          Eliminar\n                        </button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n\n              {/* Mobile Cards View */}\n              <div className=\"md:hidden\">\n                <div className=\"space-y-4 p-4\">\n                  {filteredUsers.slice(0, 15).map((user) => (\n                    <div key={user.id} className=\"bg-white border-0 rounded-xl p-6 shadow-lg hover:shadow-xl transition-all duration-200 transform hover:scale-[1.02]\">\n                      {/* Header con avatar y nombre */}\n                      <div className=\"flex items-center mb-4\">\n                        <div className=\"w-12 h-12 bg-gradient-to-br from-green-500 to-emerald-600 rounded-full flex items-center justify-center text-white font-bold text-lg mr-4 shadow-lg min-w-[3rem] min-h-[3rem]\">\n                          {getInitials(user.name, user.surname)}\n                        </div>\n                        <div>\n                          <h3 className=\"font-bold text-slate-900 text-lg\">\n                            {user.name} {user.surname}\n                          </h3>\n                          <p className=\"text-xs text-slate-500 font-medium\">\n                            {user.client_code}\n                          </p>\n                        </div>\n                      </div>\n                      \n                      {/* Badge de estado debajo del nombre */}\n                      <div className=\"flex gap-2 mb-4\">\n                        <span className={`inline-flex items-center px-3 py-1.5 rounded-full text-xs font-bold shadow-md ${\n                          user.is_active \n                            ? 'bg-gradient-to-r from-green-500 to-green-600 text-white' \n                            : 'bg-gradient-to-r from-red-500 to-red-600 text-white'\n                        }`}>\n                          <div className={`w-2 h-2 rounded-full mr-2 ${user.is_active ? 'bg-green-300' : 'bg-red-300'}`}></div>\n                          {user.is_active ? 'Activo' : 'Inactivo'}\n                        </span>\n                      </div>\n                      \n                      {/* Información de contacto */}\n                      <div className=\"space-y-3 mb-6\">\n                        {user.email && user.email.trim() !== '' && (\n                          <div className=\"flex items-center\">\n                            <svg className=\"w-4 h-4 text-slate-400 mr-3\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z\" />\n                            </svg>\n                            <p className=\"text-slate-700 font-medium\">{user.email}</p>\n                          </div>\n                        )}\n                        <div className=\"flex items-center\">\n                          <svg className=\"w-4 h-4 text-slate-400 mr-3\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z\" />\n                          </svg>\n                          <p className=\"text-slate-700 font-medium\">{user.phone?.replace('+34', '') || 'Sin teléfono'}</p>\n                        </div>\n                        <div className=\"flex items-center\">\n                          <svg className=\"w-4 h-4 text-slate-400 mr-3\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z\" />\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 11a3 3 0 11-6 0 3 3 0 016 0z\" />\n                          </svg>\n                          <p className=\"text-slate-700 font-medium\">{user.city || 'Sin ciudad'}</p>\n                        </div>\n                        <div className=\"flex items-start\">\n                          <svg className=\"w-4 h-4 text-slate-400 mr-3 mt-0.5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2H5a2 2 0 00-2-2z\" />\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M8 5a2 2 0 012-2h4a2 2 0 012 2v2H8V5z\" />\n                          </svg>\n                          <p className=\"text-slate-700 font-medium text-sm leading-relaxed\">{user.address || 'Sin dirección'}</p>\n                        </div>\n                      </div>\n                      \n                      {/* Botones de acción */}\n                      <div className=\"grid grid-cols-2 gap-3\">\n                        <Link href={`/admin/users/${user.id}`}\n                          className=\"inline-flex items-center justify-center px-4 py-3 rounded-lg text-sm font-semibold bg-gradient-to-r from-blue-500 to-blue-600 text-white hover:from-blue-600 hover:to-blue-700 transition-all duration-200 shadow-md hover:shadow-lg transform hover:scale-105\">\n                          <svg className=\"w-4 h-4 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\" />\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z\" />\n                          </svg>\n                          Ver\n                        </Link>\n                        <Link href={`/admin/users/${user.id}/edit`}\n                          className=\"inline-flex items-center justify-center px-4 py-3 rounded-lg text-sm font-semibold bg-gradient-to-r from-yellow-500 to-orange-500 text-white hover:from-yellow-600 hover:to-orange-600 transition-all duration-200 shadow-md hover:shadow-lg transform hover:scale-105\">\n                          <svg className=\"w-4 h-4 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z\" />\n                          </svg>\n                          Editar\n                        </Link>\n                        <button\n                          onClick={() => handleToggleActive(user.id, user.is_active)}\n                          className={`inline-flex items-center justify-center px-4 py-3 rounded-lg text-sm font-semibold transition-all duration-200 shadow-md hover:shadow-lg transform hover:scale-105 ${\n                            user.is_active\n                              ? 'bg-gradient-to-r from-orange-500 to-red-500 text-white hover:from-orange-600 hover:to-red-600'\n                              : 'bg-gradient-to-r from-green-500 to-emerald-500 text-white hover:from-green-600 hover:to-emerald-600'\n                          }`}>\n                          <svg className=\"w-4 h-4 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d={user.is_active ? \"M18.364 18.364A9 9 0 005.636 5.636m12.728 12.728L5.636 5.636m12.728 12.728L18.364 5.636M5.636 18.364l12.728-12.728\" : \"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"} />\n                          </svg>\n                          {user.is_active ? 'Desactivar' : 'Activar'}\n                        </button>\n                        <button\n                          onClick={() => handleDeleteUser(user.id)}\n                          className=\"inline-flex items-center justify-center px-4 py-3 rounded-lg text-sm font-semibold bg-gradient-to-r from-red-500 to-pink-500 text-white hover:from-red-600 hover:to-pink-600 transition-all duration-200 shadow-md hover:shadow-lg transform hover:scale-105\">\n                          <svg className=\"w-4 h-4 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16\" />\n                          </svg>\n                          Eliminar\n                        </button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Stats Cards - Modern Design */}\n      <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-5 gap-6 mt-12\">\n        <Card \n          className=\"border-0 shadow-xl bg-gradient-to-br from-blue-500 to-blue-600 hover:shadow-2xl transition-all duration-300 transform hover:scale-105 cursor-pointer\"\n          onClick={() => {\n            setSearchTerm('')\n            setStatusFilter('all')\n            setShowStatusDropdown(false)\n          }}\n        >\n          <CardContent className=\"p-5\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-xs font-semibold text-blue-100 uppercase tracking-wide\">Total</p>\n                <p className=\"text-2xl font-bold text-white mt-1\">{totalUsers}</p>\n                <p className=\"text-blue-200 text-xs mt-1\">Usuarios</p>\n              </div>\n              <div className=\"h-10 w-10 bg-white/20 rounded-full flex items-center justify-center backdrop-blur-sm\">\n                <Users className=\"h-5 w-5 text-white\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card \n          className=\"border-0 shadow-xl bg-gradient-to-br from-emerald-500 to-green-600 hover:shadow-2xl transition-all duration-300 transform hover:scale-105 cursor-pointer\"\n          onClick={() => {\n            setSearchTerm('')\n            setStatusFilter('active')\n            setShowStatusDropdown(false)\n          }}\n        >\n          <CardContent className=\"p-5\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-xs font-semibold text-green-100 uppercase tracking-wide\">Activos</p>\n                <p className=\"text-2xl font-bold text-white mt-1\">{activeUsers}</p>\n                <p className=\"text-green-200 text-xs mt-1\">Con servicio</p>\n              </div>\n              <div className=\"h-10 w-10 bg-white/20 rounded-full flex items-center justify-center backdrop-blur-sm\">\n                <UserCheck className=\"h-5 w-5 text-white\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card \n          className=\"border-0 shadow-xl bg-gradient-to-br from-orange-500 to-red-500 hover:shadow-2xl transition-all duration-300 transform hover:scale-105 cursor-pointer\"\n          onClick={() => {\n            setSearchTerm('')\n            setStatusFilter('inactive')\n            setShowStatusDropdown(false)\n          }}\n        >\n          <CardContent className=\"p-5\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-xs font-semibold text-orange-100 uppercase tracking-wide\">Inactivos</p>\n                <p className=\"text-2xl font-bold text-white mt-1\">{inactiveUsers}</p>\n                <p className=\"text-orange-200 text-xs mt-1\">Sin servicio</p>\n              </div>\n              <div className=\"h-10 w-10 bg-white/20 rounded-full flex items-center justify-center backdrop-blur-sm\">\n                <UserX className=\"h-5 w-5 text-white\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card \n          className=\"border-0 shadow-xl bg-gradient-to-br from-purple-500 to-indigo-600 hover:shadow-2xl transition-all duration-300 transform hover:scale-105 cursor-pointer\"\n          onClick={() => {\n            setSearchTerm('')\n            setStatusFilter('all')\n            setShowStatusDropdown(false)\n          }}\n        >\n          <CardContent className=\"p-5\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-xs font-semibold text-purple-100 uppercase tracking-wide\">Con Email</p>\n                <p className=\"text-2xl font-bold text-white mt-1\">\n                  {users.filter(u => u.email && u.email.trim() !== '').length}\n                </p>\n                <p className=\"text-purple-200 text-xs mt-1\">Contacto digital</p>\n              </div>\n              <div className=\"h-10 w-10 bg-white/20 rounded-full flex items-center justify-center backdrop-blur-sm\">\n                <svg className=\"h-5 w-5 text-white\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z\" />\n                </svg>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card \n          className=\"border-0 shadow-xl bg-gradient-to-br from-teal-500 to-cyan-600 hover:shadow-2xl transition-all duration-300 transform hover:scale-105 cursor-pointer\"\n          onClick={() => {\n            setSearchTerm('')\n            setStatusFilter('all')\n            setShowStatusDropdown(false)\n          }}\n        >\n          <CardContent className=\"p-5\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-xs font-semibold text-teal-100 uppercase tracking-wide\">Con Dirección</p>\n                <p className=\"text-2xl font-bold text-white mt-1\">\n                  {users.filter(u => u.address && u.address.trim() !== '').length}\n                </p>\n                <p className=\"text-teal-200 text-xs mt-1\">Datos completos</p>\n              </div>\n              <div className=\"h-10 w-10 bg-white/20 rounded-full flex items-center justify-center backdrop-blur-sm\">\n                <svg className=\"h-5 w-5 text-white\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z\" />\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 11a3 3 0 11-6 0 3 3 0 016 0z\" />\n                </svg>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  )\n}\n\n ","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"/Users/alamia.es/Public/SAD/src/app/admin/workers/[id]/edit/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'validateAddress' is defined but never used.","line":6,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isValidSpanishPostalCode' is defined but never used.","line":8,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isValidPostalCodeForProvince' is defined but never used.","line":9,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isValidDNI' is defined but never used.","line":12,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isValidDNIFormat' is defined but never used.","line":13,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getCorrectDNILetter' is defined but never used.","line":14,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'formatDNI' is defined but never used.","line":15,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Clock' is defined but never used.","line":24,"column":39,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":44},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'warning' is assigned a value but never used.","line":50,"column":38,"nodeType":null,"messageId":"unusedVar","endLine":50,"endColumn":45},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'info' is assigned a value but never used.","line":50,"column":47,"nodeType":null,"messageId":"unusedVar","endLine":50,"endColumn":51},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchWorker'. Either include it or remove the dependency array.","line":84,"column":6,"nodeType":"ArrayExpression","endLine":84,"endColumn":17,"suggestions":[{"desc":"Update the dependencies array to be: [fetchWorker, params.id]","fix":{"range":[2168,2179],"text":"[fetchWorker, params.id]"}}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":88,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":88,"endColumn":20,"suggestions":[{"fix":{"range":[2261,2307],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":101,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":101,"endColumn":22,"suggestions":[{"fix":{"range":[2527,2579],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":149,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":149,"endColumn":20,"suggestions":[{"fix":{"range":[4665,4706],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport { useState, useEffect } from 'react'\nimport { \n  validateWorker,\n  validateAddress, \n  isValidPostalCodeFormat, \n  isValidSpanishPostalCode, \n  isValidPostalCodeForProvince,\n  getProvinceByPostalCode,\n  getPostalCodeSuggestions,\n  isValidDNI,\n  isValidDNIFormat,\n  getCorrectDNILetter,\n  formatDNI,\n  POSTAL_CODE_RANGES \n} from '@/lib/utils'\nimport { useParams, useRouter } from 'next/navigation'\nimport Link from 'next/link'\nimport { supabase } from '@/lib/supabase'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { ArrowLeft, Save, User, Mail, Clock, Calendar } from 'lucide-react'\nimport { useNotificationHelpers } from '@/components/ui/toast-notification'\n\ninterface Worker {\n  id: string\n  name: string\n  surname: string\n  email: string\n  phone: string\n  dni?: string\n  address?: string\n  street_address?: string\n  postal_code?: string\n  city?: string\n  province?: string\n  worker_type: string\n  hourly_rate: number\n  is_active: boolean\n  employee_code: string\n  specializations: string[]\n  availability_days: string[]\n}\n\nexport default function EditWorkerPage() {\n  const params = useParams()\n  const router = useRouter()\n  const { success, error: showError, warning, info } = useNotificationHelpers()\n  \n  const [worker, setWorker] = useState<Worker | null>(null)\n  const [loading, setLoading] = useState(true)\n  const [saving, setSaving] = useState(false)\n  const [validationErrors, setValidationErrors] = useState<{\n    dni?: string\n    street_address?: string\n    postal_code?: string\n    city?: string\n    province?: string\n  }>({})\n  const [formData, setFormData] = useState({\n    name: '',\n    surname: '',\n    email: '',\n    phone: '',\n    dni: '',\n    address: '',\n    street_address: '',\n    postal_code: '',\n    city: 'Mataró',\n    province: 'Barcelona',\n    worker_type: 'regular',\n    hourly_rate: 0,\n    is_active: true,\n    specializations: [] as string[],\n    availability_days: [] as string[]\n  })\n\n  useEffect(() => {\n    if (params.id) {\n      fetchWorker(params.id as string)\n    }\n  }, [params.id])\n\n  const fetchWorker = async (workerId: string) => {\n    if (!supabase) {\n      console.error('Supabase client no disponible')\n      setLoading(false)\n      return\n    }\n\n    try {\n      const { data, error } = await supabase\n        .from('workers')\n        .select('*')\n        .eq('id', workerId)\n        .single()\n\n      if (error) {\n        console.error('Error al cargar trabajadora:', error)\n        showError('Error al cargar trabajadora: ' + error.message)\n      } else {\n        setWorker(data)\n        \n        // Determinar el tipo de disponibilidad basado en los días existentes\n        const existingDays = data.availability_days || []\n        let availabilityDays: string[] = []\n        \n        // Detectar el patrón de días existentes\n        if (existingDays.length === 2 && existingDays.includes('saturday') && existingDays.includes('sunday')) {\n          // Solo fines de semana\n          availabilityDays = ['saturday', 'sunday']\n        } else if (existingDays.length === 7) {\n          // Todos los días\n          availabilityDays = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday']\n        } else if (existingDays.length === 5 && \n                   existingDays.includes('monday') && \n                   existingDays.includes('tuesday') && \n                   existingDays.includes('wednesday') && \n                   existingDays.includes('thursday') && \n                   existingDays.includes('friday')) {\n          // Solo laborables\n          availabilityDays = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday']\n        } else {\n          // Si no coincide con ningún patrón, usar laborables por defecto\n          availabilityDays = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday']\n        }\n        \n        setFormData({\n          name: data.name || '',\n          surname: data.surname || '',\n          email: data.email || '',\n          phone: data.phone || '',\n          dni: data.dni || '',\n          address: data.address || '',\n          street_address: data.street_address || '',\n          postal_code: data.postal_code || '',\n          city: data.city || 'Mataró',\n          province: data.province || 'Barcelona',\n          worker_type: data.worker_type || 'regular',\n          hourly_rate: data.hourly_rate || 0,\n          is_active: data.is_active,\n          specializations: data.specializations || [],\n          availability_days: availabilityDays\n        })\n      }\n    } catch (error) {\n      console.error('Error inesperado:', error)\n      const errorMessage = error instanceof Error ? error.message : 'Error desconocido'\n      showError('Error inesperado: ' + errorMessage)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const handleInputChange = (field: string, value: string | number | boolean | string[]) => {\n    setFormData(prev => ({\n      ...prev,\n      [field]: value\n    }))\n    \n    // Validar en tiempo real para campos con validación\n    if (['dni', 'street_address', 'postal_code', 'city', 'province'].includes(field)) {\n      const newFormData = { ...formData, [field]: value }\n      const validation = validateWorker({\n        dni: newFormData.dni,\n        street_address: newFormData.street_address,\n        postal_code: newFormData.postal_code,\n        city: newFormData.city,\n        province: newFormData.province\n      })\n      setValidationErrors(validation.errors)\n    }\n  }\n\n  // Auto-detectar provincia por código postal\n  const handlePostalCodeChange = (postalCode: string) => {\n    handleInputChange('postal_code', postalCode)\n    \n    if (postalCode && isValidPostalCodeFormat(postalCode)) {\n      const detectedProvince = getProvinceByPostalCode(postalCode)\n      if (detectedProvince && detectedProvince !== formData.province) {\n        handleInputChange('province', detectedProvince)\n      }\n    }\n  }\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    if (!worker || !supabase) return\n\n    // Validar trabajadora antes de enviar\n    const workerValidation = validateWorker({\n      dni: formData.dni,\n      street_address: formData.street_address,\n      postal_code: formData.postal_code,\n      city: formData.city,\n      province: formData.province\n    })\n\n    if (!workerValidation.isValid) {\n      setValidationErrors(workerValidation.errors)\n      showError('Por favor, corrige los errores en el formulario')\n      return\n    }\n\n    setSaving(true)\n    try {\n      const { error } = await supabase\n        .from('workers')\n        .update(formData)\n        .eq('id', worker.id)\n\n      if (error) {\n        throw error\n      }\n\n      success('Trabajadora actualizada correctamente')\n      setTimeout(() => {\n        router.push('/admin/workers')\n      }, 1500)\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Error desconocido'\n      showError('Error al actualizar trabajadora: ' + errorMessage)\n    } finally {\n      setSaving(false)\n    }\n  }\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto\"></div>\n          <p className=\"mt-4 text-slate-600\">Cargando trabajadora...</p>\n        </div>\n      </div>\n    )\n  }\n\n  if (!worker) {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"text-center\">\n          <div className=\"w-16 h-16 text-red-500 mx-auto mb-4\">⚠️</div>\n          <h1 className=\"text-2xl font-bold text-slate-900 mb-2\">Trabajadora no encontrada</h1>\n          <p className=\"text-slate-600 mb-6\">La trabajadora que buscas no existe o ha sido eliminada.</p>\n          <Link href=\"/admin/workers\">\n            <Button>\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Volver a Trabajadoras\n            </Button>\n          </Link>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      {/* Header */}\n      <div className=\"flex justify-between items-center mb-8\">\n        <div className=\"flex items-center\">\n          <Link href=\"/admin/workers\">\n            <Button variant=\"default\" className=\"mr-4\">\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Volver\n            </Button>\n          </Link>\n          <div>\n            <h1 className=\"text-3xl font-bold text-slate-900\">\n              Editar Trabajadora\n            </h1>\n            <p className=\"text-slate-600\">Modificar información de {worker.name} {worker.surname}</p>\n          </div>\n        </div>\n      </div>\n\n      <form onSubmit={handleSubmit}>\n        {/* Sección Destacada - Disponibilidad */}\n        <Card className=\"mb-8 border-0 shadow-lg\">\n          <CardHeader className=\"bg-gradient-to-r from-indigo-50 to-indigo-100 border-b border-indigo-200\">\n            <CardTitle className=\"flex items-center text-indigo-900\">\n              <Calendar className=\"w-6 h-6 mr-2\" />\n              Disponibilidad de Días\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"p-8\">\n            <div className=\"space-y-6\">\n              <p className=\"text-sm text-slate-600 mb-6\">\n                Selecciona el tipo de disponibilidad de esta trabajadora:\n              </p>\n              \n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                {[\n                  { \n                    key: 'laborables', \n                    label: 'Laborables', \n                    description: 'Lunes a Viernes',\n                    color: 'from-blue-50 to-blue-100',\n                    borderColor: 'border-blue-300',\n                    icon: '🏢'\n                  },\n                  { \n                    key: 'festivos', \n                    label: 'Festivos', \n                    description: 'Fines de semana y días festivos',\n                    color: 'from-green-50 to-green-100',\n                    borderColor: 'border-green-300',\n                    icon: '🎉'\n                  },\n                  { \n                    key: 'flexible', \n                    label: 'Flexible', \n                    description: 'Todos los días',\n                    color: 'from-purple-50 to-purple-100',\n                    borderColor: 'border-purple-300',\n                    icon: '⭐'\n                  }\n                ].map((option) => (\n                  <label\n                    key={option.key}\n                    className={`relative flex flex-col items-center p-6 rounded-lg border-2 cursor-pointer transition-all duration-200 ${\n                      (option.key === 'laborables' && formData.availability_days.includes('monday') && formData.availability_days.includes('friday') && formData.availability_days.length === 5) ||\n                      (option.key === 'festivos' && formData.availability_days.includes('saturday') && formData.availability_days.includes('sunday') && formData.availability_days.length === 2) ||\n                      (option.key === 'flexible' && formData.availability_days.length === 7)\n                        ? `bg-gradient-to-r ${option.color} ${option.borderColor} shadow-md`\n                        : 'bg-white border-slate-200 hover:border-slate-300'\n                    }`}\n                  >\n                    <input\n                      type=\"radio\"\n                      name=\"availability_type\"\n                      checked={\n                        (option.key === 'laborables' && formData.availability_days.includes('monday') && formData.availability_days.includes('friday') && formData.availability_days.length === 5) ||\n                        (option.key === 'festivos' && formData.availability_days.includes('saturday') && formData.availability_days.includes('sunday') && formData.availability_days.length === 2) ||\n                        (option.key === 'flexible' && formData.availability_days.length === 7)\n                      }\n                      onChange={() => {\n                        // Convertir la selección a días específicos según el tipo\n                        let days: string[] = []\n                        switch (option.key) {\n                          case 'laborables':\n                            days = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday']\n                            break\n                          case 'festivos':\n                            days = ['saturday', 'sunday']\n                            break\n                          case 'flexible':\n                            days = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday']\n                            break\n                        }\n                        handleInputChange('availability_days', days)\n                      }}\n                      className=\"sr-only\"\n                    />\n                    <div className={`w-6 h-6 rounded-full border-2 mb-4 flex items-center justify-center ${\n                      (option.key === 'laborables' && formData.availability_days.includes('monday') && formData.availability_days.includes('friday') && formData.availability_days.length === 5) ||\n                      (option.key === 'festivos' && formData.availability_days.includes('saturday') && formData.availability_days.includes('sunday') && formData.availability_days.length === 2) ||\n                      (option.key === 'flexible' && formData.availability_days.length === 7)\n                        ? 'bg-indigo-600 border-indigo-600'\n                        : 'border-slate-300'\n                    }`}>\n                      {((option.key === 'laborables' && formData.availability_days.includes('monday') && formData.availability_days.includes('friday') && formData.availability_days.length === 5) ||\n                        (option.key === 'festivos' && formData.availability_days.includes('saturday') && formData.availability_days.includes('sunday') && formData.availability_days.length === 2) ||\n                        (option.key === 'flexible' && formData.availability_days.length === 7)) && (\n                        <div className=\"w-3 h-3 bg-white rounded-full\"></div>\n                      )}\n                    </div>\n                    <div className=\"text-3xl mb-3\">{option.icon}</div>\n                    <div className=\"text-center\">\n                      <span className={`font-semibold text-lg block ${\n                        (option.key === 'laborables' && formData.availability_days.includes('monday') && formData.availability_days.includes('friday') && formData.availability_days.length === 5) ||\n                        (option.key === 'festivos' && formData.availability_days.includes('saturday') && formData.availability_days.includes('sunday') && formData.availability_days.length === 2) ||\n                        (option.key === 'flexible' && formData.availability_days.length === 7) ? 'text-slate-900' : 'text-slate-700'\n                      }`}>\n                        {option.label}\n                      </span>\n                      <p className={`text-sm mt-1 ${\n                        (option.key === 'laborables' && formData.availability_days.includes('monday') && formData.availability_days.includes('friday') && formData.availability_days.length === 5) ||\n                        (option.key === 'festivos' && formData.availability_days.includes('saturday') && formData.availability_days.includes('sunday') && formData.availability_days.length === 2) ||\n                        (option.key === 'flexible' && formData.availability_days.length === 7) ? 'text-slate-700' : 'text-slate-500'\n                      }`}>\n                        {option.description}\n                      </p>\n                    </div>\n                  </label>\n                ))}\n              </div>\n\n              <div className=\"mt-6 p-4 bg-slate-50 rounded-lg\">\n                <p className=\"text-sm text-slate-600\">\n                  <strong>Disponibilidad actual:</strong> {\n                    (formData.availability_days.includes('monday') && formData.availability_days.includes('friday') && formData.availability_days.length === 5) ? 'Laborables (Lunes a Viernes)' :\n                    (formData.availability_days.includes('saturday') && formData.availability_days.includes('sunday') && formData.availability_days.length === 2) ? 'Festivos (Fines de semana)' :\n                    (formData.availability_days.length === 7) ? 'Flexible (Todos los días)' :\n                    formData.availability_days.length > 0 ? \n                      formData.availability_days.map(day => {\n                        const dayNames = {\n                          monday: 'Lunes',\n                          tuesday: 'Martes', \n                          wednesday: 'Miércoles',\n                          thursday: 'Jueves',\n                          friday: 'Viernes',\n                          saturday: 'Sábado',\n                          sunday: 'Domingo'\n                        }\n                        return dayNames[day as keyof typeof dayNames] || day\n                      }).join(', ')\n                    : 'No especificada'\n                  }\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Grid de Información Personal y Contacto */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n          {/* Información Personal */}\n          <Card className=\"border-0 shadow-lg\">\n            <CardHeader className=\"bg-gradient-to-r from-blue-50 to-blue-100 border-b border-blue-200\">\n              <CardTitle className=\"flex items-center text-blue-900\">\n                <User className=\"w-5 h-5 mr-2\" />\n                Información Personal\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4 p-6\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"text-sm font-medium text-slate-700 mb-2 block\">Nombre *</label>\n                  <Input\n                    type=\"text\"\n                    value={formData.name}\n                    onChange={(e) => handleInputChange('name', e.target.value)}\n                    required\n                    className=\"border-slate-300 focus:border-blue-500 focus:ring-blue-500 transition-colors\"\n                  />\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium text-slate-700 mb-2 block\">Apellidos *</label>\n                  <Input\n                    type=\"text\"\n                    value={formData.surname}\n                    onChange={(e) => handleInputChange('surname', e.target.value)}\n                    required\n                    className=\"border-slate-300 focus:border-blue-500 focus:ring-blue-500 transition-colors\"\n                  />\n                </div>\n              </div>\n\n              <div>\n                <label className=\"text-sm font-medium text-slate-700 mb-2 block\">DNI</label>\n                <Input\n                  type=\"text\"\n                  value={formData.dni}\n                  onChange={(e) => handleInputChange('dni', e.target.value.toUpperCase())}\n                  placeholder=\"12345678A\"\n                  maxLength={9}\n                  className={`border-slate-300 focus:border-blue-500 focus:ring-blue-500 transition-colors ${\n                    validationErrors.dni \n                      ? 'border-red-300 bg-red-50' \n                      : ''\n                  }`}\n                />\n                {validationErrors.dni && (\n                  <p className=\"text-sm text-red-600 mt-1\">{validationErrors.dni}</p>\n                )}\n                {formData.dni && !validationErrors.dni && (\n                  <p className=\"text-sm text-green-600 mt-1\">\n                    ✅ DNI válido\n                  </p>\n                )}\n              </div>\n\n              <div>\n                <label className=\"text-sm font-medium text-slate-700 mb-2 block\">Código de Empleada</label>\n                <div className=\"bg-gradient-to-r from-slate-50 to-slate-100 border border-slate-200 px-3 py-2 rounded-md\">\n                  <p className=\"text-slate-900 font-mono text-sm font-semibold\">\n                    {worker.employee_code}\n                  </p>\n                </div>\n                <p className=\"text-xs text-slate-500 mt-2\">El código de empleada no se puede modificar</p>\n              </div>\n\n              <div>\n                <label className=\"text-sm font-medium text-slate-700 mb-2 block\">Estado</label>\n                <div className=\"flex items-center space-x-3\">\n                  <label className=\"relative inline-flex items-center cursor-pointer\">\n                    <input\n                      type=\"checkbox\"\n                      checked={formData.is_active}\n                      onChange={(e) => handleInputChange('is_active', e.target.checked)}\n                      className=\"sr-only peer\"\n                    />\n                    <div className=\"w-11 h-6 bg-slate-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-slate-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600\"></div>\n                  </label>\n                  <span className=\"text-sm font-medium text-slate-700\">\n                    {formData.is_active ? 'Trabajadora activa' : 'Trabajadora inactiva'}\n                  </span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Información de Contacto */}\n          <Card className=\"border-0 shadow-lg\">\n            <CardHeader className=\"bg-gradient-to-r from-green-50 to-green-100 border-b border-green-200\">\n              <CardTitle className=\"flex items-center text-green-900\">\n                <Mail className=\"w-5 h-5 mr-2\" />\n                Información de Contacto\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4 p-6\">\n              <div>\n                <label className=\"text-sm font-medium text-slate-700 mb-2 block\">Email *</label>\n                <Input\n                  type=\"email\"\n                  value={formData.email}\n                  onChange={(e) => handleInputChange('email', e.target.value)}\n                  required\n                  className=\"border-slate-300 focus:border-green-500 focus:ring-green-500 transition-colors\"\n                />\n              </div>\n\n              <div>\n                <label className=\"text-sm font-medium text-slate-700 mb-2 block\">Teléfono *</label>\n                <Input\n                  type=\"tel\"\n                  value={formData.phone}\n                  onChange={(e) => handleInputChange('phone', e.target.value)}\n                  required\n                  className=\"border-slate-300 focus:border-green-500 focus:ring-green-500 transition-colors\"\n                />\n              </div>\n\n              <div>\n                <label className=\"text-sm font-medium text-slate-700 mb-2 block\">Calle y Número *</label>\n                <Input\n                  type=\"text\"\n                  required\n                  value={formData.street_address}\n                  onChange={(e) => handleInputChange('street_address', e.target.value)}\n                  className={`border-slate-300 focus:border-green-500 focus:ring-green-500 transition-colors ${\n                    validationErrors.street_address \n                      ? 'border-red-300 bg-red-50' \n                      : ''\n                  }`}\n                  placeholder=\"Calle Mayor 123\"\n                />\n                {validationErrors.street_address && (\n                  <p className=\"text-sm text-red-600 mt-1\">{validationErrors.street_address}</p>\n                )}\n              </div>\n\n              <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"text-sm font-medium text-slate-700 mb-2 block\">Código Postal</label>\n                  <Input\n                    type=\"text\"\n                    value={formData.postal_code}\n                    onChange={(e) => handlePostalCodeChange(e.target.value)}\n                    className={`border-slate-300 focus:border-green-500 focus:ring-green-500 transition-colors ${\n                      validationErrors.postal_code \n                        ? 'border-red-300 bg-red-50' \n                        : ''\n                    }`}\n                    placeholder=\"08301\"\n                    pattern=\"[0-9]{5}\"\n                    title=\"Código postal de 5 dígitos\"\n                    maxLength={5}\n                  />\n                  {validationErrors.postal_code && (\n                    <p className=\"text-sm text-red-600 mt-1\">{validationErrors.postal_code}</p>\n                  )}\n                  {formData.postal_code && !validationErrors.postal_code && (\n                    <p className=\"text-sm text-green-600 mt-1\">\n                      ✅ Código postal válido para {getProvinceByPostalCode(formData.postal_code) || 'España'}\n                    </p>\n                  )}\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium text-slate-700 mb-2 block\">Ciudad *</label>\n                  <Input\n                    type=\"text\"\n                    required\n                    value={formData.city}\n                    onChange={(e) => handleInputChange('city', e.target.value)}\n                    className={`border-slate-300 focus:border-green-500 focus:ring-green-500 transition-colors ${\n                      validationErrors.city \n                        ? 'border-red-300 bg-red-50' \n                        : ''\n                    }`}\n                    placeholder=\"Mataró\"\n                  />\n                  {validationErrors.city && (\n                    <p className=\"text-sm text-red-600 mt-1\">{validationErrors.city}</p>\n                  )}\n                </div>\n              </div>\n\n              <div>\n                <label className=\"text-sm font-medium text-slate-700 mb-2 block\">Provincia</label>\n                <select\n                  value={formData.province}\n                  onChange={(e) => handleInputChange('province', e.target.value)}\n                                      className={`w-full border border-slate-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500 transition-colors ${\n                      validationErrors.province \n                        ? 'border-red-300 bg-red-50' \n                        : ''\n                    }`}\n                  >\n                    {Object.keys(POSTAL_CODE_RANGES).map(province => (\n                      <option key={province} value={province}>\n                        {province}\n                      </option>\n                    ))}\n                  </select>\n                  {validationErrors.province && (\n                    <p className=\"text-sm text-red-600 mt-1\">{validationErrors.province}</p>\n                  )}\n                  {formData.province && !validationErrors.province && formData.postal_code && (\n                    <p className=\"text-sm text-blue-600 mt-1\">\n                      💡 Sugerencias: {getPostalCodeSuggestions(formData.province).join(', ')}\n                    </p>\n                  )}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Botones de Acción */}\n        <div className=\"flex justify-end gap-4 mt-8\">\n          <Link href=\"/admin/workers\">\n            <Button variant=\"default\" type=\"button\" className=\"bg-slate-100 hover:bg-slate-200 text-slate-700\">\n              Cancelar\n            </Button>\n          </Link>\n          <Button type=\"submit\" disabled={saving} className=\"bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700 text-white shadow-lg\">\n            <Save className=\"w-4 h-4 mr-2\" />\n            {saving ? 'Guardando...' : 'Guardar Cambios'}\n          </Button>\n        </div>\n      </form>\n\n      {/* Toast Notification */}\n      {/* The ToastNotification component is no longer used, but the hooks are kept */}\n    </div>\n  )\n} ","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"/Users/alamia.es/Public/SAD/src/app/admin/workers/[id]/page.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":59,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":59,"endColumn":20,"suggestions":[{"fix":{"range":[1683,1729],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":72,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":72,"endColumn":22,"suggestions":[{"fix":{"range":[1949,2001],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":78,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":78,"endColumn":20,"suggestions":[{"fix":{"range":[2148,2189],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getDayName' is assigned a value but never used.","line":106,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":106,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport { useState, useEffect } from 'react'\nimport { useParams } from 'next/navigation'\nimport Link from 'next/link'\nimport { supabase } from '@/lib/supabase'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { ArrowLeft, Edit, User, Mail, Phone, Clock } from 'lucide-react'\nimport { Badge } from '@/components/ui/badge'\n\ninterface Worker {\n  id: string\n  name: string\n  surname: string\n  email: string\n  phone: string\n  dni?: string\n  address?: string\n  street_address?: string\n  postal_code?: string\n  city?: string\n  province?: string\n  worker_type: string\n  hourly_rate: number\n  is_active: boolean\n  employee_code: string\n  specializations: string[]\n  availability_days: string[]\n  created_at: string\n}\n\nexport default function WorkerDetailPage() {\n  const params = useParams()\n  const [worker, setWorker] = useState<Worker | null>(null)\n  const [loading, setLoading] = useState(true)\n  const [monthlyHours, setMonthlyHours] = useState<number | null>(null)\n\n  useEffect(() => {\n    if (params.id) {\n      fetchWorker(params.id as string)\n      fetchMonthlyHours(params.id as string)\n    }\n  }, [params.id])\n\n  const formatAddress = (worker: Worker) => {\n    if (worker.street_address && worker.city) {\n      const parts = [worker.street_address]\n      if (worker.postal_code) parts.push(worker.postal_code)\n      parts.push(worker.city)\n      if (worker.province && worker.province !== 'Barcelona') parts.push(worker.province)\n      return parts.join(', ')\n    }\n    return worker.address || ''\n  }\n\n  const fetchWorker = async (workerId: string) => {\n    if (!supabase) {\n      console.error('Supabase client no disponible')\n      setLoading(false)\n      return\n    }\n\n    try {\n      const { data, error } = await supabase\n        .from('workers')\n        .select('*')\n        .eq('id', workerId)\n        .single()\n\n      if (error) {\n        console.error('Error al cargar trabajadora:', error)\n        alert('Error al cargar trabajadora: ' + JSON.stringify(error))\n      } else {\n        setWorker(data)\n      }\n    } catch (error) {\n      console.error('Error inesperado:', error)\n      alert('Error inesperado: ' + JSON.stringify(error))\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  // Fetch de horas mensuales planificadas para el mes actual\n  const fetchMonthlyHours = async (workerId: string) => {\n    if (!supabase) return\n    const now = new Date()\n    const month = now.getMonth() + 1\n    const year = now.getFullYear()\n    const { data, error } = await supabase\n      .from('monthly_plans')\n      .select('planned_hours')\n      .eq('worker_id', workerId)\n      .eq('month', month)\n      .eq('year', year)\n      .single()\n    if (!error && data && typeof data.planned_hours === 'number') {\n      setMonthlyHours(data.planned_hours)\n    } else {\n      setMonthlyHours(null)\n    }\n  }\n\n  // Helper para mostrar el nombre del día\n  const getDayName = (day: string) => {\n    const dayNames: { [key: string]: string } = {\n      monday: 'Lunes',\n      tuesday: 'Martes',\n      wednesday: 'Miércoles',\n      thursday: 'Jueves',\n      friday: 'Viernes',\n      saturday: 'Sábado',\n      sunday: 'Domingo',\n    }\n    return dayNames[day] || day\n  }\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto\"></div>\n          <p className=\"mt-4 text-slate-600\">Cargando trabajadora...</p>\n        </div>\n      </div>\n    )\n  }\n\n  if (!worker) {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"text-center\">\n          <div className=\"w-16 h-16 text-red-500 mx-auto mb-4\">⚠️</div>\n          <h1 className=\"text-2xl font-bold text-slate-900 mb-2\">Trabajadora no encontrada</h1>\n          <p className=\"text-slate-600 mb-6\">La trabajadora que buscas no existe o ha sido eliminada.</p>\n          <Link href=\"/admin/workers\">\n            <Button>\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Volver a Trabajadoras\n            </Button>\n          </Link>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      {/* Header */}\n      <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4 mb-8\">\n        <div className=\"flex items-center\">\n          <Link href=\"/admin/workers\">\n            <Button variant=\"default\" className=\"mr-4\">\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Volver\n            </Button>\n          </Link>\n          <div>\n            <h1 className=\"text-2xl sm:text-3xl font-bold text-slate-900\">\n              {worker.name} {worker.surname}\n            </h1>\n            <p className=\"text-slate-600\">Detalles de la trabajadora</p>\n          </div>\n        </div>\n        <Link href={`/admin/workers/${worker.id}/edit`}>\n          <Button className=\"bg-blue-600 hover:bg-blue-700 w-full sm:w-auto\">\n            <Edit className=\"w-4 h-4 mr-2\" />\n            Editar Trabajadora\n          </Button>\n        </Link>\n      </div>\n\n      {/* Información Laboral destacada */}\n      <Card className=\"mb-8\">\n        <CardHeader className=\"bg-gradient-to-r from-purple-50 to-purple-100 border-b border-purple-200\">\n          <CardTitle className=\"flex items-center gap-2 text-purple-900\">\n            <Clock className=\"w-6 h-6 text-purple-600\" />\n            Información Laboral\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"flex flex-col md:flex-row md:items-center md:justify-between gap-6 p-8\">\n          <div className=\"flex-1 mb-6 md:mb-0\">\n            <div className=\"mb-2 text-slate-700 font-semibold\">Horas mensuales planificadas:</div>\n            <div className=\"flex items-end gap-2\">\n              <span className=\"text-5xl md:text-6xl font-extrabold text-purple-700\">{monthlyHours !== null ? monthlyHours : '--'}</span>\n              <span className=\"text-base text-slate-600 mb-1\">h</span>\n            </div>\n            <div className=\"text-xs text-slate-400 mt-1\">(Según planning mensual actual)</div>\n          </div>\n          <div className=\"flex-1\">\n            <div className=\"mb-2 text-slate-700 font-semibold\">Disponibilidad:</div>\n            <div className=\"mb-4\">\n              <Badge className=\"text-base px-4 py-2 bg-blue-100 text-blue-800 border border-blue-300 font-semibold\">\n                {(worker.availability_days && worker.availability_days.length === 5 && \n                  worker.availability_days.includes('monday') && \n                  worker.availability_days.includes('friday')) ? 'Laborables' :\n                 (worker.availability_days && worker.availability_days.length === 2 && \n                  worker.availability_days.includes('saturday') && \n                  worker.availability_days.includes('sunday')) ? 'Festivos' :\n                 (worker.availability_days && worker.availability_days.length === 7) ? 'Flexible' :\n                 worker.worker_type === 'regular' ? 'Laborables' : \n                 worker.worker_type === 'holidays' ? 'Festivos' : \n                 worker.worker_type === 'weekends' ? 'Fines de semana' : \n                 worker.worker_type === 'flexible' ? 'Flexible' : 'No especificada'}\n              </Badge>\n            </div>\n            <div className=\"text-sm text-slate-600\">\n              {(worker.availability_days && worker.availability_days.length === 5 && \n                worker.availability_days.includes('monday') && \n                worker.availability_days.includes('friday')) ? 'Lunes a Viernes' :\n               (worker.availability_days && worker.availability_days.length === 2 && \n                worker.availability_days.includes('saturday') && \n                worker.availability_days.includes('sunday')) ? 'Fines de semana' :\n               (worker.availability_days && worker.availability_days.length === 7) ? 'Todos los días' :\n               'No especificada'}\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n        {/* Información Personal */}\n        <Card className=\"border-0 shadow-lg\">\n          <CardHeader className=\"bg-gradient-to-r from-blue-50 to-blue-100 border-b border-blue-200\">\n            <CardTitle className=\"flex items-center text-blue-900\">\n              <User className=\"w-5 h-5 mr-2\" />\n              Información Personal\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4 p-6\">\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n              <div>\n                <label className=\"text-sm font-medium text-slate-700 mb-2 block\">Nombre</label>\n                <div className=\"bg-gradient-to-r from-slate-50 to-slate-100 border border-slate-200 px-3 py-2 rounded-md\">\n                  <p className=\"text-slate-900 font-semibold\">{worker.name}</p>\n                </div>\n              </div>\n              <div>\n                <label className=\"text-sm font-medium text-slate-700 mb-2 block\">Apellidos</label>\n                <div className=\"bg-gradient-to-r from-slate-50 to-slate-100 border border-slate-200 px-3 py-2 rounded-md\">\n                  <p className=\"text-slate-900 font-semibold\">{worker.surname}</p>\n                </div>\n              </div>\n            </div>\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n              <div>\n                <label className=\"text-sm font-medium text-slate-700 mb-2 block\">Código de Empleada</label>\n                <div className=\"bg-gradient-to-r from-slate-50 to-slate-100 border border-slate-200 px-3 py-2 rounded-md\">\n                  <p className=\"text-slate-900 font-mono text-sm font-semibold\">{worker.employee_code}</p>\n                </div>\n              </div>\n              <div>\n                <label className=\"text-sm font-medium text-slate-700 mb-2 block\">DNI</label>\n                <div className=\"bg-gradient-to-r from-slate-50 to-slate-100 border border-slate-200 px-3 py-2 rounded-md\">\n                  <p className=\"text-slate-900 font-mono text-sm font-semibold\">{worker.dni || <span className='text-slate-400 italic'>No registrado</span>}</p>\n                </div>\n              </div>\n            </div>\n\n            <div>\n              <label className=\"text-sm font-medium text-slate-700 mb-2 block\">Estado</label>\n              <div className=\"flex items-center space-x-3\">\n                <div className={`w-3 h-3 rounded-full ${worker.is_active ? 'bg-green-500' : 'bg-red-500'}`}></div>\n                <span className={`text-sm font-semibold ${worker.is_active ? 'text-green-700' : 'text-red-700'}`}>\n                  {worker.is_active ? 'Trabajadora activa' : 'Trabajadora inactiva'}\n                </span>\n              </div>\n            </div>\n\n            <div>\n              <label className=\"text-sm font-medium text-slate-700 mb-2 block\">Fecha de Registro</label>\n              <div className=\"bg-gradient-to-r from-slate-50 to-slate-100 border border-slate-200 px-3 py-2 rounded-md\">\n                <p className=\"text-slate-900 font-semibold\">\n                  {new Date(worker.created_at).toLocaleDateString('es-ES', {\n                    year: 'numeric',\n                    month: 'long',\n                    day: 'numeric'\n                  })}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Información de Contacto */}\n        <Card className=\"border-0 shadow-lg\">\n          <CardHeader className=\"bg-gradient-to-r from-green-50 to-green-100 border-b border-green-200\">\n            <CardTitle className=\"flex items-center text-green-900\">\n              <Mail className=\"w-5 h-5 mr-2\" />\n              Información de Contacto\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4 p-6\">\n            <div>\n              <label className=\"text-sm font-medium text-slate-700 mb-2 block\">Email</label>\n              <div className=\"bg-gradient-to-r from-slate-50 to-slate-100 border border-slate-200 px-3 py-2 rounded-md\">\n                <p className=\"text-slate-900 flex items-center font-semibold\">\n                  <Mail className=\"w-4 h-4 mr-2 text-slate-500\" />\n                  {worker.email}\n                </p>\n              </div>\n            </div>\n\n            <div>\n              <label className=\"text-sm font-medium text-slate-700 mb-2 block\">Teléfono</label>\n              <div className=\"bg-gradient-to-r from-slate-50 to-slate-100 border border-slate-200 px-3 py-2 rounded-md\">\n                <p className=\"text-slate-900 flex items-center font-semibold\">\n                  <Phone className=\"w-4 h-4 mr-2 text-slate-500\" />\n                  {worker.phone}\n                </p>\n              </div>\n            </div>\n\n            {(worker.street_address || worker.address) && (\n              <div>\n                <label className=\"text-sm font-medium text-slate-700 mb-2 block\">Dirección</label>\n                <div className=\"bg-gradient-to-r from-slate-50 to-slate-100 border border-slate-200 px-3 py-2 rounded-md\">\n                  <p className=\"text-slate-900 flex items-start font-semibold\">\n                    <svg className=\"w-4 h-4 mr-2 mt-0.5 text-slate-500 flex-shrink-0\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z\" />\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 11a3 3 0 11-6 0 3 3 0 016 0z\" />\n                    </svg>\n                    <span className=\"leading-relaxed\">{formatAddress(worker)}</span>\n                  </p>\n                </div>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n\n      </div>\n    </div>\n  )\n} ","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"/Users/alamia.es/Public/SAD/src/app/admin/workers/new/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Calendar' is defined but never used.","line":8,"column":33,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":41},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'validateAddress' is defined but never used.","line":13,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isValidPostalCodeFormat' is defined but never used.","line":14,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isValidSpanishPostalCode' is defined but never used.","line":15,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isValidPostalCodeForProvince' is defined but never used.","line":16,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getProvinceByPostalCode' is defined but never used.","line":17,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getPostalCodeSuggestions' is defined but never used.","line":18,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isValidDNI' is defined but never used.","line":19,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isValidDNIFormat' is defined but never used.","line":20,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getCorrectDNILetter' is defined but never used.","line":21,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'formatDNI' is defined but never used.","line":22,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'POSTAL_CODE_RANGES' is defined but never used.","line":23,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":21},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":78,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":78,"endColumn":20,"suggestions":[{"fix":{"range":[2000,2046],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":91,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":91,"endColumn":22,"suggestions":[{"fix":{"range":[2326,2387],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":108,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":108,"endColumn":20,"suggestions":[{"fix":{"range":[2863,2923],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'data' is assigned a value but never used.","line":156,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":156,"endColumn":19},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":163,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":163,"endColumn":22,"suggestions":[{"fix":{"range":[4430,4481],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":164,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":164,"endColumn":22,"suggestions":[{"fix":{"range":[4490,4552],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":172,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":172,"endColumn":20,"suggestions":[{"fix":{"range":[4802,4843],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":179,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":179,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5026,5029],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5026,5029],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport { useRouter } from 'next/navigation'\nimport { useToast } from '@/components/ui/toast'\nimport { supabase } from '@/lib/supabase'\nimport { Button } from '@/components/ui/button'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { ArrowLeft, Save, User, Calendar, Settings } from 'lucide-react'\nimport Link from 'next/link'\nimport { useState, useEffect } from 'react'\nimport { \n  validateWorker,\n  validateAddress, \n  isValidPostalCodeFormat, \n  isValidSpanishPostalCode, \n  isValidPostalCodeForProvince,\n  getProvinceByPostalCode,\n  getPostalCodeSuggestions,\n  isValidDNI,\n  isValidDNIFormat,\n  getCorrectDNILetter,\n  formatDNI,\n  POSTAL_CODE_RANGES \n} from '@/lib/utils'\n\ninterface WorkerFormData {\n  employee_code: string\n  name: string\n  surname: string\n  email: string\n  phone: string\n  dni: string\n  street_address: string\n  postal_code: string\n  city: string\n  worker_type: 'laborables' | 'festivos' | 'flexible'\n  hourly_rate: number\n  hire_date: string\n  availability_days: string[]\n  notes: string\n}\n\nexport default function NewWorkerPage() {\n  const router = useRouter()\n  const { showToast, ToastComponent } = useToast()\n  const [loading, setLoading] = useState(false)\n  const [validationErrors, setValidationErrors] = useState<{\n    dni?: string\n    street_address?: string\n    postal_code?: string\n    city?: string\n  }>({})\n\n  const [formData, setFormData] = useState<WorkerFormData>({\n    employee_code: '',\n    name: '',\n    surname: '',\n    email: '',\n    phone: '',\n    dni: '',\n    street_address: '',\n    postal_code: '',\n    city: '',\n    worker_type: 'laborables',\n    hourly_rate: 12.50,\n    hire_date: new Date().toISOString().split('T')[0],\n    availability_days: ['monday', 'tuesday', 'wednesday', 'thursday', 'friday'],\n    notes: ''\n  })\n\n  // Generar código de empleado automáticamente\n  useEffect(() => {\n    generateEmployeeCode()\n  }, [])\n\n  const generateEmployeeCode = async () => {\n    if (!supabase) {\n      console.error('Supabase client no disponible')\n      return\n    }\n\n    try {\n      // Obtener el último código de empleado\n      const { data, error } = await supabase\n        .from('workers')\n        .select('employee_code')\n        .order('employee_code', { ascending: false })\n        .limit(1)\n\n      if (error) {\n        console.error('Error al obtener códigos de empleado:', error)\n        return\n      }\n\n      let nextCode = 'TR001'\n      if (data && data.length > 0) {\n        const lastCode = data[0].employee_code\n        if (lastCode && lastCode.startsWith('TR')) {\n          const number = parseInt(lastCode.substring(2))\n          if (!isNaN(number)) {\n            nextCode = `TR${(number + 1).toString().padStart(3, '0')}`\n          }\n        }\n      }\n\n      setFormData(prev => ({ ...prev, employee_code: nextCode }))\n    } catch (error) {\n      console.error('Error al generar código de empleado:', error)\n    }\n  }\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setLoading(true)\n\n    // Validar trabajadora antes de enviar\n    const workerValidation = validateWorker({\n      dni: formData.dni,\n      street_address: formData.street_address,\n      postal_code: formData.postal_code,\n      city: formData.city,\n    })\n\n    if (!workerValidation.isValid) {\n      setValidationErrors(workerValidation.errors)\n      showToast('Por favor, corrige los errores en el formulario', 'error')\n      setLoading(false)\n      return\n    }\n\n    if (!supabase) {\n      showToast('Error: Supabase client no disponible', 'error')\n      setLoading(false)\n      return\n    }\n\n    try {\n      // Preparar datos para inserción\n      const workerData = {\n        employee_code: formData.employee_code,\n        name: formData.name,\n        surname: formData.surname,\n        email: formData.email,\n        phone: formData.phone,\n        dni: formData.dni || null,\n        street_address: formData.street_address || null,\n        postal_code: formData.postal_code || null,\n        city: formData.city || null,\n        worker_type: formData.worker_type,\n        hourly_rate: formData.hourly_rate,\n        hire_date: formData.hire_date,\n        availability_days: formData.availability_days,\n        notes: formData.notes || null\n      }\n\n      const { data, error } = await supabase\n        .from('workers')\n        .insert([workerData])\n        .select()\n        .single()\n\n      if (error) {\n        console.error('Error al crear trabajadora:', error)\n        console.error('Datos que se intentaron insertar:', workerData)\n        showToast(`Error al crear trabajadora: ${error.message || 'Error desconocido'}`, 'error')\n        return\n      }\n\n      showToast('Trabajadora creada correctamente', 'success')\n      router.push('/admin/workers')\n    } catch (error) {\n      console.error('Error inesperado:', error)\n      showToast('Error inesperado al crear trabajadora', 'error')\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const handleInputChange = (field: keyof WorkerFormData, value: any) => {\n    setFormData(prev => ({ ...prev, [field]: value }))\n    \n    // Validar en tiempo real para campos con validación\n    if (['dni', 'street_address', 'postal_code', 'city'].includes(field)) {\n      const newFormData = { ...formData, [field]: value }\n      const validation = validateWorker({\n        dni: newFormData.dni,\n        street_address: newFormData.street_address,\n        postal_code: newFormData.postal_code,\n        city: newFormData.city,\n      })\n      setValidationErrors(validation.errors)\n    }\n    \n    // Actualizar availability_days cuando cambie worker_type\n    if (field === 'worker_type') {\n      const newAvailabilityDays = getAvailabilityDays(value)\n      setFormData(prev => ({ ...prev, availability_days: newAvailabilityDays }))\n    }\n  }\n\n  // Añadir función para mapear worker_type a availability_days\n  const getAvailabilityDays = (workerType: string): string[] => {\n    switch (workerType) {\n      case 'laborables':\n        return ['monday', 'tuesday', 'wednesday', 'thursday', 'friday']\n      case 'festivos':\n        return ['saturday', 'sunday']\n      case 'flexible':\n        return ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday']\n      default:\n        return ['monday', 'tuesday', 'wednesday', 'thursday', 'friday']\n    }\n  }\n\n  return (\n    <div className=\"min-h-screen bg-slate-50\">\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Header */}\n        <div className=\"mb-6\">\n          <div className=\"flex items-center space-x-4 mb-4\">\n            <Link href=\"/admin/workers\">\n              <Button variant=\"secondary\" size=\"sm\">\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                Volver\n              </Button>\n            </Link>\n            <div>\n              <h1 className=\"text-xl sm:text-2xl font-bold text-slate-900\">\n                Nueva Trabajadora\n              </h1>\n              <p className=\"text-sm sm:text-base text-slate-600\">\n                Creando nuevo perfil de trabajadora\n              </p>\n            </div>\n          </div>\n        </div>\n\n        {/* Form */}\n        <form onSubmit={handleSubmit}>\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* Información Personal */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <User className=\"w-5 h-5 text-blue-600\" />\n                  <span>Información Personal</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-slate-700 mb-1\">\n                      Código de Empleado *\n                    </label>\n                    <input\n                      type=\"text\"\n                      required\n                      value={formData.employee_code}\n                      onChange={(e) => handleInputChange('employee_code', e.target.value)}\n                      className=\"w-full px-3 py-2 border border-slate-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500 bg-slate-50\"\n                      placeholder=\"TR001\"\n                      readOnly\n                    />\n                    <p className=\"text-xs text-slate-500 mt-1\">Generado automáticamente</p>\n                  </div>\n                  <div>\n                    <label className=\"block text-sm font-medium text-slate-700 mb-1\">\n                      DNI\n                    </label>\n                    <input\n                      type=\"text\"\n                      value={formData.dni}\n                      onChange={(e) => handleInputChange('dni', e.target.value.toUpperCase())}\n                      className={`w-full px-3 py-2 border rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\n                        validationErrors.dni \n                          ? 'border-red-300 bg-red-50' \n                          : 'border-slate-300'\n                      }`}\n                      placeholder=\"12345678A\"\n                      maxLength={9}\n                    />\n                    {validationErrors.dni && (\n                      <p className=\"text-sm text-red-600 mt-1\">{validationErrors.dni}</p>\n                    )}\n                    {formData.dni && !validationErrors.dni && (\n                      <p className=\"text-sm text-green-600 mt-1\">\n                        ✅ DNI válido\n                      </p>\n                    )}\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-slate-700 mb-1\">\n                      Nombre *\n                    </label>\n                    <input\n                      type=\"text\"\n                      required\n                      value={formData.name}\n                      onChange={(e) => handleInputChange('name', e.target.value)}\n                      className=\"w-full px-3 py-2 border border-slate-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                      placeholder=\"Carmen\"\n                    />\n                  </div>\n                  <div>\n                    <label className=\"block text-sm font-medium text-slate-700 mb-1\">\n                      Apellidos *\n                    </label>\n                    <input\n                      type=\"text\"\n                      required\n                      value={formData.surname}\n                      onChange={(e) => handleInputChange('surname', e.target.value)}\n                      className=\"w-full px-3 py-2 border border-slate-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                      placeholder=\"Fernández Ruiz\"\n                    />\n                  </div>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-slate-700 mb-1\">\n                    Email *\n                  </label>\n                  <input\n                    type=\"email\"\n                    required\n                    value={formData.email}\n                    onChange={(e) => handleInputChange('email', e.target.value)}\n                    className=\"w-full px-3 py-2 border border-slate-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                    placeholder=\"carmen.fernandez@sadlas.com\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-slate-700 mb-1\">\n                    Teléfono *\n                  </label>\n                  <input\n                    type=\"tel\"\n                    required\n                    value={formData.phone}\n                    onChange={(e) => handleInputChange('phone', e.target.value)}\n                    className=\"w-full px-3 py-2 border border-slate-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                    placeholder=\"600 123 456\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-slate-700 mb-1\">\n                    Dirección\n                  </label>\n                  <input\n                    type=\"text\"\n                    value={formData.street_address}\n                    onChange={(e) => handleInputChange('street_address', e.target.value)}\n                    className=\"w-full px-3 py-2 border border-slate-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                    placeholder=\"Calle Mayor 123\"\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-slate-700 mb-1\">\n                      Código Postal\n                    </label>\n                    <input\n                      type=\"text\"\n                      value={formData.postal_code}\n                      onChange={(e) => handleInputChange('postal_code', e.target.value)}\n                      className={`w-full px-3 py-2 border rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\n                        validationErrors.postal_code \n                          ? 'border-red-300 bg-red-50' \n                          : 'border-slate-300'\n                      }`}\n                      placeholder=\"08302\"\n                      maxLength={5}\n                    />\n                    {validationErrors.postal_code && (\n                      <p className=\"text-sm text-red-600 mt-1\">{validationErrors.postal_code}</p>\n                    )}\n                    {/* Validación visual: código postal y ciudad */}\n                    {formData.postal_code && formData.city && !validationErrors.postal_code && (\n                      <p className=\"text-xs text-green-600 mt-1\">\n                        {formData.city === 'Mataró' && formData.postal_code.startsWith('083') ? '✅ Código postal válido para Mataró' : '⚠️ Revisa que el código postal corresponda a la ciudad'}\n                      </p>\n                    )}\n                  </div>\n                  <div>\n                    <label className=\"block text-sm font-medium text-slate-700 mb-1\">\n                      Ciudad\n                    </label>\n                    <input\n                      type=\"text\"\n                      value={formData.city}\n                      onChange={(e) => handleInputChange('city', e.target.value)}\n                      className=\"w-full px-3 py-2 border border-slate-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                      placeholder=\"Mataró\"\n                    />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Información Laboral */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Settings className=\"w-5 h-5 text-green-600\" />\n                  <span>Información Laboral</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-slate-700 mb-1\">\n                    Tipo de Disponibilidad *\n                  </label>\n                  <select\n                    required\n                    value={formData.worker_type}\n                    onChange={(e) => {\n                      const newType = e.target.value as 'laborables' | 'festivos' | 'flexible'\n                      handleInputChange('worker_type', newType)\n                    }}\n                    className=\"w-full px-3 py-2 border border-slate-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                  >\n                    <option value=\"laborables\">Laborables (Lunes a Viernes)</option>\n                    <option value=\"festivos\">Festivos (Fines de semana y festivos)</option>\n                    <option value=\"flexible\">Flexible (Cualquier día)</option>\n                  </select>\n                  <p className=\"text-xs text-slate-500 mt-1\">\n                    {formData.worker_type === 'laborables' && 'Disponible de lunes a viernes'}\n                    {formData.worker_type === 'festivos' && 'Disponible fines de semana y festivos'}\n                    {formData.worker_type === 'flexible' && 'Disponible todos los días de la semana'}\n                  </p>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-slate-700 mb-1\">\n                    Fecha de Contratación *\n                  </label>\n                  <input\n                    type=\"date\"\n                    required\n                    value={formData.hire_date}\n                    onChange={(e) => handleInputChange('hire_date', e.target.value)}\n                    className=\"w-full px-3 py-2 border border-slate-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-slate-700 mb-1\">\n                    Tarifa por Hora (€) *\n                  </label>\n                  <input\n                    type=\"number\"\n                    step=\"0.01\"\n                    required\n                    value={formData.hourly_rate}\n                    onChange={(e) => handleInputChange('hourly_rate', parseFloat(e.target.value))}\n                    className=\"w-full px-3 py-2 border border-slate-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                    placeholder=\"12.50\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-slate-700 mb-1\">\n                    Notas\n                  </label>\n                  <textarea\n                    value={formData.notes}\n                    onChange={(e) => handleInputChange('notes', e.target.value)}\n                    rows={3}\n                    className=\"w-full px-3 py-2 border border-slate-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                    placeholder=\"Información adicional sobre la trabajadora...\"\n                  />\n                </div>\n\n                {/* Disponibilidad de Días */}\n                <div className=\"pt-4 border-t border-slate-200\">\n                  <div className=\"p-4 bg-gradient-to-r from-blue-50 to-indigo-50 rounded-lg border border-blue-200\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <h4 className=\"font-semibold text-blue-900 mb-1\">\n                          {formData.worker_type === 'laborables' && '📅 Laborables'}\n                          {formData.worker_type === 'festivos' && '🎉 Festivos'}\n                          {formData.worker_type === 'flexible' && '⭐ Flexible'}\n                        </h4>\n                        <p className=\"text-sm text-blue-700\">\n                          {formData.worker_type === 'laborables' && 'Lunes, Martes, Miércoles, Jueves, Viernes'}\n                          {formData.worker_type === 'festivos' && 'Sábados, Domingos y festivos'}\n                          {formData.worker_type === 'flexible' && 'Todos los días de la semana'}\n                        </p>\n                      </div>\n                      <div className=\"text-2xl\">\n                        {formData.worker_type === 'laborables' && '🏢'}\n                        {formData.worker_type === 'festivos' && '🎊'}\n                        {formData.worker_type === 'flexible' && '⭐'}\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"text-xs text-slate-500 text-center mt-2\">\n                    La disponibilidad se configura automáticamente según el tipo seleccionado\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Actions */}\n          <div className=\"mt-6 flex justify-end space-x-4\">\n            <Link href=\"/admin/workers\">\n              <Button variant=\"secondary\" type=\"button\">\n                Cancelar\n              </Button>\n            </Link>\n            <Button type=\"submit\" disabled={loading}>\n              <Save className=\"w-4 h-4 mr-2\" />\n              {loading ? 'Creando...' : 'Crear Trabajadora'}\n            </Button>\n          </div>\n        </form>\n\n        {ToastComponent}\n      </div>\n    </div>\n  )\n} ","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"/Users/alamia.es/Public/SAD/src/app/admin/workers/page.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'filterWorkers'. Either include it or remove the dependency array.","line":52,"column":6,"nodeType":"ArrayExpression","endLine":52,"endColumn":53,"suggestions":[{"desc":"Update the dependencies array to be: [workers, searchTerm, statusFilter, typeFilter, filterWorkers]","fix":{"range":[1714,1761],"text":"[workers, searchTerm, statusFilter, typeFilter, filterWorkers]"}}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":72,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":72,"endColumn":20,"suggestions":[{"fix":{"range":[2299,2345],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":84,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":84,"endColumn":22,"suggestions":[{"fix":{"range":[2742,2795],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":91,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":91,"endColumn":20,"suggestions":[{"fix":{"range":[2989,3030],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport { useState, useEffect } from 'react'\nimport Link from 'next/link'\nimport { supabase } from '@/lib/supabase'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Search, Users, Plus, ChevronDown, Filter } from 'lucide-react'\nimport ConfirmModal from '@/components/ui/confirm-modal'\nimport { useNotificationHelpers } from '@/components/ui/toast-notification'\n\ninterface Worker {\n  id: string\n  name: string\n  surname: string\n  email: string\n  phone: string\n  worker_type: string\n  hourly_rate: number\n  is_active: boolean\n  employee_code: string\n  address?: string\n  street_address?: string\n  postal_code?: string\n  city?: string\n  province?: string\n  specializations: string[]\n  availability_days: string[]\n}\n\nexport default function WorkersPage() {\n  const { success, error: showError } = useNotificationHelpers()\n  \n  const [workers, setWorkers] = useState<Worker[]>([])\n  const [filteredWorkers, setFilteredWorkers] = useState<Worker[]>([])\n  const [loading, setLoading] = useState(true)\n  const [searchTerm, setSearchTerm] = useState('')\n  const [statusFilter, setStatusFilter] = useState<'all' | 'active' | 'inactive'>('all')\n  const [typeFilter, setTypeFilter] = useState<string>('all')\n  const [showStatusDropdown, setShowStatusDropdown] = useState(false)\n  const [showTypeDropdown, setShowTypeDropdown] = useState(false)\n  const [showDeleteModal, setShowDeleteModal] = useState(false)\n  const [workerToDelete, setWorkerToDelete] = useState<string | null>(null)\n\n  useEffect(() => {\n    fetchWorkers()\n  }, [])\n\n  useEffect(() => {\n    filterWorkers()\n  }, [workers, searchTerm, statusFilter, typeFilter])\n\n  // Cerrar dropdowns cuando se hace clic fuera\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      const target = event.target as Element\n      if (!target.closest('.filter-dropdown')) {\n        setShowStatusDropdown(false)\n        setShowTypeDropdown(false)\n      }\n    }\n\n    document.addEventListener('mousedown', handleClickOutside)\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside)\n    }\n  }, [])\n\n  const fetchWorkers = async () => {\n    if (!supabase) {\n      console.error('Supabase client no disponible')\n      setLoading(false)\n      return\n    }\n\n    try {\n      const { data, error } = await supabase\n        .from('workers')\n        .select('id, name, surname, email, phone, worker_type, hourly_rate, is_active, employee_code, address, street_address, postal_code, city, province, specializations, availability_days')\n        .order('created_at', { ascending: false })\n\n      if (error) {\n        console.error('Error al cargar trabajadoras:', error)\n        alert('Error al cargar trabajadoras: ' + JSON.stringify(error))\n      } else {\n        setWorkers(data || [])\n        setFilteredWorkers(data || [])\n      }\n    } catch (error) {\n      console.error('Error inesperado:', error)\n      alert('Error inesperado: ' + JSON.stringify(error))\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const filterWorkers = () => {\n    let filtered = workers\n\n    // Filtrar por búsqueda\n    if (searchTerm) {\n      filtered = filtered.filter(worker =>\n        worker.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        worker.surname.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        worker.email.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        worker.employee_code.toLowerCase().includes(searchTerm.toLowerCase())\n      )\n    }\n\n    // Filtrar por estado\n    if (statusFilter !== 'all') {\n      filtered = filtered.filter(worker =>\n        statusFilter === 'active' ? worker.is_active : !worker.is_active\n      )\n    }\n\n    // Filtrar por tipo de trabajadora\n    if (typeFilter !== 'all') {\n      filtered = filtered.filter(worker => {\n        switch (typeFilter) {\n          case 'regular':\n            return worker.worker_type === 'regular'\n          case 'holidays':\n            return worker.worker_type === 'holidays' || worker.worker_type === 'weekends'\n          case 'flexible':\n            return worker.worker_type === 'flexible'\n          default:\n            return true\n        }\n      })\n    }\n\n    setFilteredWorkers(filtered)\n  }\n\n  const handleDeleteWorker = async (workerId: string) => {\n    setWorkerToDelete(workerId)\n    setShowDeleteModal(true)\n  }\n\n  const confirmDeleteWorker = async () => {\n    if (!supabase || !workerToDelete) return\n    try {\n      const { error } = await supabase.from('workers').delete().eq('id', workerToDelete)\n      if (error) throw error\n      setWorkers(workers.filter(w => w.id !== workerToDelete))\n      setFilteredWorkers(filteredWorkers.filter(w => w.id !== workerToDelete))\n      success('Trabajadora eliminada correctamente')\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Error desconocido'\n      showError('Error al eliminar trabajadora', errorMessage)\n    }\n  }\n\n  const handleToggleActive = async (workerId: string, isActive: boolean) => {\n    if (!supabase) return\n    try {\n      const { error } = await supabase.from('workers').update({ is_active: !isActive }).eq('id', workerId)\n      if (error) throw error\n      setWorkers(workers.map(w => w.id === workerId ? { ...w, is_active: !isActive } : w))\n      setFilteredWorkers(filteredWorkers.map(w => w.id === workerId ? { ...w, is_active: !isActive } : w))\n      success(`Trabajadora ${!isActive ? 'activada' : 'desactivada'} correctamente`)\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Error desconocido'\n      showError('Error al actualizar estado', errorMessage)\n    }\n  }\n\n  const getWorkerTypeLabel = (type: string) => {\n    switch (type) {\n      case 'regular':\n        return 'Laborables'\n      case 'holidays':\n        return 'Festivos'\n      case 'weekends':\n        return 'Festivos'\n      case 'flexible':\n        return 'Flexible'\n      default:\n        return type\n    }\n  }\n\n  const getStatusLabel = (status: string) => {\n    switch (status) {\n      case 'all':\n        return 'Todos los estados'\n      case 'active':\n        return 'Activas'\n      case 'inactive':\n        return 'Inactivas'\n      default:\n        return status\n    }\n  }\n\n  const formatAddress = (worker: Worker) => {\n    if (worker.street_address && worker.city) {\n      const parts = [worker.street_address]\n      if (worker.postal_code) parts.push(worker.postal_code)\n      parts.push(worker.city)\n      if (worker.province && worker.province !== 'Barcelona') parts.push(worker.province)\n      return parts.join(', ')\n    }\n    return worker.address || ''\n  }\n\n  const getTypeLabel = (type: string) => {\n    switch (type) {\n      case 'all':\n        return 'Todos los tipos'\n      case 'regular':\n        return 'Laborables'\n      case 'holidays':\n        return 'Festivos'\n      case 'flexible':\n        return 'Flexible'\n      default:\n        return type\n    }\n  }\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto\"></div>\n          <p className=\"mt-4 text-slate-600\">Cargando trabajadoras...</p>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\n        <div>\n          <h1 className=\"text-2xl sm:text-3xl font-bold text-slate-900 mb-2\">\n            Gestión de Trabajadoras\n          </h1>\n          <p className=\"text-slate-600 text-sm sm:text-base\">\n            Administra el personal de cuidados y sus perfiles\n          </p>\n        </div>\n        <Link href=\"/admin/workers/new\">\n          <Button className=\"bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 shadow-lg w-full sm:w-auto\">\n            <Plus className=\"w-4 h-4 mr-2\" />\n            Nueva Trabajadora\n          </Button>\n        </Link>\n      </div>\n\n      {/* Filters */}\n      <Card className=\"border-0 shadow-lg\">\n        <CardContent className=\"p-6\">\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4\">\n            {/* Search */}\n            <div className=\"relative sm:col-span-2 lg:col-span-1\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-slate-400 w-4 h-4\" />\n              <Input\n                placeholder=\"Buscar trabajadora...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10 border-slate-300 focus:border-blue-500 focus:ring-blue-500\"\n              />\n            </div>\n\n            {/* Status Filter */}\n            <div className=\"relative filter-dropdown\">\n              <Button\n                onClick={() => {\n                  setShowStatusDropdown(!showStatusDropdown)\n                  setShowTypeDropdown(false)\n                }}\n                className=\"w-full justify-between bg-white border border-slate-300 text-slate-700 hover:bg-slate-50\"\n              >\n                <span className=\"flex items-center\">\n                  <Filter className=\"w-4 h-4 mr-2\" />\n                  {getStatusLabel(statusFilter)}\n                </span>\n                <ChevronDown className=\"w-4 h-4\" />\n              </Button>\n              {showStatusDropdown && (\n                <div className=\"absolute z-10 w-full mt-1 bg-white border border-slate-300 rounded-md shadow-lg\">\n                  <div className=\"py-1\">\n                    <button\n                      onClick={() => {\n                        setStatusFilter('all')\n                        setShowStatusDropdown(false)\n                      }}\n                      className=\"block w-full text-left px-4 py-2 text-sm text-slate-700 hover:bg-slate-100\"\n                    >\n                      Todos los estados\n                    </button>\n                    <button\n                      onClick={() => {\n                        setStatusFilter('active')\n                        setShowStatusDropdown(false)\n                      }}\n                      className=\"block w-full text-left px-4 py-2 text-sm text-slate-700 hover:bg-slate-100\"\n                    >\n                      Activas\n                    </button>\n                    <button\n                      onClick={() => {\n                        setStatusFilter('inactive')\n                        setShowStatusDropdown(false)\n                      }}\n                      className=\"block w-full text-left px-4 py-2 text-sm text-slate-700 hover:bg-slate-100\"\n                    >\n                      Inactivas\n                    </button>\n                  </div>\n                </div>\n              )}\n            </div>\n\n            {/* Type Filter */}\n            <div className=\"relative filter-dropdown\">\n              <Button\n                onClick={() => {\n                  setShowTypeDropdown(!showTypeDropdown)\n                  setShowStatusDropdown(false)\n                }}\n                className=\"w-full justify-between bg-white border border-slate-300 text-slate-700 hover:bg-slate-50\"\n              >\n                <span className=\"flex items-center\">\n                  <Filter className=\"w-4 h-4 mr-2\" />\n                  {getTypeLabel(typeFilter)}\n                </span>\n                <ChevronDown className=\"w-4 h-4\" />\n              </Button>\n              {showTypeDropdown && (\n                <div className=\"absolute z-10 w-full mt-1 bg-white border border-slate-300 rounded-md shadow-lg\">\n                  <div className=\"py-1\">\n                    <button\n                      onClick={() => {\n                        setTypeFilter('all')\n                        setShowTypeDropdown(false)\n                      }}\n                      className=\"block w-full text-left px-4 py-2 text-sm text-slate-700 hover:bg-slate-100\"\n                    >\n                      Todos los tipos\n                    </button>\n                    <button\n                      onClick={() => {\n                        setTypeFilter('regular')\n                        setShowTypeDropdown(false)\n                      }}\n                      className=\"block w-full text-left px-4 py-2 text-sm text-slate-700 hover:bg-slate-100\"\n                    >\n                      Laborables\n                    </button>\n                    <button\n                      onClick={() => {\n                        setTypeFilter('holidays')\n                        setShowTypeDropdown(false)\n                      }}\n                      className=\"block w-full text-left px-4 py-2 text-sm text-slate-700 hover:bg-slate-100\"\n                    >\n                      Festivos\n                    </button>\n                    <button\n                      onClick={() => {\n                        setTypeFilter('flexible')\n                        setShowTypeDropdown(false)\n                      }}\n                      className=\"block w-full text-left px-4 py-2 text-sm text-slate-700 hover:bg-slate-100\"\n                    >\n                      Flexible\n                    </button>\n                  </div>\n                </div>\n              )}\n            </div>\n\n            {/* Clear Filters */}\n            <Button\n              onClick={() => {\n                setSearchTerm('')\n                setStatusFilter('all')\n                setTypeFilter('all')\n                setShowStatusDropdown(false)\n                setShowTypeDropdown(false)\n              }}\n              className=\"bg-slate-100 hover:bg-slate-200 text-slate-700 border-0 sm:col-span-2 lg:col-span-1\"\n            >\n              Limpiar Filtros\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Workers List */}\n      <Card className=\"border-0 shadow-lg\">\n        <CardHeader className=\"bg-gradient-to-r from-slate-50 to-slate-100 border-b border-slate-200\">\n          <CardTitle className=\"flex items-center\">\n            <Users className=\"w-5 h-5 mr-2 text-slate-600\" />\n            Trabajadoras ({filteredWorkers.length})\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"p-0\">\n          {filteredWorkers.length === 0 ? (\n            <div className=\"text-center py-12\">\n              <Users className=\"w-16 h-16 text-slate-300 mx-auto mb-4\" />\n              <p className=\"text-slate-500 text-lg\">No se encontraron trabajadoras</p>\n              <p className=\"text-slate-400 text-sm mt-2\">Intenta ajustar los filtros de búsqueda</p>\n            </div>\n          ) : (\n            <>\n              {/* Desktop Table View - Two Rows Layout */}\n              <div className=\"hidden md:block\">\n                <div className=\"space-y-4\">\n                  {filteredWorkers.slice(0, 15).map((worker, index) => (\n                    <div key={worker.id} className={`bg-white border border-slate-200 rounded-xl p-6 shadow-lg hover:shadow-xl transition-all duration-200 transform hover:scale-[1.01] ${index % 2 === 0 ? 'bg-white' : 'bg-slate-50/30'}`}>\n                      {/* Primera línea: Nombre y código */}\n                      <div className=\"flex items-center justify-between mb-4\">\n                        <div className=\"flex items-center\">\n                          <div className=\"w-12 h-12 bg-gradient-to-br from-blue-500 to-indigo-600 rounded-full flex items-center justify-center text-white font-bold text-lg mr-4 shadow-lg\">\n                            {worker.name.charAt(0)}{worker.surname.charAt(0)}\n                          </div>\n                          <div>\n                            <h3 className=\"font-bold text-slate-900 text-lg\">\n                              {worker.name} {worker.surname}\n                            </h3>\n                            <p className=\"text-sm text-slate-500 font-medium\">\n                              {worker.employee_code}\n                            </p>\n                          </div>\n                        </div>\n                        <div className=\"flex gap-3\">\n                          <span className=\"inline-flex items-center px-3 py-1.5 rounded-full text-xs font-bold bg-gradient-to-r from-blue-500 to-blue-600 text-white shadow-md\">\n                            <svg className=\"w-3 h-3 mr-1\" fill=\"currentColor\" viewBox=\"0 0 20 20\"><path fillRule=\"evenodd\" d=\"M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z\" clipRule=\"evenodd\" /></svg>\n                            {getWorkerTypeLabel(worker.worker_type)}\n                          </span>\n                          <span className={`inline-flex items-center px-3 py-1.5 rounded-full text-xs font-bold shadow-md ${worker.is_active ? 'bg-gradient-to-r from-green-500 to-green-600 text-white' : 'bg-gradient-to-r from-red-500 to-red-600 text-white'}`}>\n                            <div className={`w-2 h-2 rounded-full mr-2 ${worker.is_active ? 'bg-green-300' : 'bg-red-300'}`}></div>\n                            {worker.is_active ? 'Activa' : 'Inactiva'}\n                          </span>\n                        </div>\n                      </div>\n                      {/* Segunda línea: Contacto */}\n                      <div className=\"flex items-center space-x-6 mb-2\">\n                        <div className=\"flex items-center\">\n                          <svg className=\"w-4 h-4 text-slate-400 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z\" /></svg>\n                          <span className=\"text-slate-700 font-medium\">{worker.email}</span>\n                        </div>\n                        <div className=\"flex items-center\">\n                          <svg className=\"w-4 h-4 text-slate-400 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z\" /></svg>\n                          <span className=\"text-slate-700 font-medium\">{worker.phone.replace(/^\\+34\\s*/, '')}</span>\n                        </div>\n                      </div>\n                      {/* Tercera línea: Dirección */}\n                      <div className=\"flex items-center space-x-6 mb-4\">\n                        <div className=\"flex items-center\">\n                          <svg className=\"w-4 h-4 text-slate-400 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z\" /><path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 11a3 3 0 11-6 0 3 3 0 016 0z\" /></svg>\n                          <span className=\"text-slate-700 font-medium\">{worker.city || 'Sin ciudad'}</span>\n                        </div>\n                        <div className=\"flex items-center\">\n                          <svg className=\"w-4 h-4 text-slate-400 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2H5a2 2 0 00-2-2z\" /><path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M8 5a2 2 0 012-2h4a2 2 0 012 2v2H8V5z\" /></svg>\n                          <span className=\"text-slate-700 font-medium max-w-xs truncate\" title={formatAddress(worker)}>{formatAddress(worker) || 'Sin dirección'}</span>\n                        </div>\n                      </div>\n                      {/* Acciones */}\n                      <div className=\"flex justify-end gap-2\">\n                        <Link href={`/admin/workers/${worker.id}`}\n                          className=\"inline-flex items-center px-3 py-2 rounded-lg text-sm font-semibold bg-gradient-to-r from-blue-500 to-blue-600 text-white hover:from-blue-600 hover:to-blue-700 transition-all duration-200 shadow-md hover:shadow-lg transform hover:scale-105\">\n                          <svg className=\"w-4 h-4 mr-1\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\" />\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z\" />\n                          </svg>\n                          Ver\n                        </Link>\n                        <Link href={`/admin/workers/${worker.id}/edit`}\n                          className=\"inline-flex items-center px-3 py-2 rounded-lg text-sm font-semibold bg-gradient-to-r from-yellow-500 to-orange-500 text-white hover:from-yellow-600 hover:to-orange-600 transition-all duration-200 shadow-md hover:shadow-lg transform hover:scale-105\">\n                          <svg className=\"w-4 h-4 mr-1\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z\" />\n                          </svg>\n                          Editar\n                        </Link>\n                        <button\n                          onClick={() => handleToggleActive(worker.id, worker.is_active)}\n                          className={`inline-flex items-center px-3 py-2 rounded-lg text-sm font-semibold transition-all duration-200 shadow-md hover:shadow-lg transform hover:scale-105 ${\n                            worker.is_active\n                              ? 'bg-gradient-to-r from-orange-500 to-red-500 text-white hover:from-orange-600 hover:to-red-600'\n                              : 'bg-gradient-to-r from-green-500 to-emerald-500 text-white hover:from-green-600 hover:to-emerald-600'\n                          }`}>\n                          <svg className=\"w-4 h-4 mr-1\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d={worker.is_active ? \"M18.364 18.364A9 9 0 005.636 5.636m12.728 12.728L5.636 5.636m12.728 12.728L18.364 5.636M5.636 18.364l12.728-12.728\" : \"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"} />\n                          </svg>\n                          {worker.is_active ? 'Desactivar' : 'Activar'}\n                        </button>\n                        <button\n                          onClick={() => handleDeleteWorker(worker.id)}\n                          className=\"inline-flex items-center px-3 py-2 rounded-lg text-sm font-semibold bg-gradient-to-r from-red-500 to-pink-500 text-white hover:from-red-600 hover:to-pink-600 transition-all duration-200 shadow-md hover:shadow-lg transform hover:scale-105\">\n                          <svg className=\"w-4 h-4 mr-1\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16\" />\n                          </svg>\n                          Eliminar\n                        </button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n\n              {/* Mobile Cards View */}\n              <div className=\"md:hidden\">\n                <div className=\"space-y-4 p-4\">\n                  {filteredWorkers.slice(0, 15).map((worker) => (\n                    <div key={worker.id} className=\"bg-white border-0 rounded-xl p-6 shadow-lg hover:shadow-xl transition-all duration-200 transform hover:scale-[1.02]\">\n                      {/* Header con avatar y nombre */}\n                      <div className=\"flex items-center mb-4\">\n                        <div className=\"w-12 h-12 bg-gradient-to-br from-blue-500 to-indigo-600 rounded-full flex items-center justify-center text-white font-bold text-lg mr-4 shadow-lg\">\n                          {worker.name.charAt(0)}{worker.surname.charAt(0)}\n                        </div>\n                        <div>\n                          <h3 className=\"font-bold text-slate-900 text-lg\">\n                            {worker.name} {worker.surname}\n                          </h3>\n                          <p className=\"text-xs text-slate-500 font-medium\">\n                            {worker.employee_code}\n                          </p>\n                        </div>\n                      </div>\n                      \n                      {/* Badges debajo del nombre */}\n                      <div className=\"flex gap-2 mb-4\">\n                        <span className=\"inline-flex items-center px-3 py-1.5 rounded-full text-xs font-bold bg-gradient-to-r from-blue-500 to-blue-600 text-white shadow-md\">\n                          <svg className=\"w-3 h-3 mr-1\" fill=\"currentColor\" viewBox=\"0 0 20 20\"><path fillRule=\"evenodd\" d=\"M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z\" clipRule=\"evenodd\" /></svg>\n                          {getWorkerTypeLabel(worker.worker_type)}\n                        </span>\n                        <span className={`inline-flex items-center px-3 py-1.5 rounded-full text-xs font-bold shadow-md ${worker.is_active ? 'bg-gradient-to-r from-green-500 to-green-600 text-white' : 'bg-gradient-to-r from-red-500 to-red-600 text-white'}`}>\n                          <div className={`w-2 h-2 rounded-full mr-2 ${worker.is_active ? 'bg-green-300' : 'bg-red-300'}`}></div>\n                          {worker.is_active ? 'Activa' : 'Inactiva'}\n                        </span>\n                      </div>\n                      \n                      {/* Información de contacto */}\n                      <div className=\"space-y-3 mb-2\">\n                        <div className=\"flex items-center\">\n                          <svg className=\"w-4 h-4 text-slate-400 mr-3\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z\" /></svg>\n                          <p className=\"text-slate-700 font-medium\">{worker.email}</p>\n                        </div>\n                        <div className=\"flex items-center\">\n                          <svg className=\"w-4 h-4 text-slate-400 mr-3\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z\" /></svg>\n                          <p className=\"text-slate-700 font-medium\">{worker.phone.replace(/^\\+34\\s*/, '')}</p>\n                        </div>\n                      </div>\n                      \n                      {/* Dirección */}\n                      <div className=\"space-y-3 mb-4\">\n                        <div className=\"flex items-center\">\n                          <svg className=\"w-4 h-4 text-slate-400 mr-3\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z\" /><path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 11a3 3 0 11-6 0 3 3 0 016 0z\" /></svg>\n                          <p className=\"text-slate-700 font-medium\">{worker.city || 'Sin ciudad'}</p>\n                        </div>\n                        <div className=\"flex items-center\">\n                          <svg className=\"w-4 h-4 text-slate-400 mr-3\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2H5a2 2 0 00-2-2z\" /><path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M8 5a2 2 0 012-2h4a2 2 0 012 2v2H8V5z\" /></svg>\n                          <p className=\"text-slate-700 font-medium text-sm leading-relaxed\">{formatAddress(worker) || 'Sin dirección'}</p>\n                        </div>\n                      </div>\n                      \n                      {/* Botones de acción */}\n                      <div className=\"grid grid-cols-2 gap-3\">\n                        <Link href={`/admin/workers/${worker.id}`}\n                          className=\"inline-flex items-center justify-center px-4 py-3 rounded-lg text-sm font-semibold bg-gradient-to-r from-blue-500 to-blue-600 text-white hover:from-blue-600 hover:to-blue-700 transition-all duration-200 shadow-md hover:shadow-lg transform hover:scale-105\">\n                          <svg className=\"w-4 h-4 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\" />\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z\" />\n                          </svg>\n                          Ver\n                        </Link>\n                        <Link href={`/admin/workers/${worker.id}/edit`}\n                          className=\"inline-flex items-center justify-center px-4 py-3 rounded-lg text-sm font-semibold bg-gradient-to-r from-yellow-500 to-orange-500 text-white hover:from-yellow-600 hover:to-orange-600 transition-all duration-200 shadow-md hover:shadow-lg transform hover:scale-105\">\n                          <svg className=\"w-4 h-4 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z\" />\n                          </svg>\n                          Editar\n                        </Link>\n                        <button\n                          onClick={() => handleToggleActive(worker.id, worker.is_active)}\n                          className={`inline-flex items-center justify-center px-4 py-3 rounded-lg text-sm font-semibold transition-all duration-200 shadow-md hover:shadow-lg transform hover:scale-105 ${\n                            worker.is_active\n                              ? 'bg-gradient-to-r from-orange-500 to-red-500 text-white hover:from-orange-600 hover:to-red-600'\n                              : 'bg-gradient-to-r from-green-500 to-emerald-500 text-white hover:from-green-600 hover:to-emerald-600'\n                          }`}>\n                          <svg className=\"w-4 h-4 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d={worker.is_active ? \"M18.364 18.364A9 9 0 005.636 5.636m12.728 12.728L5.636 5.636m12.728 12.728L18.364 5.636M5.636 18.364l12.728-12.728\" : \"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"} />\n                          </svg>\n                          {worker.is_active ? 'Desactivar' : 'Activar'}\n                        </button>\n                        <button\n                          onClick={() => handleDeleteWorker(worker.id)}\n                          className=\"inline-flex items-center justify-center px-4 py-3 rounded-lg text-sm font-semibold bg-gradient-to-r from-red-500 to-pink-500 text-white hover:from-red-600 hover:to-pink-600 transition-all duration-200 shadow-md hover:shadow-lg transform hover:scale-105\">\n                          <svg className=\"w-4 h-4 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16\" />\n                          </svg>\n                          Eliminar\n                        </button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n              \n              {filteredWorkers.length > 15 && (\n                <div className=\"text-center py-4 border-t border-slate-200\">\n                  <p className=\"text-slate-500 text-sm\">\n                    Mostrando 15 de {filteredWorkers.length} trabajadoras\n                  </p>\n                </div>\n              )}\n            </>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Stats - Moved to bottom */}\n      <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-6 gap-6\">\n        <Card \n          className=\"border-0 shadow-xl bg-gradient-to-br from-blue-500 to-blue-600 hover:shadow-2xl transition-all duration-300 transform hover:scale-105 cursor-pointer\"\n          onClick={() => {\n            setSearchTerm('')\n            setStatusFilter('all')\n            setTypeFilter('all')\n            setShowStatusDropdown(false)\n            setShowTypeDropdown(false)\n          }}\n        >\n          <CardContent className=\"p-5\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-xs font-semibold text-blue-100 uppercase tracking-wide\">Total</p>\n                <p className=\"text-2xl font-bold text-white mt-1\">{workers.length}</p>\n                <p className=\"text-blue-200 text-xs mt-1\">Trabajadoras</p>\n              </div>\n              <div className=\"h-10 w-10 bg-white/20 rounded-full flex items-center justify-center backdrop-blur-sm\">\n                <Users className=\"h-5 w-5 text-white\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card \n          className=\"border-0 shadow-xl bg-gradient-to-br from-emerald-500 to-green-600 hover:shadow-2xl transition-all duration-300 transform hover:scale-105 cursor-pointer\"\n          onClick={() => {\n            setSearchTerm('')\n            setStatusFilter('active')\n            setTypeFilter('all')\n            setShowStatusDropdown(false)\n            setShowTypeDropdown(false)\n          }}\n        >\n          <CardContent className=\"p-5\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-xs font-semibold text-green-100 uppercase tracking-wide\">Activas</p>\n                <p className=\"text-2xl font-bold text-white mt-1\">{workers.filter(w => w.is_active).length}</p>\n                <p className=\"text-green-200 text-xs mt-1\">Disponibles</p>\n              </div>\n              <div className=\"h-10 w-10 bg-white/20 rounded-full flex items-center justify-center backdrop-blur-sm\">\n                <svg className=\"h-5 w-5 text-white\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\" />\n                </svg>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card \n          className=\"border-0 shadow-xl bg-gradient-to-br from-orange-500 to-red-500 hover:shadow-2xl transition-all duration-300 transform hover:scale-105 cursor-pointer\"\n          onClick={() => {\n            setSearchTerm('')\n            setStatusFilter('inactive')\n            setTypeFilter('all')\n            setShowStatusDropdown(false)\n            setShowTypeDropdown(false)\n          }}\n        >\n          <CardContent className=\"p-5\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-xs font-semibold text-orange-100 uppercase tracking-wide\">Inactivas</p>\n                <p className=\"text-2xl font-bold text-white mt-1\">{workers.filter(w => !w.is_active).length}</p>\n                <p className=\"text-orange-200 text-xs mt-1\">No disponibles</p>\n              </div>\n              <div className=\"h-10 w-10 bg-white/20 rounded-full flex items-center justify-center backdrop-blur-sm\">\n                <svg className=\"h-5 w-5 text-white\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M18.364 18.364A9 9 0 005.636 5.636m12.728 12.728L5.636 5.636m12.728 12.728L18.364 5.636M5.636 18.364l12.728-12.728\" />\n                </svg>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card \n          className=\"border-0 shadow-xl bg-gradient-to-br from-purple-500 to-indigo-600 hover:shadow-2xl transition-all duration-300 transform hover:scale-105 cursor-pointer\"\n          onClick={() => {\n            setSearchTerm('')\n            setStatusFilter('all')\n            setTypeFilter('regular')\n            setShowStatusDropdown(false)\n            setShowTypeDropdown(false)\n          }}\n        >\n          <CardContent className=\"p-5\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-xs font-semibold text-purple-100 uppercase tracking-wide\">Laborables</p>\n                <p className=\"text-2xl font-bold text-white mt-1\">\n                  {workers.filter(w => w.worker_type === 'regular').length}\n                </p>\n                <p className=\"text-purple-200 text-xs mt-1\">Días laborables</p>\n              </div>\n              <div className=\"h-10 w-10 bg-white/20 rounded-full flex items-center justify-center backdrop-blur-sm\">\n                <svg className=\"h-5 w-5 text-white\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z\" />\n                </svg>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card \n          className=\"border-0 shadow-xl bg-gradient-to-br from-pink-500 to-rose-600 hover:shadow-2xl transition-all duration-300 transform hover:scale-105 cursor-pointer\"\n          onClick={() => {\n            setSearchTerm('')\n            setStatusFilter('all')\n            setTypeFilter('holidays')\n            setShowStatusDropdown(false)\n            setShowTypeDropdown(false)\n          }}\n        >\n          <CardContent className=\"p-5\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-xs font-semibold text-pink-100 uppercase tracking-wide\">Festivos</p>\n                <p className=\"text-2xl font-bold text-white mt-1\">\n                  {workers.filter(w => w.worker_type === 'holidays' || w.worker_type === 'weekends').length}\n                </p>\n                <p className=\"text-pink-200 text-xs mt-1\">Fines de semana</p>\n              </div>\n              <div className=\"h-10 w-10 bg-white/20 rounded-full flex items-center justify-center backdrop-blur-sm\">\n                <svg className=\"h-5 w-5 text-white\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 3v4M3 5h4M6 17v4m-2-2h4m5-16l2.286 6.857L21 12l-5.714 2.143L13 21l-2.286-6.857L5 12l5.714-2.143L13 3z\" />\n                </svg>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card \n          className=\"border-0 shadow-xl bg-gradient-to-br from-teal-500 to-cyan-600 hover:shadow-2xl transition-all duration-300 transform hover:scale-105 cursor-pointer\"\n          onClick={() => {\n            setSearchTerm('')\n            setStatusFilter('all')\n            setTypeFilter('flexible')\n            setShowStatusDropdown(false)\n            setShowTypeDropdown(false)\n          }}\n        >\n          <CardContent className=\"p-5\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-xs font-semibold text-teal-100 uppercase tracking-wide\">Flexibles</p>\n                <p className=\"text-2xl font-bold text-white mt-1\">\n                  {workers.filter(w => w.worker_type === 'flexible').length}\n                </p>\n                <p className=\"text-teal-200 text-xs mt-1\">Ambos horarios</p>\n              </div>\n              <div className=\"h-10 w-10 bg-white/20 rounded-full flex items-center justify-center backdrop-blur-sm\">\n                <svg className=\"h-5 w-5 text-white\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15\" />\n                </svg>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Modal de Confirmación para Eliminar */}\n      <ConfirmModal\n        isOpen={showDeleteModal}\n        onClose={() => setShowDeleteModal(false)}\n        onConfirm={confirmDeleteWorker}\n        title=\"Eliminar Trabajadora\"\n        message=\"¿Estás seguro de que quieres eliminar esta trabajadora? Esta acción no se puede deshacer.\"\n        confirmText=\"Eliminar\"\n        cancelText=\"Cancelar\"\n        type=\"danger\"\n      />\n    </div>\n  )\n} ","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"/Users/alamia.es/Public/SAD/src/app/api/admin/create-worker/route.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":43,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":43,"endColumn":20,"suggestions":[{"fix":{"range":[1212,1284],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":56,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":56,"endColumn":20,"suggestions":[{"fix":{"range":[1693,1752],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":76,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":76,"endColumn":20,"suggestions":[{"fix":{"range":[2486,2539],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":103,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":103,"endColumn":20,"suggestions":[{"fix":{"range":[3484,3541],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":110,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":110,"endColumn":18,"suggestions":[{"fix":{"range":[3824,3895],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server'\n\n// Importa la librería de Supabase con la service role key\nimport { createClient } from '@supabase/supabase-js'\n\nfunction createSupabaseClient() {\n  const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL\n  const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY\n\n  if (!supabaseUrl || !supabaseKey) {\n    throw new Error('Missing Supabase environment variables')\n  }\n\n  return createClient(supabaseUrl, supabaseKey)\n}\n\nfunction generarPassword(longitud = 12) {\n  const chars = 'ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz23456789!@#$%&*';\n  let password = ''\n  for (let i = 0; i < longitud; i++) {\n    password += chars.charAt(Math.floor(Math.random() * chars.length))\n  }\n  return password\n}\n\nexport async function POST(req: NextRequest) {\n  try {\n    const supabase = createSupabaseClient()\n\n    const body = await req.json()\n    const {\n      email,\n      full_name,\n      phone,\n      worker_type = 'laborable',\n      availability_days = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday'],\n      hourly_rate = 15.00,\n      max_weekly_hours = 40,\n      specializations = []\n    } = body\n\n    if (!email || !full_name || !phone) {\n      console.error('Faltan datos obligatorios', { email, full_name, phone });\n      return NextResponse.json({ error: 'Faltan datos obligatorios (email, nombre completo y teléfono)' }, { status: 400 })\n    }\n\n    const password = generarPassword()\n\n    // 1. Crear usuario en Supabase Auth\n    const { data: userData, error: userError } = await supabase.auth.admin.createUser({\n      email,\n      password,\n      email_confirm: true\n    })\n    if (userError || !userData?.user) {\n      console.error('Error creando usuario en Auth:', userError);\n      return NextResponse.json({ error: userError?.message || 'Error creando usuario en Auth' }, { status: 500 })\n    }\n\n    const userId = userData.user.id\n\n    // 2. Eliminar perfil duplicado si existe\n    await supabase.from('worker_profiles').delete().eq('id', userId)\n    await supabase.from('workers').delete().eq('id', userId)\n\n    // 3. Crear perfil en worker_profiles\n    const { error: profileError } = await supabase.from('worker_profiles').insert({\n      id: userId,\n      email,\n      worker_type,\n      created_at: new Date().toISOString()\n    })\n    if (profileError) {\n      // Si falla el perfil, elimina el usuario creado en Auth para evitar inconsistencias\n      await supabase.auth.admin.deleteUser(userId)\n      console.error('Error creando perfil:', profileError);\n      return NextResponse.json({ error: profileError.message || 'Error creando perfil' }, { status: 500 })\n    }\n\n    // 4. Crear registro en workers con todos los datos\n    const [name, ...surnameParts] = full_name.split(' ')\n    const surname = surnameParts.join(' ')\n    const { error: workersError } = await supabase.from('workers').insert({\n      id: userId,\n      name: name || '',\n      surname: surname || '',\n      phone,\n      email,\n      is_active: true,\n      hire_date: new Date().toISOString(),\n      hourly_rate,\n      max_weekly_hours,\n      specializations,\n      availability_days,\n      worker_type,\n      created_at: new Date().toISOString(),\n      updated_at: new Date().toISOString()\n    })\n    if (workersError) {\n      // Si falla, elimina el usuario y el perfil para evitar inconsistencias\n      await supabase.from('worker_profiles').delete().eq('id', userId)\n      await supabase.auth.admin.deleteUser(userId)\n      console.error('Error creando en workers:', workersError);\n      return NextResponse.json({ error: workersError.message || 'Error creando en workers' }, { status: 500 })\n    }\n\n    // 5. Devuelve la contraseña generada para que la administración la comunique\n    return NextResponse.json({ success: true, password })\n  } catch (error) {\n    console.error('Error en create-worker:', error, JSON.stringify(error));\n    return NextResponse.json({ error: error instanceof Error ? error.message : 'Error desconocido' }, { status: 500 });\n  }\n}","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"/Users/alamia.es/Public/SAD/src/app/api/admin/generate-balance/route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":23,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[991,994],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[991,994],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":52,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":52,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1844,1847],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1844,1847],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from \"next/server\";\nimport { createClient } from \"@/lib/supabase-server\";\nimport { calculateMonthlyBalance, PlanningDay } from \"@/lib/calculateMonthlyBalance\";\n\nexport async function POST(req: NextRequest) {\n  try {\n    const body = await req.json();\n    const { planning, assigned_hours, user_id, worker_id, month, year } = body;\n\n    if (!planning || !assigned_hours || !user_id || !worker_id || !month || !year) {\n      return NextResponse.json({ error: \"Faltan parámetros obligatorios\" }, { status: 400 });\n    }\n\n    // Calcular el balance mensual\n    const balanceResult = calculateMonthlyBalance(planning as PlanningDay[], assigned_hours);\n\n    // Guardar o actualizar el balance en la tabla monthly_balances\n    const supabase = await createClient();\n    if (!supabase) {\n      return NextResponse.json({ error: \"Supabase no está configurado en el servidor\" }, { status: 500 });\n    }\n    // Preparar los datos del balance\n    const balanceData: any = {\n      user_id,\n      worker_id,\n      month,\n      year,\n      assigned_hours: balanceResult.assigned_hours,\n      scheduled_hours: balanceResult.scheduled_hours,\n      balance: balanceResult.balance,\n      status: balanceResult.status,\n      message: balanceResult.message,\n      planning: balanceResult.planning,\n    };\n\n    // Añadir holiday_info solo si está disponible\n    if (balanceResult.holidayInfo) {\n      balanceData.holiday_info = balanceResult.holidayInfo;\n    }\n\n    const { data, error } = await supabase\n      .from(\"monthly_balances\")\n      .upsert([balanceData], { onConflict: \"user_id,worker_id,month,year\" })\n      .select()\n      .single();\n\n    if (error) {\n      return NextResponse.json({ error: error.message }, { status: 500 });\n    }\n\n    return NextResponse.json({ balance: data }, { status: 200 });\n  } catch (err: any) {\n    return NextResponse.json({ error: err.message || \"Error interno\" }, { status: 500 });\n  }\n} ","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"/Users/alamia.es/Public/SAD/src/app/api/admin/test-balance-data/route.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":48,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":48,"endColumn":20,"suggestions":[{"fix":{"range":[1324,1387],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":61,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":61,"endColumn":18,"suggestions":[{"fix":{"range":[1638,1694],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { createClient } from '@/lib/supabase-server';\n\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const userId = searchParams.get('userId');\n    const month = searchParams.get('month');\n    const year = searchParams.get('year');\n\n    if (!userId || !month || !year) {\n      return NextResponse.json(\n        { error: 'Faltan parámetros requeridos: userId, month, year' },\n        { status: 400 }\n      );\n    }\n\n    const supabase = await createClient();\n    if (!supabase) {\n      return NextResponse.json(\n        { error: 'Error de configuración del servidor' },\n        { status: 500 }\n      );\n    }\n\n    // Obtener todas las asignaciones del usuario (no solo las de una trabajadora específica)\n    // Temporalmente sin worker_type hasta que se ejecute la migración\n    const { data: assignments, error: assignmentsError } = await supabase\n      .from('assignments')\n      .select(`\n        *,\n        workers:worker_id (\n          id,\n          name,\n          surname\n        ),\n        users:user_id (\n          id,\n          name,\n          surname,\n          monthly_hours\n        )\n      `)\n      .eq('user_id', userId)\n      .eq('status', 'active');\n\n    if (assignmentsError) {\n      console.error('Error fetching assignments:', assignmentsError);\n      return NextResponse.json(\n        { error: 'Error al obtener las asignaciones' },\n        { status: 500 }\n      );\n    }\n\n    return NextResponse.json({\n      assignments: assignments || [],\n      success: true\n    });\n\n  } catch (error) {\n    console.error('Error in test-balance-data API:', error);\n    return NextResponse.json(\n      { error: 'Error interno del servidor' },\n      { status: 500 }\n    );\n  }\n} ","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"/Users/alamia.es/Public/SAD/src/app/api/holidays/route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":66,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":66,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2101,2104],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2101,2104],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from \"next/server\";\nimport { createClient } from \"@/lib/supabase-server\";\n\nexport async function GET(req: NextRequest) {\n  const { searchParams } = new URL(req.url);\n  const year = Number(searchParams.get(\"year\"));\n  const month = searchParams.get(\"month\") ? Number(searchParams.get(\"month\")) : undefined;\n\n  if (!year) {\n    return NextResponse.json({ error: \"Falta el parámetro year\" }, { status: 400 });\n  }\n\n  const supabase = await createClient();\n  \n  if (!supabase) {\n    return NextResponse.json({ error: \"Error de configuración del servidor\" }, { status: 500 });\n  }\n  \n  // Construir el rango de fechas para el año y mes especificados\n  const startDate = `${year}-${month ? month.toString().padStart(2, '0') : '01'}-01`;\n  const endDate = month \n    ? `${year}-${month.toString().padStart(2, '0')}-31`\n    : `${year}-12-31`;\n  \n  const query = supabase\n    .from(\"holidays\")\n    .select(\"*\")\n    .gte(\"date\", startDate)\n    .lte(\"date\", endDate)\n    .eq(\"is_active\", true);\n    \n  const { data, error } = await query.order(\"date\");\n\n  if (error) {\n    return NextResponse.json({ error: error.message }, { status: 500 });\n  }\n\n  return NextResponse.json({ holidays: data });\n}\n\nexport async function POST(req: NextRequest) {\n  try {\n    const body = await req.json();\n    const { name, date, type, region, city } = body;\n    if (!name || !date) {\n      return NextResponse.json({ error: \"Faltan campos obligatorios: name, date\" }, { status: 400 });\n    }\n    const supabase = await createClient();\n    if (!supabase) {\n      return NextResponse.json({ error: \"Error de configuración del servidor\" }, { status: 500 });\n    }\n    const { data, error } = await supabase.from(\"holidays\").insert([\n      { \n        name, \n        date, \n        type: type || \"local\",\n        region: region || \"Catalunya\",\n        city: city || \"Mataró\",\n        is_active: true\n      }\n    ]).select().single();\n    if (error) {\n      return NextResponse.json({ error: error.message }, { status: 500 });\n    }\n    return NextResponse.json({ holiday: data });\n  } catch (err: any) {\n    return NextResponse.json({ error: err.message || \"Error interno\" }, { status: 500 });\n  }\n}\n\nexport async function DELETE(req: NextRequest) {\n  const { searchParams } = new URL(req.url);\n  const id = searchParams.get(\"id\");\n  if (!id) {\n    return NextResponse.json({ error: \"Falta el parámetro id\" }, { status: 400 });\n  }\n  const supabase = await createClient();\n  if (!supabase) {\n    return NextResponse.json({ error: \"Error de configuración del servidor\" }, { status: 500 });\n  }\n  const { error } = await supabase.from(\"holidays\").delete().eq(\"id\", id);\n  if (error) {\n    return NextResponse.json({ error: error.message }, { status: 500 });\n  }\n  return NextResponse.json({ success: true });\n} ","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"/Users/alamia.es/Public/SAD/src/app/api/worker/monthly-balance/route.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":68,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":68,"endColumn":20,"suggestions":[{"fix":{"range":[1920,1985],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":81,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":81,"endColumn":18,"suggestions":[{"fix":{"range":[2236,2290],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { createClient } from '@/lib/supabase-server';\n\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const workerId = searchParams.get('workerId');\n    const month = searchParams.get('month');\n    const year = searchParams.get('year');\n\n    if (!workerId || !month || !year) {\n      return NextResponse.json(\n        { error: 'Faltan parámetros requeridos: workerId, month, year' },\n        { status: 400 }\n      );\n    }\n\n    const supabase = await createClient();\n\n    if (!supabase) {\n      return NextResponse.json(\n        { error: 'Error de configuración del servidor' },\n        { status: 500 }\n      );\n    }\n\n    // Verificar que el usuario esté autenticado\n    const { data: { user }, error: authError } = await supabase.auth.getUser();\n    if (authError || !user) {\n      return NextResponse.json(\n        { error: 'No autorizado' },\n        { status: 401 }\n      );\n    }\n\n    // Verificar que la trabajadora existe y coincide con el usuario autenticado\n    const { data: worker, error: workerError } = await supabase\n      .from('workers')\n      .select('id, email')\n      .eq('id', workerId)\n      .eq('email', user.email)\n      .single();\n\n    if (workerError || !worker) {\n      return NextResponse.json(\n        { error: 'Trabajadora no encontrada o no autorizada' },\n        { status: 403 }\n      );\n    }\n\n    // Obtener los balances mensuales con información del usuario\n    const { data: balances, error: balancesError } = await supabase\n      .from('monthly_plans')\n      .select(`\n        *,\n        users:user_id (\n          name,\n          surname,\n          address\n        )\n      `)\n      .eq('worker_id', workerId)\n      .eq('month', parseInt(month))\n      .eq('year', parseInt(year))\n      .order('created_at', { ascending: false });\n\n    if (balancesError) {\n      console.error('Error fetching monthly balances:', balancesError);\n      return NextResponse.json(\n        { error: 'Error al obtener los balances mensuales' },\n        { status: 500 }\n      );\n    }\n\n    return NextResponse.json({\n      balances: balances || [],\n      success: true\n    });\n\n  } catch (error) {\n    console.error('Error in monthly balance API:', error);\n    return NextResponse.json(\n      { error: 'Error interno del servidor' },\n      { status: 500 }\n    );\n  }\n} ","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"/Users/alamia.es/Public/SAD/src/app/api/worker/user-balance/route.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":101,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":101,"endColumn":19,"suggestions":[{"fix":{"range":[2915,2973],"text":""},"messageId":"removeConsole","data":{"propertyName":"warn"},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":138,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":138,"endColumn":22,"suggestions":[{"fix":{"range":[4037,4138],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":192,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":192,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6196,6199],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6196,6199],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'workerAssignedHours' is assigned a value but never used.","line":222,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":222,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'workerUsedHours' is assigned a value but never used.","line":223,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":223,"endColumn":26},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":240,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":240,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8244,8247],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8244,8247],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'totalExcessHours' is assigned a value but never used.","line":259,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":259,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'status' is assigned a value but never used.","line":268,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":268,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'percentage' is assigned a value but never used.","line":271,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":271,"endColumn":23},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":322,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":322,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11275,11278],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11275,11278],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":323,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":323,"endColumn":18,"suggestions":[{"fix":{"range":[11286,11337],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { createClient } from '@/lib/supabase-server';\n\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const workerId = searchParams.get('workerId');\n    const month = searchParams.get('month');\n    const year = searchParams.get('year');\n\n    if (!workerId || !month || !year) {\n      return NextResponse.json(\n        { error: 'Faltan parámetros requeridos: workerId, month, year' },\n        { status: 400 }\n      );\n    }\n\n    const supabase = await createClient();\n\n    if (!supabase) {\n      return NextResponse.json(\n        { error: 'Error de configuración del servidor' },\n        { status: 500 }\n      );\n    }\n\n    // Verificar que el usuario esté autenticado\n    const { data: { user }, error: authError } = await supabase.auth.getUser();\n    if (authError || !user) {\n      return NextResponse.json(\n        { error: 'No autorizado' },\n        { status: 401 }\n      );\n    }\n\n    // Verificar que la trabajadora existe y coincide con el usuario autenticado\n    const { data: worker, error: workerError } = await supabase\n      .from('workers')\n      .select('id, email, name')\n      .eq('id', workerId)\n      .eq('email', user.email)\n      .single();\n\n    if (workerError || !worker) {\n      return NextResponse.json(\n        { error: 'Trabajadora no encontrada o no autorizada' },\n        { status: 403 }\n      );\n    }\n\n    // 1. Obtener todas las asignaciones activas de la trabajadora\n    const { data: workerAssignments, error: assignmentsError } = await supabase\n      .from('assignments')\n      .select(`\n        *,\n        users:user_id (\n          id,\n          name,\n          surname,\n          address,\n          phone,\n          monthly_hours\n        )\n      `)\n      .eq('worker_id', workerId)\n      .eq('status', 'active');\n\n    if (assignmentsError) {\n      return NextResponse.json(\n        { error: `Error al obtener asignaciones: ${assignmentsError.message}` },\n        { status: 500 }\n      );\n    }\n\n    if (!workerAssignments || workerAssignments.length === 0) {\n      return NextResponse.json({\n        workerId,\n        workerName: worker.name,\n        month: parseInt(month),\n        year: parseInt(year),\n        userBalances: [],\n        totalAssignedHours: 0,\n        totalUsedHours: 0,\n        totalRemainingHours: 0,\n        overallStatus: 'perfect'\n      });\n    }\n\n    // 2. Obtener festivos del mes\n    const startDate = `${year}-${month.toString().padStart(2, '0')}-01`;\n    const endDate = `${year}-${month.toString().padStart(2, '0')}-${new Date(parseInt(year), parseInt(month), 0).getDate()}`;\n    \n    const { data: holidays, error: holidaysError } = await supabase\n      .from('holidays')\n      .select('date, name, type')\n      .gte('date', startDate)\n      .lte('date', endDate)\n      .eq('is_active', true);\n\n    if (holidaysError) {\n      console.warn('Error al obtener festivos:', holidaysError);\n    }\n\n    const holidayDates = new Set((holidays || []).map(h => new Date(h.date).getDate()));\n\n    // 3. Obtener usuarios únicos de las asignaciones de esta trabajadora\n    const uniqueUserIds = [...new Set(workerAssignments.map(a => a.user_id))];\n\n    // 4. Calcular balance por usuario (considerando TODAS las trabajadoras)\n    const userBalances = [];\n    let totalAssignedHours = 0;\n    let totalUsedHours = 0;\n\n    for (const userId of uniqueUserIds) {\n      // Obtener TODAS las asignaciones de este usuario (de todas las trabajadoras)\n      const { data: allUserAssignments, error: allAssignmentsError } = await supabase\n        .from('assignments')\n        .select(`\n          *,\n          users:user_id (\n            id,\n            name,\n            surname,\n            address,\n            phone,\n            monthly_hours\n          ),\n          workers:worker_id (\n            id,\n            name,\n            surname\n          )\n        `)\n        .eq('user_id', userId)\n        .eq('status', 'active');\n\n      if (allAssignmentsError) {\n        console.error(`Error al obtener todas las asignaciones del usuario ${userId}:`, allAssignmentsError);\n        continue;\n      }\n\n      const user = allUserAssignments?.[0]?.users;\n      if (!user) continue;\n\n      const monthlyHours = user.monthly_hours || 0;\n      \n      // Calcular días del mes\n      const daysInMonth = new Date(parseInt(year), parseInt(month), 0).getDate();\n      let laborableDays = 0;\n      let festivoDays = 0;\n      let laborableHours = 0;\n      let festivoHours = 0;\n      let totalAssignedHoursForUser = 0;\n      let totalUsedHoursForUser = 0;\n      let holidayHours = 0;\n      let workingHours = 0;\n      let totalHolidays = 0;\n      let workingDays = 0;\n\n      // Calcular días laborables y festivos correctamente\n      for (let day = 1; day <= daysInMonth; day++) {\n        const date = new Date(parseInt(year), parseInt(month) - 1, day);\n        const dayOfWeek = date.getDay();\n        const dayNames = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];\n        const dayName = dayNames[dayOfWeek];\n        const isHoliday = holidayDates.has(day);\n        const isWeekend = dayOfWeek === 0 || dayOfWeek === 6;\n        const today = new Date();\n        const isPastDay = date <= today;\n\n        // Lógica correcta: si es festivo (local/nacional) o fin de semana, cuenta como festivo\n        // Si no, cuenta como laborable\n        let isFestivo = false;\n        if (isHoliday) {\n          isFestivo = true;\n        } else if (isWeekend) {\n          isFestivo = true;\n        }\n\n        if (isFestivo) {\n          festivoDays++;\n        } else {\n          laborableDays++;\n        }\n\n        // Calcular horas asignadas por tipo de día\n        allUserAssignments?.forEach(assignment => {\n          if (assignment.schedule && assignment.schedule[isFestivo ? (isHoliday ? 'holiday' : dayName) : dayName]) {\n            const daySchedule = assignment.schedule[isFestivo ? (isHoliday ? 'holiday' : dayName) : dayName];\n            if (daySchedule?.enabled && daySchedule.timeSlots && daySchedule.timeSlots.length > 0) {\n              let dayHours = 0;\n              daySchedule.timeSlots.forEach((slot: any) => {\n                const [startHour, startMin] = slot.start.split(':').map(Number);\n                const [endHour, endMin] = slot.end.split(':').map(Number);\n                const startTime = startHour + startMin / 60;\n                const endTime = endHour + endMin / 60;\n                dayHours += Math.max(0, endTime - startTime);\n              });\n              if (isFestivo) {\n                festivoHours += dayHours;\n              } else {\n                laborableHours += dayHours;\n              }\n              // Solo contar como \"usadas\" si es un día pasado\n              if (isPastDay) {\n                totalUsedHoursForUser += dayHours;\n              }\n              // Contar como \"asignadas\" siempre\n              totalAssignedHoursForUser += dayHours;\n            }\n          }\n        });\n      }\n\n      // Actualizar las variables para usar los nombres correctos\n      workingDays = laborableDays;\n      workingHours = laborableHours;\n      totalHolidays = festivoDays;\n      holidayHours = festivoHours;\n\n      // Calcular horas de esta trabajadora específica con este usuario\n      let workerAssignedHours = 0;\n      let workerUsedHours = 0;\n\n      const workerUserAssignments = workerAssignments.filter(a => a.user_id === userId);\n      \n      for (let day = 1; day <= daysInMonth; day++) {\n        const date = new Date(parseInt(year), parseInt(month) - 1, day);\n        const dayOfWeek = date.getDay();\n        const dayNames = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];\n        const dayName = dayNames[dayOfWeek];\n        const today = new Date();\n        const isPastDay = date <= today;\n\n                 workerUserAssignments.forEach(assignment => {\n           if (assignment.schedule && assignment.schedule[dayName]) {\n             const daySchedule = assignment.schedule[dayName];\n             if (daySchedule?.enabled && daySchedule.timeSlots && daySchedule.timeSlots.length > 0) {\n               let dayHours = 0;\n               daySchedule.timeSlots.forEach((slot: any) => {\n                 const [startHour, startMin] = slot.start.split(':').map(Number);\n                 const [endHour, endMin] = slot.end.split(':').map(Number);\n                 const startTime = startHour + startMin / 60;\n                 const endTime = endHour + endMin / 60;\n                 dayHours += Math.max(0, endTime - startTime);\n               });\n\n              if (isPastDay) {\n                workerUsedHours += dayHours;\n              }\n              workerAssignedHours += dayHours;\n            }\n          }\n        });\n      }\n\n      // Aplicar la lógica de balance: comparar total de horas asignadas al usuario vs horas realizadas\n      const totalRemainingHours = Math.max(0, monthlyHours - totalUsedHoursForUser);\n      const totalExcessHours = Math.max(0, totalUsedHoursForUser - monthlyHours);\n      \n      // Determinar estado basado en el total de horas del usuario\n      let status;\n      if (Math.abs(totalRemainingHours) < 0.1) {\n        status = 'perfect';\n      } else if (totalRemainingHours > 0) {\n        status = 'deficit';\n      } else {\n        status = 'excess';\n      }\n\n      const percentage = monthlyHours > 0 ? (totalUsedHoursForUser / monthlyHours) * 100 : 0;\n\n      userBalances.push({\n        userId,\n        userName: user.name,\n        userSurname: user.surname,\n        userAddress: user.address,\n        userPhone: user.phone,\n        monthlyHours,\n        assignedHours: Math.round(totalAssignedHoursForUser * 10) / 10,\n        usedHours: Math.round(totalUsedHoursForUser * 10) / 10,\n        remainingHours: Math.round(Math.max(0, monthlyHours - totalUsedHoursForUser) * 10) / 10,\n        status: (totalAssignedHoursForUser - monthlyHours) > 0.1 ? 'excess' : (monthlyHours - totalAssignedHoursForUser) > 0.1 ? 'deficit' : 'perfect',\n        percentage: monthlyHours > 0 ? Math.round((totalUsedHoursForUser / monthlyHours) * 1000) / 10 : 0,\n        assignments: workerAssignments.filter(a => a.user_id === userId),\n        holidayInfo: {\n          workingDays,\n          workingHours: Math.round(workingHours * 10) / 10,\n          totalHolidays,\n          holidayHours: Math.round(holidayHours * 10) / 10\n        }\n      });\n\n      totalAssignedHours += totalAssignedHoursForUser;\n      totalUsedHours += totalUsedHoursForUser;\n    }\n\n    const totalRemainingHours = totalAssignedHours - totalUsedHours;\n    \n    // Determinar estado general\n    let overallStatus;\n    if (Math.abs(totalRemainingHours) < 0.1) {\n      overallStatus = 'perfect';\n    } else if (totalRemainingHours > 0) {\n      overallStatus = 'deficit';\n    } else {\n      overallStatus = 'excess';\n    }\n\n    return NextResponse.json({\n      workerId,\n      workerName: worker.name,\n      month: parseInt(month),\n      year: parseInt(year),\n      userBalances,\n      totalAssignedHours: Math.round(totalAssignedHours * 10) / 10,\n      totalUsedHours: Math.round(totalUsedHours * 10) / 10,\n      totalRemainingHours: Math.round(totalRemainingHours * 10) / 10,\n      overallStatus\n    });\n\n  } catch (error: any) {\n    console.error('Error en user-balance API:', error);\n    return NextResponse.json(\n      { error: error.message || 'Error interno del servidor' },\n      { status: 500 }\n    );\n  }\n} ","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"/Users/alamia.es/Public/SAD/src/app/dashboard/assignments/[id]/edit/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":30,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":68,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":68,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport { useState, useEffect } from 'react'\nimport { useRouter } from 'next/navigation'\nimport { useAssignments } from '@/hooks/useAssignments'\nimport { useToast } from '@/components/ui/toast'\nimport { AssignmentForm, AssignmentFormData } from '@/components/AssignmentForm'\nimport { Assignment } from '@/lib/types'\nimport { ArrowLeft, Users, Clock, Calendar, FileText } from 'lucide-react'\nimport Link from 'next/link'\n\nexport default function EditAssignmentPage({ params }: { params: Promise<{ id: string }> }) {\n  const router = useRouter()\n  const { getAssignmentById, updateAssignment } = useAssignments()\n  const { showToast, ToastComponent } = useToast()\n  const [assignment, setAssignment] = useState<Assignment | null>(null)\n  const [loading, setLoading] = useState(true)\n\n  useEffect(() => {\n    const fetchAssignment = async () => {\n      try {\n        const resolvedParams = await params\n        const result = await getAssignmentById(resolvedParams.id)\n        if (result.data) {\n          setAssignment(result.data)\n        } else {\n          // console.error('No se encontró la asignación')\n          router.push('/dashboard/assignments')\n        }\n      } catch (error) {\n        // console.error('Error al cargar la asignación:', error)\n        router.push('/dashboard/assignments')\n      } finally {\n        setLoading(false)\n      }\n    }\n\n    fetchAssignment()\n  }, [params, getAssignmentById, router])\n\n  const handleSubmit = async (formData: AssignmentFormData) => {\n    try {\n      const resolvedParams = await params\n      \n      // Convertir TimeSlot[] a string[] para la base de datos\n      const convertedSchedule: Record<string, string[]> = {}\n      Object.entries(formData.specific_schedule).forEach(([day, timeSlots]) => {\n        convertedSchedule[day] = timeSlots.map(slot => [slot.start, slot.end]).flat()\n      })\n      \n      const updateData = {\n        start_date: formData.start_date,\n        specific_schedule: convertedSchedule,\n        priority: formData.priority,\n        status: formData.status,\n        notes: formData.notes?.trim() || undefined,\n        end_date: formData.end_date || undefined\n      };\n      \n      const result = await updateAssignment(resolvedParams.id, updateData)\n      \n      if (result && !result.error) {\n        showToast('Asignación actualizada correctamente', 'success')\n        router.push('/dashboard/assignments')\n      } else {\n        showToast('Error al actualizar la asignación', 'error')\n      }\n    } catch (error) {\n      // console.error('Error al guardar:', error)\n      showToast('Error al guardar los cambios', 'error')\n    }\n  }\n\n  const handleCancel = () => {\n    router.push('/dashboard/assignments')\n  }\n\n  if (loading) {\n    return (\n      <div className=\"container mx-auto p-6\">\n        <div className=\"flex justify-center items-center h-64\">\n          <div className=\"text-lg\">Cargando...</div>\n        </div>\n      </div>\n    )\n  }\n\n  if (!assignment) {\n    return (\n      <div className=\"container mx-auto p-6\">\n        <div className=\"flex justify-center items-center h-64\">\n          <div className=\"text-lg\">Asignación no encontrada</div>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"min-h-screen bg-slate-50 pb-24\">\n      {/* Header sticky mobile-first */}\n      <header className=\"sticky top-0 z-40 bg-white shadow-sm border-b border-slate-200\">\n        <div className=\"max-w-2xl mx-auto px-4\">\n          <div className=\"flex items-center py-4\">\n            <button onClick={() => router.back()} className=\"mr-2 px-2 py-1 rounded bg-slate-100 hover:bg-slate-200\">\n              <ArrowLeft className=\"w-4 h-4\" />\n            </button>\n            <h1 className=\"text-xl font-bold text-slate-900 truncate flex-1\">Editar Asignación</h1>\n          </div>\n        </div>\n      </header>\n      <div className=\"max-w-2xl mx-auto px-4 sm:px-6 lg:px-8 py-4\">\n        <AssignmentForm\n          assignment={assignment}\n          isEditing={true}\n          onSubmit={handleSubmit}\n          onCancel={handleCancel}\n        />\n        {ToastComponent}\n      </div>\n      {/* Footer de navegación fijo */}\n      <footer className=\"fixed bottom-0 left-0 right-0 z-30 bg-white border-t border-slate-200 shadow-lg\">\n        <nav className=\"flex justify-around py-3\">\n          <Link href=\"/dashboard/users\" className=\"flex flex-col items-center text-xs text-slate-600 hover:text-blue-600 transition-colors\">\n            <Users className=\"w-5 h-5 mb-1\" />\n            <span className=\"hidden sm:inline\">Usuarios</span>\n          </Link>\n          <Link href=\"/dashboard/workers\" className=\"flex flex-col items-center text-xs text-slate-600 hover:text-green-600 transition-colors\">\n            <Users className=\"w-5 h-5 mb-1\" />\n            <span className=\"hidden sm:inline\">Trabajadoras</span>\n          </Link>\n          <Link href=\"/dashboard/assignments\" className=\"flex flex-col items-center text-xs text-blue-600 transition-colors\">\n            <Clock className=\"w-5 h-5 mb-1\" />\n            <span className=\"hidden sm:inline\">Asignaciones</span>\n          </Link>\n          <Link href=\"/dashboard/planning\" className=\"flex flex-col items-center text-xs text-slate-600 hover:text-blue-600 transition-colors\">\n            <Calendar className=\"w-5 h-5 mb-1\" />\n            <span className=\"hidden sm:inline\">Planning</span>\n          </Link>\n          <Link href=\"/dashboard/settings\" className=\"flex flex-col items-center text-xs text-slate-600 hover:text-slate-800 transition-colors\">\n            <FileText className=\"w-5 h-5 mb-1\" />\n            <span className=\"hidden sm:inline\">Configuración</span>\n          </Link>\n        </nav>\n      </footer>\n      <div className=\"h-20\"></div>\n    </div>\n  )\n} ","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"/Users/alamia.es/Public/SAD/src/app/dashboard/assignments/[id]/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'deleteAssignment' is assigned a value but never used.","line":53,"column":30,"nodeType":null,"messageId":"unusedVar","endLine":53,"endColumn":46},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'showToast' is assigned a value but never used.","line":54,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":54,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'formatSchedule' is assigned a value but never used.","line":139,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":139,"endColumn":23}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport { useState, useEffect } from 'react'\nimport { useParams, useRouter } from 'next/navigation'\nimport Link from 'next/link'\nimport { Button } from '@/components/ui/button'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { useAssignments } from '@/hooks/useAssignments'\nimport { useToast } from '@/components/ui/toast'\nimport { formatScheduleOrdered } from '@/lib/utils'\nimport { ScheduleDisplay } from '@/components/ScheduleDisplay'\nimport { \n  ArrowLeft, \n  Edit, \n  Users, \n  Clock, \n  Calendar,\n  Phone,\n  AlertTriangle,\n  CheckCircle,\n  Pause,\n  XCircle,\n  Euro,\n  FileText\n} from 'lucide-react'\nimport { Assignment, AssignmentStatus } from '@/lib/types'\n\nconst statusColors: Record<AssignmentStatus, string> = {\n  active: 'bg-green-100 text-green-800',\n  paused: 'bg-yellow-100 text-yellow-800',\n  completed: 'bg-blue-100 text-blue-800',\n  cancelled: 'bg-red-100 text-red-800'\n}\n\nconst statusIcons: Record<AssignmentStatus, React.ComponentType<{ className?: string }>> = {\n  active: CheckCircle,\n  paused: Pause,\n  completed: CheckCircle,\n  cancelled: XCircle\n}\n\nconst priorityColors: Record<number, string> = {\n  1: 'bg-red-100 text-red-800',\n  2: 'bg-yellow-100 text-yellow-800',\n  3: 'bg-green-100 text-green-800'\n}\n\nexport default function AssignmentDetailPage() {\n  const params = useParams()\n  const router = useRouter()\n  const assignmentId = params.id as string\n  \n  const { getAssignmentById, deleteAssignment } = useAssignments()\n  const { showToast, ToastComponent } = useToast()\n  \n  const [assignment, setAssignment] = useState<Assignment | null>(null)\n  const [isLoading, setIsLoading] = useState(true)\n  const [error, setError] = useState<string | null>(null)\n  // const [isDeleting, setIsDeleting] = useState(false)\n\n  useEffect(() => {\n    const fetchAssignment = async () => {\n      try {\n        setIsLoading(true)\n        setError(null)\n        \n        const { data, error } = await getAssignmentById(assignmentId)\n        \n        if (error) {\n          setError(error)\n        } else if (data) {\n          setAssignment(data)\n        } else {\n          setError('Asignación no encontrada')\n        }\n      } catch {\n        setError('Error al cargar la asignación')\n      } finally {\n        setIsLoading(false)\n      }\n    }\n\n    if (assignmentId) {\n      fetchAssignment()\n    }\n  }, [assignmentId, getAssignmentById])\n\n  // const handleDelete = async () => {\n  //   if (!assignment) return\n    \n  //   if (!confirm(`¿Estás segura de que quieres eliminar esta asignación?\\n\\nEsta acción no se puede deshacer.`)) {\n  //     return\n  //   }\n\n  //   setIsDeleting(true)\n  //   try {\n  //     const { error } = await deleteAssignment(assignment.id)\n  //     if (error) {\n  //         showToast(`Error al eliminar: ${error}`, 'error')\n  //     } else {\n  //         showToast('Asignación eliminada correctamente', 'success')\n  //         router.push('/dashboard/assignments')\n  //     }\n  //   } catch {\n  //     showToast('Error inesperado al eliminar', 'error')\n  //   } finally {\n  //     setIsDeleting(false)\n  //   }\n  // }\n\n  const getStatusText = () => {\n    switch (assignment?.status) {\n      case 'active':\n        return 'Activa'\n      case 'paused':\n        return 'Pausada'\n      case 'completed':\n        return 'Completada'\n      case 'cancelled':\n        return 'Cancelada'\n      default:\n        return 'Desconocido'\n    }\n  }\n\n  const getPriorityText = () => {\n    switch (assignment?.priority) {\n      case 1:\n        return 'Alta'\n      case 2:\n        return 'Media'\n      case 3:\n        return 'Baja'\n      default:\n        return 'No especificada'\n    }\n  }\n\n  const formatSchedule = (schedule: Record<string, string[][]> | undefined) => {\n    const dayNames: Record<string, string> = {\n      monday: 'Lunes',\n      tuesday: 'Martes',\n      wednesday: 'Miércoles',\n      thursday: 'Jueves',\n      friday: 'Viernes',\n      saturday: 'Sábado',\n      sunday: 'Domingo'\n    }\n    return formatScheduleOrdered(schedule, dayNames)\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-slate-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n          <p className=\"text-slate-600\">Cargando asignación...</p>\n        </div>\n      </div>\n    )\n  }\n\n  if (error || !assignment) {\n    return (\n      <div className=\"min-h-screen bg-slate-50 flex items-center justify-center\">\n        <Card>\n          <CardContent className=\"p-6 text-center\">\n            <AlertTriangle className=\"w-12 h-12 text-red-500 mx-auto mb-4\" />\n            <p className=\"text-red-600 mb-4\">\n              {error || 'Asignación no encontrada'}\n            </p>\n            <Link href=\"/dashboard/assignments\">\n              <Button>Volver a Asignaciones</Button>\n            </Link>\n          </CardContent>\n        </Card>\n      </div>\n    )\n  }\n\n  const StatusIcon = statusIcons[assignment.status]\n\n  return (\n    <div className=\"min-h-screen bg-slate-50 pb-24\">\n      {/* Header sticky mobile-first */}\n      <header className=\"sticky top-0 z-40 bg-white shadow-sm border-b border-slate-200\">\n        <div className=\"max-w-2xl mx-auto px-4\">\n          <div className=\"flex items-center py-4\">\n            <Button variant=\"secondary\" size=\"sm\" onClick={() => router.back()} className=\"mr-2\">\n              <ArrowLeft className=\"w-4 h-4 mr-1\" /> Volver\n            </Button>\n            <h1 className=\"text-xl font-bold text-slate-900 truncate flex-1\">Detalle de Asignación</h1>\n            <Link href={`/dashboard/assignments/${assignment.id}/edit`}>\n              <Button variant=\"secondary\" size=\"sm\" className=\"ml-2\">\n                <Edit className=\"w-4 h-4 mr-2\" />\n                Editar\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </header>\n\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-4\">\n        <div className=\"grid gap-6\">\n          {/* Status and Priority */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Users className=\"w-5 h-5 mr-2\" />\n                Estado y Prioridad\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex items-center space-x-4\">\n                <span className={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium ${statusColors[assignment.status]}`}>\n                  <StatusIcon className=\"w-4 h-4 mr-2\" />\n                  {getStatusText()}\n                </span>\n                <span className={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium ${priorityColors[assignment.priority]}`}>\n                  Prioridad {getPriorityText()}\n                </span>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Assignment Details */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Clock className=\"w-5 h-5 mr-2\" />\n                Detalles de la Asignación\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div>\n                  <h4 className=\"font-medium text-slate-900 mb-3\">Información General</h4>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center text-sm\">\n                      <Clock className=\"w-4 h-4 mr-2 text-slate-500\" />\n                      <span className=\"text-slate-600\">Horas por semana:</span>\n                      <span className=\"ml-2 font-medium\">{assignment.weekly_hours}h</span>\n                    </div>\n                    <div className=\"flex items-center text-sm\">\n                      <Calendar className=\"w-4 h-4 mr-2 text-slate-500\" />\n                      <span className=\"text-slate-600\">Fecha de inicio:</span>\n                      <span className=\"ml-2 font-medium\">\n                        {new Date(assignment.start_date).toLocaleDateString('es-ES')}\n                      </span>\n                    </div>\n                    {assignment.end_date && (\n                      <div className=\"flex items-center text-sm\">\n                        <Calendar className=\"w-4 h-4 mr-2 text-slate-500\" />\n                        <span className=\"text-slate-600\">Fecha de fin:</span>\n                        <span className=\"ml-2 font-medium\">\n                          {new Date(assignment.end_date).toLocaleDateString('es-ES')}\n                        </span>\n                      </div>\n                    )}\n                    <div className=\"flex items-center text-sm\">\n                      <Euro className=\"w-4 h-4 mr-2 text-slate-500\" />\n                      <span className=\"text-slate-600\">Tarifa por hora:</span>\n                      <span className=\"ml-2 font-medium\">{assignment.worker?.hourly_rate || 0}€</span>\n                    </div>\n                  </div>\n                </div>\n                \n                <div>\n                  <h4 className=\"font-medium text-slate-900 mb-3\">Horario Específico</h4>\n                  <div className=\"bg-slate-50 rounded-lg p-3\">\n                    <ScheduleDisplay\n                      schedule={\n                        assignment.schedule\n                          ? Object.fromEntries(\n                              Object.entries(assignment.schedule).map(([day, value]) => [\n                                day,\n                                value.enabled ? value.timeSlots : []\n                              ])\n                            )\n                          : undefined\n                      }\n                      showIcon={false}\n                      layout=\"rows\"\n                    />\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Worker Information */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Users className=\"w-5 h-5 mr-2\" />\n                Información de la Trabajadora\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {assignment.worker ? (\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div>\n                    <h4 className=\"font-medium text-slate-900 mb-3\">\n                      {assignment.worker.name} {assignment.worker.surname}\n                    </h4>\n                    <div className=\"space-y-3\">\n                      <div className=\"flex items-center text-sm\">\n                        <Phone className=\"w-4 h-4 mr-2 text-slate-500\" />\n                        <span className=\"text-slate-600\">{assignment.worker.phone}</span>\n                      </div>\n                      <div className=\"flex items-center text-sm\">\n                        <Euro className=\"w-4 h-4 mr-2 text-slate-500\" />\n                        <span className=\"text-slate-600\">Tarifa:</span>\n                        <span className=\"ml-2 font-medium\">{assignment.worker.hourly_rate}€/h</span>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div>\n                    <h4 className=\"font-medium text-slate-900 mb-3\">Especializaciones</h4>\n                    <div className=\"flex flex-wrap gap-2\">\n                      {assignment.worker.specializations.map((spec) => (\n                        <span\n                          key={spec}\n                          className=\"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800\"\n                        >\n                          {spec}\n                        </span>\n                      ))}\n                    </div>\n                  </div>\n                </div>\n              ) : (\n                <p className=\"text-slate-500\">Información de trabajadora no disponible</p>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* User Information */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Users className=\"w-5 h-5 mr-2\" />\n                Información del Usuario\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {assignment.user ? (\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div>\n                    <h4 className=\"font-medium text-slate-900 mb-3\">\n                      {assignment.user.name} {assignment.user.surname}\n                    </h4>\n                    <div className=\"space-y-3\">\n                      <div className=\"flex items-center text-sm\">\n                        <Phone className=\"w-4 h-4 mr-2 text-slate-500\" />\n                        <span className=\"text-slate-600\">{assignment.user.phone}</span>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div>\n                    <h4 className=\"font-medium text-slate-900 mb-3\">Información Adicional</h4>\n                    <div className=\"space-y-3\">\n                      <div className=\"flex items-center text-sm\">\n                        <span className=\"text-slate-600\">Estado:</span>\n                        <span className={`ml-2 px-2 py-1 rounded-full text-xs font-medium ${\n                          assignment.user.is_active \n                            ? 'bg-green-100 text-green-800' \n                            : 'bg-red-100 text-red-800'\n                        }`}>\n                          {assignment.user.is_active ? 'Activo' : 'Inactivo'}\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              ) : (\n                <p className=\"text-slate-500\">Información de usuario no disponible</p>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Notes */}\n          {assignment.notes && (\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <FileText className=\"w-5 h-5 mr-2\" />\n                  Notas\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"bg-blue-50 rounded-lg p-4\">\n                  <p className=\"text-slate-700 whitespace-pre-wrap\">{assignment.notes}</p>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n      </div>\n      {ToastComponent}\n      {/* Footer de navegación fijo */}\n      <footer className=\"fixed bottom-0 left-0 right-0 z-30 bg-white border-t border-slate-200 shadow-lg\">\n        <nav className=\"flex justify-around py-3\">\n          <Link href=\"/dashboard/users\" className=\"flex flex-col items-center text-xs text-slate-600 hover:text-blue-600 transition-colors\">\n            <Users className=\"w-5 h-5 mb-1\" />\n            <span className=\"hidden sm:inline\">Usuarios</span>\n          </Link>\n          <Link href=\"/dashboard/workers\" className=\"flex flex-col items-center text-xs text-slate-600 hover:text-green-600 transition-colors\">\n            <Users className=\"w-5 h-5 mb-1\" />\n            <span className=\"hidden sm:inline\">Trabajadoras</span>\n          </Link>\n          <Link href=\"/dashboard/assignments\" className=\"flex flex-col items-center text-xs text-blue-600 transition-colors\">\n            <Clock className=\"w-5 h-5 mb-1\" />\n            <span className=\"hidden sm:inline\">Asignaciones</span>\n          </Link>\n          <Link href=\"/dashboard/planning\" className=\"flex flex-col items-center text-xs text-slate-600 hover:text-blue-600 transition-colors\">\n            <Calendar className=\"w-5 h-5 mb-1\" />\n            <span className=\"hidden sm:inline\">Planning</span>\n          </Link>\n          <Link href=\"/dashboard/settings\" className=\"flex flex-col items-center text-xs text-slate-600 hover:text-slate-800 transition-colors\">\n            <FileText className=\"w-5 h-5 mb-1\" />\n            <span className=\"hidden sm:inline\">Configuración</span>\n          </Link>\n        </nav>\n      </footer>\n      <div className=\"h-20\"></div>\n    </div>\n  )\n} ","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"/Users/alamia.es/Public/SAD/src/app/dashboard/assignments/new/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Assignment' is defined but never used.","line":7,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":25}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport { useRouter, useSearchParams } from 'next/navigation'\nimport { useAssignments } from '@/hooks/useAssignments'\nimport { useToast } from '@/components/ui/toast'\nimport { AssignmentForm, AssignmentFormData } from '@/components/AssignmentForm'\nimport type { Assignment } from '@/lib/types'\nimport { Plus, Users, User, Clock, Calendar, FileText } from 'lucide-react'\nimport Link from 'next/link'\nimport { Suspense } from 'react'\n\n// Configuración para evitar el prerender estático\nexport const dynamic = 'force-dynamic'\nexport const runtime = 'edge'\nexport const preferredRegion = 'iad1'\n\nfunction NewAssignmentContent() {\n  const router = useRouter()\n  const searchParams = useSearchParams()\n  const { createAssignment, checkDuplicateAssignment, suggestNewStartDate } = useAssignments()\n  const { showToast, ToastComponent } = useToast()\n\n  // Leer user_id y worker_id de la URL\n  const userId = searchParams.get('user_id') || undefined\n  const workerId = searchParams.get('worker_id') || undefined\n\n  const handleSubmit = async (formData: AssignmentFormData) => {\n    try {\n      // Check for duplicate assignment first\n      const duplicate = await checkDuplicateAssignment({\n        worker_id: formData.worker_id,\n        user_id: formData.user_id,\n        start_date: formData.start_date\n      })\n\n      if (duplicate) {\n        const suggestedDate = suggestNewStartDate(formData.start_date)\n        showToast(\n          `Ya existe una asignación para esta trabajadora, usuario y fecha de inicio. Sugerencia: Cambia la fecha de inicio a ${suggestedDate}`,\n          'warning'\n        )\n        return\n      }\n\n      // Convertir TimeSlot[] a string[] para la base de datos\n      const convertedSchedule: Record<string, string[]> = {}\n      Object.entries(formData.specific_schedule).forEach(([day, timeSlots]) => {\n        convertedSchedule[day] = timeSlots.map(slot => [slot.start, slot.end]).flat()\n      })\n      \n      const { error, conflicts } = await createAssignment({\n        worker_id: formData.worker_id,\n        user_id: formData.user_id,\n        weekly_hours: formData.assigned_hours_per_week,\n        start_date: formData.start_date,\n        end_date: formData.end_date || undefined,\n        priority: formData.priority,\n        status: formData.status,\n        notes: formData.notes?.trim() || undefined,\n        specific_schedule: convertedSchedule\n      })\n\n      if (conflicts && conflicts.length > 0) {\n        const conflictDetails = conflicts.map((conflict) => {\n          return `• Usuario: ${conflict.user?.name} ${conflict.user?.surname}`\n        }).join('\\n')\n        \n        showToast(\n          `Se detectaron ${conflicts.length} conflicto(s) de horario:\\n${conflictDetails}`, \n          'warning'\n        )\n        return\n      }\n\n      if (error) {\n        showToast(`Error al crear asignación: ${error}`, 'error')\n      } else {\n        showToast('Asignación creada correctamente', 'success')\n        router.push('/dashboard/assignments')\n      }\n    } catch {\n      showToast('Error inesperado al crear asignación', 'error')\n    }\n  }\n\n  const handleCancel = () => {\n    router.push('/dashboard/assignments')\n  }\n\n  return (\n    <div className=\"min-h-screen bg-slate-50 pb-24\">\n      {/* Header sticky mobile-first */}\n      <header className=\"sticky top-0 z-40 bg-white shadow-sm border-b border-slate-200\">\n        <div className=\"max-w-2xl mx-auto px-4\">\n          <div className=\"flex items-center py-4\">\n            <button onClick={() => router.back()} className=\"mr-2 px-2 py-1 rounded bg-slate-100 hover:bg-slate-200\">\n              <Plus className=\"w-4 h-4\" />\n            </button>\n            <h1 className=\"text-xl font-bold text-slate-900 truncate flex-1\">Nueva Asignación</h1>\n          </div>\n        </div>\n      </header>\n      <div className=\"max-w-2xl mx-auto px-4 sm:px-6 lg:px-8 py-4\">\n        <AssignmentForm\n          isEditing={false}\n          onSubmit={handleSubmit}\n          onCancel={handleCancel}\n          userId={userId}\n          workerId={workerId}\n        />\n        {ToastComponent}\n      </div>\n      {/* Footer de navegación fijo */}\n      <footer className=\"fixed bottom-0 left-0 right-0 z-30 bg-white border-t border-slate-200 shadow-lg\">\n        <nav className=\"flex justify-around py-3\">\n          <Link href=\"/dashboard/users\" className=\"flex flex-col items-center text-xs text-slate-600 hover:text-blue-600 transition-colors\">\n            <User className=\"w-5 h-5 mb-1\" />\n            <span className=\"hidden sm:inline\">Usuarios</span>\n          </Link>\n          <Link href=\"/dashboard/workers\" className=\"flex flex-col items-center text-xs text-slate-600 hover:text-green-600 transition-colors\">\n            <Users className=\"w-5 h-5 mb-1\" />\n            <span className=\"hidden sm:inline\">Trabajadoras</span>\n          </Link>\n          <Link href=\"/dashboard/assignments\" className=\"flex flex-col items-center text-xs text-blue-600 transition-colors\">\n            <Clock className=\"w-5 h-5 mb-1\" />\n            <span className=\"hidden sm:inline\">Asignaciones</span>\n          </Link>\n          <Link href=\"/dashboard/planning\" className=\"flex flex-col items-center text-xs text-slate-600 hover:text-blue-600 transition-colors\">\n            <Calendar className=\"w-5 h-5 mb-1\" />\n            <span className=\"hidden sm:inline\">Planning</span>\n          </Link>\n          <Link href=\"/dashboard/settings\" className=\"flex flex-col items-center text-xs text-slate-600 hover:text-slate-800 transition-colors\">\n            <FileText className=\"w-5 h-5 mb-1\" />\n            <span className=\"hidden sm:inline\">Configuración</span>\n          </Link>\n        </nav>\n      </footer>\n      <div className=\"h-20\"></div>\n    </div>\n  )\n}\n\nexport default function NewAssignmentPage() {\n  return (\n    <Suspense fallback={\n      <div className=\"min-h-screen bg-slate-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n          <p className=\"text-slate-600\">Cargando...</p>\n        </div>\n      </div>\n    }>\n      <NewAssignmentContent />\n    </Suspense>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"/Users/alamia.es/Public/SAD/src/app/dashboard/assignments/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ScheduleCards' is defined but never used.","line":13,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":40},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Edit' is defined but never used.","line":18,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Eye' is defined but never used.","line":28,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":6},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleDeleteClick' is assigned a value but never used.","line":92,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":92,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'formatSchedule' is assigned a value but never used.","line":185,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":185,"endColumn":23},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":185,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":185,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5271,5274],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5271,5274],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport { useState, useEffect } from 'react'\nimport { useRouter } from 'next/navigation'\nimport Link from 'next/link'\nimport { Button } from '@/components/ui/button'\nimport { Card, CardContent } from '@/components/ui/card'\n// import { Modal } from '@/components/ui/modal'\nimport { useToast } from '@/components/ui/toast'\nimport { useAssignments } from '@/hooks/useAssignments'\nimport { supabase } from '@/lib/supabase'\nimport { formatScheduleOrdered } from '@/lib/utils'\nimport { ScheduleDisplay, ScheduleCards } from '@/components/ScheduleDisplay'\n\nimport { \n  ArrowLeft, \n  Plus, \n  Edit, \n  Trash2, \n  Clock, \n  Calendar, \n  Users, \n  AlertTriangle,\n  CheckCircle,\n  XCircle,\n  Pause,\n  Phone,\n  Eye,\n  Settings,\n  LogOut,\n  Menu,\n  User,\n  Search\n} from 'lucide-react'\nimport { Assignment, AssignmentStatus } from '@/lib/types'\n\n// Configuración para evitar el prerender estático\nexport const dynamic = 'force-dynamic'\n\n\nconst statusLabels: Record<AssignmentStatus, string> = {\n  active: 'Activa',\n  paused: 'Pausada',\n  completed: 'Completada',\n  cancelled: 'Cancelada'\n}\n\nconst statusColors: Record<AssignmentStatus, string> = {\n  active: 'bg-success-100 text-success-800',\n  paused: 'bg-warning-100 text-warning-800',\n  completed: 'bg-primary-100 text-primary-800',\n  cancelled: 'bg-error-100 text-error-800'\n}\n\nconst priorityColors: Record<number, string> = {\n  1: 'bg-error-100 text-error-800',\n  2: 'bg-warning-100 text-warning-800',\n  3: 'bg-success-100 text-success-800'\n}\n\nexport default function AssignmentsPage() {\n  const router = useRouter()\n  const { assignments, isLoading, error, deleteAssignment, getAssignmentStats } = useAssignments()\n  const { showToast, ToastComponent } = useToast()\n  const [deletingId, setDeletingId] = useState<string | null>(null)\n  const [filter, setFilter] = useState<'all' | 'active' | 'paused' | 'completed'>('all')\n  const [showDeleteModal, setShowDeleteModal] = useState(false)\n  const [assignmentToDelete, setAssignmentToDelete] = useState<Assignment | null>(null)\n  const [showMobileMenu, setShowMobileMenu] = useState(false)\n  const [searchValue, setSearchValue] = useState('')\n\n  const stats = getAssignmentStats()\n\n  // Cerrar menú móvil cuando se hace click fuera\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      const target = event.target as Element\n      if (showMobileMenu && !target.closest('.mobile-menu-container')) {\n        setShowMobileMenu(false)\n      }\n    }\n\n    if (showMobileMenu) {\n      document.addEventListener('mousedown', handleClickOutside)\n    }\n\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside)\n    }\n  }, [showMobileMenu])\n\n  const handleDeleteClick = (assignment: Assignment) => {\n    setAssignmentToDelete(assignment)\n    setShowDeleteModal(true)\n  }\n\n  const handleDeleteConfirm = async () => {\n    if (!assignmentToDelete) return\n\n    setDeletingId(assignmentToDelete.id)\n    try {\n      const { error } = await deleteAssignment(assignmentToDelete.id)\n      if (error) {\n        showToast(`Error al eliminar: ${error}`, 'error')\n      } else {\n        showToast('Asignación eliminada correctamente', 'success')\n      }\n    } catch {\n      showToast('Error inesperado al eliminar', 'error')\n    } finally {\n      setDeletingId(null)\n      setShowDeleteModal(false)\n      setAssignmentToDelete(null)\n    }\n  }\n\n  const handleDeleteCancel = () => {\n    setShowDeleteModal(false)\n    setAssignmentToDelete(null)\n  }\n\n  const handleLogout = async () => {\n    await supabase.auth.signOut()\n    router.push('/')\n  }\n\n  const filteredAssignments = assignments.filter(assignment => {\n    if (filter === 'all') return true\n    return assignment.status === filter\n  }).filter(assignment => {\n    const q = searchValue.toLowerCase()\n    return (\n      assignment.user?.name?.toLowerCase().includes(q) ||\n      assignment.user?.surname?.toLowerCase().includes(q) ||\n      assignment.user?.phone?.toLowerCase().includes(q) ||\n      assignment.worker?.name?.toLowerCase().includes(q) ||\n      assignment.worker?.surname?.toLowerCase().includes(q) ||\n      assignment.worker?.phone?.toLowerCase().includes(q)\n    )\n  })\n\n  const getStatusIcon = (status: AssignmentStatus) => {\n    switch (status) {\n      case 'active':\n        return <CheckCircle className=\"w-4 h-4 text-success-600\" />\n      case 'paused':\n        return <Pause className=\"w-4 h-4 text-warning-600\" />\n      case 'completed':\n        return <CheckCircle className=\"w-4 h-4 text-primary-600\" />\n      case 'cancelled':\n        return <XCircle className=\"w-4 h-4 text-error-600\" />\n      default:\n        return null\n    }\n  }\n\n  const getStatusText = (status: AssignmentStatus) => {\n    switch (status) {\n      case 'active':\n        return 'Activa'\n      case 'paused':\n        return 'Pausada'\n      case 'completed':\n        return 'Completada'\n      case 'cancelled':\n        return 'Cancelada'\n      default:\n        return 'Desconocido'\n    }\n  }\n\n  const getPriorityText = (priority: number) => {\n    switch (priority) {\n      case 1:\n        return 'Alta'\n      case 2:\n        return 'Media'\n      case 3:\n        return 'Baja'\n      default:\n        return 'No especificada'\n    }\n  }\n\n  const formatSchedule = (schedule: Record<string, any[]> | undefined) => {\n    const dayNames: Record<string, string> = {\n      monday: 'Lun',\n      tuesday: 'Mar',\n      wednesday: 'Mié',\n      thursday: 'Jue',\n      friday: 'Vie',\n      saturday: 'Sáb',\n      sunday: 'Dom'\n    }\n    return formatScheduleOrdered(schedule, dayNames)\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-slate-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n          <p className=\"text-slate-600\">Cargando asignaciones...</p>\n        </div>\n      </div>\n    )\n  }\n\n  if (error) {\n    return (\n      <div className=\"min-h-screen bg-slate-50 flex items-center justify-center\">\n        <Card>\n          <CardContent className=\"p-6 text-center\">\n            <AlertTriangle className=\"w-12 h-12 text-red-500 mx-auto mb-4\" />\n            <p className=\"text-red-600 mb-4\">Error al cargar asignaciones: {error}</p>\n            <Link href=\"/dashboard\">\n              <Button>Volver al Dashboard</Button>\n            </Link>\n          </CardContent>\n        </Card>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"min-h-screen bg-slate-50\">\n      {/* Header */}\n      <header className=\"bg-white shadow-sm border-b border-slate-200 mobile-menu-container\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center py-4\">\n            <div className=\"flex-1 min-w-0\">\n              <h1 className=\"text-xl sm:text-2xl font-bold text-slate-900 truncate\">\n                Gestión de Asignaciones\n              </h1>\n              <p className=\"text-sm text-slate-600 truncate\">\n                Administra las asignaciones trabajadora-usuario y sus horarios\n              </p>\n            </div>\n            \n            {/* Desktop Navigation */}\n            <div className=\"hidden md:flex items-center space-x-2\">\n              <Link href=\"/dashboard\">\n                <Button variant=\"secondary\" size=\"sm\">\n                  <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                  Dashboard\n                </Button>\n              </Link>\n              <Link href=\"/dashboard/planning\">\n                <Button variant=\"secondary\" size=\"sm\">\n                  <Calendar className=\"w-4 h-4 mr-2\" />\n                  Planning\n                </Button>\n              </Link>\n              <Link href=\"/dashboard/users\">\n                <Button variant=\"secondary\" size=\"sm\">\n                  <User className=\"w-4 h-4 mr-2\" />\n                  Usuarios\n                </Button>\n              </Link>\n              <Link href=\"/dashboard/workers\">\n                <Button variant=\"secondary\" size=\"sm\">\n                  <Settings className=\"w-4 h-4 mr-2\" />\n                  Trabajadoras\n                </Button>\n              </Link>\n              <Button variant=\"secondary\" size=\"sm\" onClick={handleLogout}>\n                <LogOut className=\"w-4 h-4 mr-2\" />\n                Cerrar Sesión\n              </Button>\n            </div>\n\n            {/* Mobile Menu Button */}\n            <div className=\"md:hidden relative\">\n              <Button \n                variant=\"secondary\" \n                size=\"sm\" \n                onClick={() => setShowMobileMenu(!showMobileMenu)}\n                aria-label=\"Abrir menú de navegación\"\n                aria-expanded={showMobileMenu}\n                className=\"relative z-10\"\n              >\n                <Menu className=\"w-4 h-4\" />\n              </Button>\n            </div>\n          </div>\n\n          {/* Mobile Navigation Menu */}\n          <div className={`md:hidden transition-all duration-300 ease-in-out ${\n            showMobileMenu \n              ? 'max-h-96 opacity-100 visible' \n              : 'max-h-0 opacity-0 invisible'\n          }`}>\n            <div className=\"py-4 border-t border-slate-200 bg-white shadow-lg\">\n              <div className=\"flex flex-col space-y-2 px-4\">\n                <Link href=\"/dashboard\" onClick={() => setShowMobileMenu(false)}>\n                  <Button variant=\"secondary\" size=\"sm\" className=\"w-full justify-start\">\n                    <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                    Dashboard\n                  </Button>\n                </Link>\n                <Link href=\"/dashboard/planning\" onClick={() => setShowMobileMenu(false)}>\n                  <Button variant=\"secondary\" size=\"sm\" className=\"w-full justify-start\">\n                    <Calendar className=\"w-4 h-4 mr-2\" />\n                    Planning\n                  </Button>\n                </Link>\n                <Link href=\"/dashboard/users\" onClick={() => setShowMobileMenu(false)}>\n                  <Button variant=\"secondary\" size=\"sm\" className=\"w-full justify-start\">\n                    <User className=\"w-4 h-4 mr-2\" />\n                    Usuarios\n                  </Button>\n                </Link>\n                <Link href=\"/dashboard/workers\" onClick={() => setShowMobileMenu(false)}>\n                  <Button variant=\"secondary\" size=\"sm\" className=\"w-full justify-start\">\n                    <Settings className=\"w-4 h-4 mr-2\" />\n                    Trabajadoras\n                  </Button>\n                </Link>\n                <Button \n                  variant=\"secondary\" \n                  size=\"sm\" \n                  onClick={() => {\n                    handleLogout()\n                    setShowMobileMenu(false)\n                  }} \n                  className=\"w-full justify-start\"\n                >\n                  <LogOut className=\"w-4 h-4 mr-2\" />\n                  Cerrar Sesión\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <main className=\"max-w-7xl mx-auto px-2 sm:px-4 lg:px-8 py-6 sm:py-8\">\n        \n        {/* ACCIONES RÁPIDAS */}\n        <div className=\"grid grid-cols-2 sm:grid-cols-2 lg:grid-cols-4 gap-3 mb-6\">\n          <Link href=\"/dashboard/assignments/new\">\n            <Card className=\"hover:shadow-md transition-shadow cursor-pointer h-32 sm:h-28 flex flex-col items-center justify-center max-w-[140px] sm:max-w-full w-full mx-auto border border-blue-200 shadow-sm\">\n              <div className=\"p-2 bg-blue-50 rounded-lg mb-2\">\n                <Plus className=\"w-5 h-5 sm:w-6 sm:h-6 text-blue-600\" />\n              </div>\n              <h3 className=\"font-semibold text-sm sm:text-base text-blue-900 text-center whitespace-normal break-words leading-snug\">\n                Nueva Asignación\n              </h3>\n              <p className=\"text-xs sm:text-sm text-blue-700 text-center whitespace-normal break-words leading-snug\">\n                Crear asignación\n              </p>\n            </Card>\n          </Link>\n\n          <Link href=\"/dashboard/planning\">\n            <Card className=\"hover:shadow-md transition-shadow cursor-pointer h-32 sm:h-28 flex flex-col items-center justify-center max-w-[140px] sm:max-w-full w-full mx-auto border border-orange-200 shadow-sm\">\n              <div className=\"p-2 bg-orange-50 rounded-lg mb-2\">\n                <Calendar className=\"w-5 h-5 sm:w-6 sm:h-6 text-orange-600\" />\n              </div>\n              <h3 className=\"font-semibold text-sm sm:text-base text-orange-900 text-center whitespace-normal break-words leading-snug\">\n                Planning\n              </h3>\n              <p className=\"text-xs sm:text-sm text-orange-700 text-center whitespace-normal break-words leading-snug\">\n                Ver calendario\n              </p>\n            </Card>\n          </Link>\n\n          <Link href=\"/dashboard/users\">\n            <Card className=\"hover:shadow-md transition-shadow cursor-pointer h-32 sm:h-28 flex flex-col items-center justify-center max-w-[140px] sm:max-w-full w-full mx-auto border border-green-200 shadow-sm\">\n              <div className=\"p-2 bg-green-50 rounded-lg mb-2\">\n                <User className=\"w-5 h-5 sm:w-6 sm:h-6 text-green-600\" />\n              </div>\n              <h3 className=\"font-semibold text-sm sm:text-base text-green-900 text-center whitespace-normal break-words leading-snug\">\n                Usuarios\n              </h3>\n              <p className=\"text-xs sm:text-sm text-green-700 text-center whitespace-normal break-words leading-snug\">\n                Gestionar usuarios\n              </p>\n            </Card>\n          </Link>\n\n          {/* Tarjeta de búsqueda inteligente */}\n          <Card className=\"hover:shadow-md transition-shadow cursor-pointer h-32 sm:h-28 flex flex-col items-center justify-center max-w-[140px] sm:max-w-full w-full mx-auto p-0 border border-yellow-200 shadow-sm\">\n            <div className=\"p-2 bg-yellow-50 rounded-lg mb-1 mt-1\">\n              <Search className=\"w-5 h-5 sm:w-6 sm:h-6 text-yellow-600\" />\n            </div>\n            <h3 className=\"font-semibold text-sm sm:text-base text-yellow-900 text-center whitespace-normal break-words leading-snug\">\n              Buscar asignación\n            </h3>\n            <div className=\"w-full flex-1 flex items-center px-3\">\n              <input\n                type=\"text\"\n                placeholder=\"Usuario o trabajadora\"\n                className=\"mt-0 py-1 text-xs sm:text-sm rounded border border-slate-300 w-full focus:outline-none focus:ring-2 focus:ring-yellow-500 focus:border-yellow-500 text-center placeholder:text-center\"\n                value={searchValue}\n                onChange={e => setSearchValue(e.target.value)}\n              />\n            </div>\n          </Card>\n        </div>\n\n\n\n        {/* LISTADO DE ASIGNACIONES */}\n        <Card className=\"mx-0 sm:mx-0 border border-primary-200 shadow-sm\">\n          <CardContent className=\"p-3 sm:p-4 lg:p-6\">\n            <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between mb-4 gap-4\">\n              <div>\n                <h2 className=\"text-lg font-semibold text-primary-900\">Lista de Asignaciones</h2>\n                <p className=\"text-sm text-primary-600 mt-1\">\n                  {filteredAssignments.length} asignación{filteredAssignments.length !== 1 ? 'es' : ''} mostrada{filteredAssignments.length !== 1 ? 's' : ''}\n                </p>\n              </div>\n              <div className=\"flex flex-wrap items-center gap-2\">\n                <Button \n                  variant=\"secondary\" \n                  size=\"sm\"\n                  onClick={() => setFilter('all')}\n                  className={filter === 'all' ? 'bg-primary-100 text-primary-800 border border-primary-300' : ''}\n                >\n                  Todas ({stats.total})\n                </Button>\n                <Button \n                  variant=\"secondary\" \n                  size=\"sm\"\n                  onClick={() => setFilter('active')}\n                  className={filter === 'active' ? 'bg-success-100 text-success-800 border border-success-300' : ''}\n                >\n                  Activas ({stats.active})\n                </Button>\n                <Button \n                  variant=\"secondary\" \n                  size=\"sm\"\n                  onClick={() => setFilter('paused')}\n                  className={filter === 'paused' ? 'bg-warning-100 text-warning-800 border border-warning-300' : ''}\n                >\n                  Pausadas ({stats.paused})\n                </Button>\n                <Button \n                  variant=\"secondary\" \n                  size=\"sm\"\n                  onClick={() => setFilter('completed')}\n                  className={filter === 'completed' ? 'bg-primary-100 text-primary-800 border border-primary-300' : ''}\n                >\n                  Completadas ({stats.completed})\n                </Button>\n              </div>\n            </div>\n\n            {/* Assignments List */}\n            {filteredAssignments.length === 0 ? (\n              <div className=\"text-center py-8\">\n                <div className=\"text-primary-200 mb-4\">\n                  <Users className=\"w-16 h-16 mx-auto\" />\n                </div>\n                <h3 className=\"text-lg font-medium text-primary-900 mb-2\">\n                  No hay asignaciones\n                  {filter !== 'all' && ` ${statusLabels[filter as AssignmentStatus].toLowerCase()}`}\n                </h3>\n                <p className=\"text-primary-600 mb-4\">\n                  {filter === 'all' \n                    ? 'Comienza creando la primera asignación trabajadora-usuario'\n                    : `No hay asignaciones ${statusLabels[filter as AssignmentStatus].toLowerCase()} en este momento`\n                  }\n                </p>\n                <Link href=\"/dashboard/assignments/new\">\n                  <Button>\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    Crear Primera Asignación\n                  </Button>\n                </Link>\n              </div>\n            ) : (\n              <div className=\"space-y-6\">\n                {filteredAssignments.map((assignment) => {\n                  const statusIcon = getStatusIcon(assignment.status)\n                  return (\n                    <div key={assignment.id} className=\"bg-white border border-primary-100 rounded-xl shadow-sm hover:shadow-md transition-shadow p-4\">\n                      <div className=\"flex-1 min-w-0\">\n                        <div className=\"flex flex-col sm:flex-row sm:items-start sm:space-x-3 mb-2 gap-2\">\n                          <h3 className=\"text-base sm:text-lg font-semibold text-primary-900 break-words\">\n                            {assignment.worker?.name} {assignment.worker?.surname} → {assignment.user?.name} {assignment.user?.surname}\n                          </h3>\n                          <div className=\"flex flex-wrap gap-2\">\n                            <span className={`inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium ${statusColors[assignment.status]}`}> \n                              {statusIcon}\n                              {getStatusText(assignment.status)}\n                            </span>\n                            <span className={`inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium ${priorityColors[assignment.priority]}`}> \n                              Prioridad {getPriorityText(assignment.priority)}\n                            </span>\n                          </div>\n                        </div>\n                        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-2 sm:gap-3 mb-3\">\n                          <div className=\"flex items-center text-sm text-primary-700\">\n                            <Clock className=\"w-4 h-4 mr-2 flex-shrink-0 text-primary-600\" />\n                            <span className=\"truncate\">{assignment.assigned_hours_per_week}h/semana</span>\n                          </div>\n                          <div className=\"flex items-center text-sm text-primary-700\">\n                            <Calendar className=\"w-4 h-4 mr-2 flex-shrink-0 text-primary-600\" />\n                            <span className=\"truncate\">Desde {new Date(assignment.start_date).toLocaleDateString('es-ES')}</span>\n                          </div>\n                          {assignment.worker?.phone && (\n                            <div className=\"flex items-center text-sm text-primary-700\">\n                              <Phone className=\"w-4 h-4 mr-2 flex-shrink-0 text-primary-600\" />\n                              <span className=\"truncate\">{assignment.worker.phone}</span>\n                            </div>\n                          )}\n                        </div>\n                        {/* Schedule */}\n                        <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-3 mb-3 shadow-sm\">\n                          <p className=\"text-sm font-medium text-blue-700 mb-2\">Horario:</p>\n                          <ScheduleDisplay schedule={assignment.specific_schedule} showIcon={false} layout=\"rows\" />\n                        </div>\n                        {/* Notes */}\n                        {assignment.notes && (\n                          <div className=\"bg-orange-50 border border-orange-200 rounded-lg p-3 mt-2\">\n                            <p className=\"text-xs text-orange-700 mb-1 font-semibold\">Notas:</p>\n                            <p className=\"text-sm text-orange-700\">{assignment.notes}</p>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  )\n                })}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Stats Cards - Desktop and Mobile (at the bottom) */}\n        <div className=\"mt-8\">\n          <h3 className=\"text-lg font-semibold text-slate-900 mb-4\">Resumen de Asignaciones</h3>\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4\">\n            <Card className=\"border border-blue-200 shadow-sm\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center\">\n                  <div className=\"p-2 bg-blue-50 rounded-lg flex-shrink-0\">\n                    <Users className=\"w-5 h-5 text-blue-600\" />\n                  </div>\n                  <div className=\"ml-3 min-w-0 flex-1\">\n                    <p className=\"text-sm font-medium text-blue-600\">Total</p>\n                    <p className=\"text-xl font-bold text-blue-900\">{stats.total}</p>\n                    <p className=\"text-xs text-blue-500\">Asignaciones</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"border border-green-200 shadow-sm\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center\">\n                  <div className=\"p-2 bg-green-50 rounded-lg flex-shrink-0\">\n                    <CheckCircle className=\"w-5 h-5 text-green-600\" />\n                  </div>\n                  <div className=\"ml-3 min-w-0 flex-1\">\n                    <p className=\"text-sm font-medium text-green-600\">Activas</p>\n                    <p className=\"text-xl font-bold text-green-900\">{stats.active}</p>\n                    <p className=\"text-xs text-green-500\">En curso</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"border border-yellow-200 shadow-sm\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center\">\n                  <div className=\"p-2 bg-yellow-50 rounded-lg flex-shrink-0\">\n                    <Pause className=\"w-5 h-5 text-yellow-600\" />\n                  </div>\n                  <div className=\"ml-3 min-w-0 flex-1\">\n                    <p className=\"text-sm font-medium text-yellow-600\">Pausadas</p>\n                    <p className=\"text-xl font-bold text-yellow-900\">{stats.paused}</p>\n                    <p className=\"text-xs text-yellow-500\">Temporales</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"border border-orange-200 shadow-sm\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center\">\n                  <div className=\"p-2 bg-orange-50 rounded-lg flex-shrink-0\">\n                    <Clock className=\"w-5 h-5 text-orange-600\" />\n                  </div>\n                  <div className=\"ml-3 min-w-0 flex-1\">\n                    <p className=\"text-sm font-medium text-orange-600\">Horas/Semana</p>\n                    <p className=\"text-xl font-bold text-orange-900\">{stats.totalWeeklyHours}</p>\n                    <p className=\"text-xs text-orange-500\">Asignadas</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"border border-purple-200 shadow-sm\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center\">\n                  <div className=\"p-2 bg-purple-50 rounded-lg flex-shrink-0\">\n                    <CheckCircle className=\"w-5 h-5 text-purple-600\" />\n                  </div>\n                  <div className=\"ml-3 min-w-0 flex-1\">\n                    <p className=\"text-sm font-medium text-purple-600\">Completadas</p>\n                    <p className=\"text-xl font-bold text-purple-900\">{stats.completed}</p>\n                    <p className=\"text-xs text-purple-500\">Finalizadas</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"border border-red-200 shadow-sm\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center\">\n                  <div className=\"p-2 bg-red-50 rounded-lg flex-shrink-0\">\n                    <XCircle className=\"w-5 h-5 text-red-600\" />\n                  </div>\n                  <div className=\"ml-3 min-w-0 flex-1\">\n                    <p className=\"text-sm font-medium text-red-600\">Canceladas</p>\n                    <p className=\"text-xl font-bold text-red-900\">{stats.cancelled || 0}</p>\n                    <p className=\"text-xs text-red-500\">Anuladas</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </main>\n\n      {/* Footer de navegación fijo */}\n      <footer className=\"fixed bottom-0 left-0 right-0 z-50 bg-white border-t border-slate-200 shadow-lg\">\n        <nav className=\"flex justify-around py-3\">\n          <Link href=\"/dashboard/users\" className=\"flex flex-col items-center text-xs text-slate-600 hover:text-blue-600 transition-colors\">\n            <User className=\"w-5 h-5 mb-1\" />\n            <span className=\"hidden sm:inline\">Usuarios</span>\n          </Link>\n          <Link href=\"/dashboard/workers\" className=\"flex flex-col items-center text-xs text-slate-600 hover:text-green-600 transition-colors\">\n            <Users className=\"w-5 h-5 mb-1\" />\n            <span className=\"hidden sm:inline\">Trabajadoras</span>\n          </Link>\n          <Link href=\"/dashboard/assignments\" className=\"flex flex-col items-center text-xs text-slate-600 hover:text-purple-600 transition-colors\">\n            <Clock className=\"w-5 h-5 mb-1\" />\n            <span className=\"hidden sm:inline\">Asignaciones</span>\n          </Link>\n          <Link href=\"/dashboard/planning\" className=\"flex flex-col items-center text-xs text-slate-600 hover:text-orange-600 transition-colors\">\n            <Calendar className=\"w-5 h-5 mb-1\" />\n            <span className=\"hidden sm:inline\">Planning</span>\n          </Link>\n          <Link href=\"/dashboard/settings\" className=\"flex flex-col items-center text-xs text-slate-600 hover:text-slate-800 transition-colors\">\n            <Settings className=\"w-5 h-5 mb-1\" />\n            <span className=\"hidden sm:inline\">Configuración</span>\n          </Link>\n        </nav>\n      </footer>\n\n      {/* Espacio para el footer fijo */}\n      <div className=\"h-20\"></div>\n\n      {/* Delete Confirmation Modal */}\n      {showDeleteModal && assignmentToDelete && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\n          <div className=\"bg-white rounded-lg p-6 max-w-md w-full\">\n            <div className=\"flex items-center mb-4\">\n              <div className=\"p-2 bg-red-100 rounded-lg mr-3\">\n                <Trash2 className=\"w-6 h-6 text-red-600\" />\n              </div>\n              <h3 className=\"text-lg font-semibold text-slate-900\">\n                Confirmar Eliminación\n              </h3>\n            </div>\n            \n            <p className=\"text-slate-600 mb-6\">\n              ¿Estás segura de que quieres eliminar la asignación de{' '}\n              <strong>{assignmentToDelete.worker?.name} {assignmentToDelete.worker?.surname}</strong>{' '}\n              para <strong>{assignmentToDelete.user?.name} {assignmentToDelete.user?.surname}</strong>?\n            </p>\n            \n            <p className=\"text-sm text-slate-500 mb-6 bg-yellow-50 p-3 rounded-lg\">\n              ⚠️ Esta acción no se puede deshacer. Se eliminará toda la información de la asignación.\n            </p>\n            \n            <div className=\"flex flex-col sm:flex-row space-y-2 sm:space-y-0 sm:space-x-3\">\n              <Button\n                variant=\"secondary\"\n                onClick={handleDeleteCancel}\n                className=\"flex-1\"\n              >\n                Cancelar\n              </Button>\n              <Button\n                variant=\"danger\"\n                onClick={handleDeleteConfirm}\n                disabled={deletingId === assignmentToDelete.id}\n                className=\"flex-1\"\n              >\n                {deletingId === assignmentToDelete.id ? 'Eliminando...' : 'Eliminar'}\n              </Button>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {ToastComponent}\n    </div>\n  )\n} ","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"/Users/alamia.es/Public/SAD/src/app/dashboard/holidays-test/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":49,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":49,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1545,1548],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1545,1548],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":86,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":86,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2541,2544],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2541,2544],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":101,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":101,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2961,2964],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2961,2964],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchHolidays'. Either include it or remove the dependency array.","line":59,"column":6,"nodeType":"ArrayExpression","endLine":59,"endColumn":19,"suggestions":[{"desc":"Update the dependencies array to be: [year, month, fetchHolidays]","fix":{"range":[1712,1725],"text":"[year, month, fetchHolidays]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useEffect, useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Loader2, Trash2, PlusCircle } from \"lucide-react\";\n\ninterface Holiday {\n  id: string;\n  year: number;\n  month: number;\n  day: number;\n  name: string;\n  type: string;\n}\n\nconst monthNames = [\n  \"Enero\", \"Febrero\", \"Marzo\", \"Abril\", \"Mayo\", \"Junio\",\n  \"Julio\", \"Agosto\", \"Septiembre\", \"Octubre\", \"Noviembre\", \"Diciembre\"\n];\n\nexport default function HolidaysTestPage() {\n  const [year, setYear] = useState(new Date().getFullYear());\n  const [month, setMonth] = useState<number | \"\">(\"\");\n  const [holidays, setHolidays] = useState<Holiday[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [form, setForm] = useState({\n    name: \"\",\n    year: year,\n    month: 1,\n    day: 1,\n    type: \"local\"\n  });\n  const [adding, setAdding] = useState(false);\n  const [deleting, setDeleting] = useState<string | null>(null);\n  const [successMessage, setSuccessMessage] = useState<string | null>(null);\n\n  const fetchHolidays = async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      let url = `/api/holidays?year=${year}`;\n      if (month) url += `&month=${month}`;\n      const res = await fetch(url);\n      const data = await res.json();\n      if (!res.ok) throw new Error(data.error || \"Error al cargar festivos\");\n      setHolidays(data.holidays || []);\n    } catch (err: any) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchHolidays();\n    // eslint-disable-next-line\n  }, [year, month]);\n\n  // Limpiar mensaje de éxito después de 3 segundos\n  useEffect(() => {\n    if (successMessage) {\n      const timer = setTimeout(() => {\n        setSuccessMessage(null);\n      }, 3000);\n      return () => clearTimeout(timer);\n    }\n  }, [successMessage]);\n\n  const handleAdd = async () => {\n    setAdding(true);\n    setError(null);\n    setSuccessMessage(null);\n    try {\n      const res = await fetch(\"/api/holidays\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(form)\n      });\n      const data = await res.json();\n      if (!res.ok) throw new Error(data.error || \"Error al añadir festivo\");\n      setForm({ ...form, name: \"\" });\n      setSuccessMessage(`Festivo \"${form.name}\" añadido correctamente`);\n      fetchHolidays();\n    } catch (err: any) {\n      setError(err.message);\n    } finally {\n      setAdding(false);\n    }\n  };\n\n  const handleDelete = async (id: string) => {\n    setDeleting(id);\n    setError(null);\n    try {\n      const res = await fetch(`/api/holidays?id=${id}`, { method: \"DELETE\" });\n      const data = await res.json();\n      if (!res.ok) throw new Error(data.error || \"Error al borrar festivo\");\n      fetchHolidays();\n    } catch (err: any) {\n      setError(err.message);\n    } finally {\n      setDeleting(null);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-slate-50 p-6\">\n      <div className=\"max-w-3xl mx-auto space-y-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Gestión de Festivos (Test)</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex flex-wrap gap-4 mb-4\">\n              <div>\n                <label className=\"block text-xs font-medium mb-1\">Año</label>\n                <select\n                  value={year}\n                  onChange={e => setYear(Number(e.target.value))}\n                  className=\"p-2 border rounded\"\n                >\n                  {[2024, 2025, 2026].map(y => (\n                    <option key={y} value={y}>{y}</option>\n                  ))}\n                </select>\n              </div>\n              <div>\n                <label className=\"block text-xs font-medium mb-1\">Mes</label>\n                <select\n                  value={month}\n                  onChange={e => setMonth(e.target.value ? Number(e.target.value) : \"\")}\n                  className=\"p-2 border rounded\"\n                >\n                  <option value=\"\">Todos</option>\n                  {monthNames.map((m, i) => (\n                    <option key={i + 1} value={i + 1}>{m}</option>\n                  ))}\n                </select>\n              </div>\n            </div>\n\n            <div className=\"mb-4\">\n              <h4 className=\"font-semibold mb-2\">Añadir festivo</h4>\n              <div className=\"flex flex-wrap gap-2 items-end\">\n                <input\n                  type=\"text\"\n                  placeholder=\"Nombre\"\n                  value={form.name}\n                  onChange={e => setForm(f => ({ ...f, name: e.target.value }))}\n                  className=\"p-2 border rounded w-40\"\n                />\n                <select\n                  value={form.month}\n                  onChange={e => setForm(f => ({ ...f, month: Number(e.target.value) }))}\n                  className=\"p-2 border rounded\"\n                >\n                  {monthNames.map((m, i) => (\n                    <option key={i + 1} value={i + 1}>{m}</option>\n                  ))}\n                </select>\n                <input\n                  type=\"number\"\n                  min={1}\n                  max={31}\n                  value={form.day}\n                  onChange={e => setForm(f => ({ ...f, day: Number(e.target.value) }))}\n                  className=\"p-2 border rounded w-16\"\n                />\n                <select\n                  value={form.type}\n                  onChange={e => setForm(f => ({ ...f, type: e.target.value }))}\n                  className=\"p-2 border rounded\"\n                >\n                  <option value=\"local\">Local</option>\n                  <option value=\"regional\">Regional</option>\n                  <option value=\"nacional\">Nacional</option>\n                </select>\n                <input\n                  type=\"number\"\n                  min={2024}\n                  max={2100}\n                  value={form.year}\n                  onChange={e => setForm(f => ({ ...f, year: Number(e.target.value) }))}\n                  className=\"p-2 border rounded w-20\"\n                />\n                <Button onClick={handleAdd} disabled={adding || !form.name} className=\"flex items-center gap-1\">\n                  {adding ? <Loader2 className=\"w-4 h-4 animate-spin\" /> : <PlusCircle className=\"w-4 h-4\" />}\n                  Añadir\n                </Button>\n              </div>\n            </div>\n\n            {successMessage && (\n              <div className=\"text-green-600 bg-green-50 border border-green-200 rounded p-2 mb-4\">\n                ✅ {successMessage}\n              </div>\n            )}\n            {loading ? (\n              <div className=\"flex items-center gap-2 text-slate-600\"><Loader2 className=\"w-4 h-4 animate-spin\" />Cargando...</div>\n            ) : error ? (\n              <div className=\"text-red-600\">{error}</div>\n            ) : holidays.length === 0 ? (\n              <div className=\"text-slate-500\">No hay festivos para este periodo.</div>\n            ) : (\n              <table className=\"w-full text-sm border mt-4\">\n                <thead>\n                  <tr className=\"bg-slate-100\">\n                    <th className=\"border px-2 py-1\">Fecha</th>\n                    <th className=\"border px-2 py-1\">Nombre</th>\n                    <th className=\"border px-2 py-1\">Tipo</th>\n                    <th className=\"border px-2 py-1\">Acciones</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {holidays.map(h => (\n                    <tr key={h.id}>\n                      <td className=\"border px-2 py-1 whitespace-nowrap\">{h.day}/{h.month}/{h.year}</td>\n                      <td className=\"border px-2 py-1\">{h.name}</td>\n                      <td className=\"border px-2 py-1 capitalize\">{h.type}</td>\n                      <td className=\"border px-2 py-1\">\n                        <Button\n                          variant=\"danger\"\n                          size=\"sm\"\n                          onClick={() => handleDelete(h.id)}\n                          disabled={deleting === h.id}\n                          className=\"flex items-center gap-1\"\n                        >\n                          {deleting === h.id ? <Loader2 className=\"w-4 h-4 animate-spin\" /> : <Trash2 className=\"w-4 h-4\" />}\n                          Borrar\n                        </Button>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n} ","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"/Users/alamia.es/Public/SAD/src/app/dashboard/holidays/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":50,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":50,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1602,1605],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1602,1605],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":87,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":87,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2598,2601],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2598,2601],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":102,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":102,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3018,3021],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3018,3021],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchHolidays'. Either include it or remove the dependency array.","line":60,"column":6,"nodeType":"ArrayExpression","endLine":60,"endColumn":19,"suggestions":[{"desc":"Update the dependencies array to be: [year, month, fetchHolidays]","fix":{"range":[1769,1782],"text":"[year, month, fetchHolidays]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useEffect, useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Loader2, Trash2, PlusCircle, Calendar, Settings, ArrowLeft } from \"lucide-react\";\nimport Link from \"next/link\";\n\ninterface Holiday {\n  id: string;\n  year: number;\n  month: number;\n  day: number;\n  name: string;\n  type: string;\n}\n\nconst monthNames = [\n  \"Enero\", \"Febrero\", \"Marzo\", \"Abril\", \"Mayo\", \"Junio\",\n  \"Julio\", \"Agosto\", \"Septiembre\", \"Octubre\", \"Noviembre\", \"Diciembre\"\n];\n\nexport default function HolidaysPage() {\n  const [year, setYear] = useState(new Date().getFullYear());\n  const [month, setMonth] = useState<number | \"\">(\"\");\n  const [holidays, setHolidays] = useState<Holiday[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [form, setForm] = useState({\n    name: \"\",\n    year: year,\n    month: 1,\n    day: 1,\n    type: \"local\"\n  });\n  const [adding, setAdding] = useState(false);\n  const [deleting, setDeleting] = useState<string | null>(null);\n  const [successMessage, setSuccessMessage] = useState<string | null>(null);\n\n  const fetchHolidays = async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      let url = `/api/holidays?year=${year}`;\n      if (month) url += `&month=${month}`;\n      const res = await fetch(url);\n      const data = await res.json();\n      if (!res.ok) throw new Error(data.error || \"Error al cargar festivos\");\n      setHolidays(data.holidays || []);\n    } catch (err: any) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchHolidays();\n    // eslint-disable-next-line\n  }, [year, month]);\n\n  // Limpiar mensaje de éxito después de 3 segundos\n  useEffect(() => {\n    if (successMessage) {\n      const timer = setTimeout(() => {\n        setSuccessMessage(null);\n      }, 3000);\n      return () => clearTimeout(timer);\n    }\n  }, [successMessage]);\n\n  const handleAdd = async () => {\n    setAdding(true);\n    setError(null);\n    setSuccessMessage(null);\n    try {\n      const res = await fetch(\"/api/holidays\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(form)\n      });\n      const data = await res.json();\n      if (!res.ok) throw new Error(data.error || \"Error al añadir festivo\");\n      setForm({ ...form, name: \"\" });\n      setSuccessMessage(`Festivo \"${form.name}\" añadido correctamente`);\n      fetchHolidays();\n    } catch (err: any) {\n      setError(err.message);\n    } finally {\n      setAdding(false);\n    }\n  };\n\n  const handleDelete = async (id: string) => {\n    setDeleting(id);\n    setError(null);\n    try {\n      const res = await fetch(`/api/holidays?id=${id}`, { method: \"DELETE\" });\n      const data = await res.json();\n      if (!res.ok) throw new Error(data.error || \"Error al borrar festivo\");\n      fetchHolidays();\n    } catch (err: any) {\n      setError(err.message);\n    } finally {\n      setDeleting(null);\n    }\n  };\n\n  const getTypeColor = (type: string) => {\n    switch (type) {\n      case 'local':\n        return 'bg-blue-100 text-blue-800';\n      case 'regional':\n        return 'bg-purple-100 text-purple-800';\n      case 'nacional':\n        return 'bg-green-100 text-green-800';\n      default:\n        return 'bg-slate-100 text-slate-800';\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-slate-50\">\n      {/* Header */}\n      <header className=\"bg-white shadow-sm border-b border-slate-200\">\n        <div className=\"max-w-7xl mx-auto px-4 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <Link href=\"/dashboard\">\n                <Button variant=\"ghost\" size=\"sm\">\n                  <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                  Volver\n                </Button>\n              </Link>\n              <div>\n                <h1 className=\"text-xl font-semibold text-slate-900\">Gestión de Festivos</h1>\n                <p className=\"text-sm text-slate-600\">Administra los festivos locales, regionales y nacionales</p>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Calendar className=\"w-5 h-5 text-slate-400\" />\n              <span className=\"text-sm text-slate-600\">Mataró</span>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <div className=\"max-w-7xl mx-auto px-4 py-6 space-y-6\">\n        {/* Filtros */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Settings className=\"w-5 h-5 mr-2\" />\n              Filtros y Búsqueda\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex flex-wrap gap-4\">\n              <div>\n                <label className=\"block text-sm font-medium text-slate-700 mb-1\">Año</label>\n                <select\n                  value={year}\n                  onChange={e => setYear(Number(e.target.value))}\n                  className=\"p-2 border rounded-md bg-white\"\n                >\n                  {[2024, 2025, 2026, 2027].map(y => (\n                    <option key={y} value={y}>{y}</option>\n                  ))}\n                </select>\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium text-slate-700 mb-1\">Mes</label>\n                <select\n                  value={month}\n                  onChange={e => setMonth(e.target.value ? Number(e.target.value) : \"\")}\n                  className=\"p-2 border rounded-md bg-white\"\n                >\n                  <option value=\"\">Todos los meses</option>\n                  {monthNames.map((m, i) => (\n                    <option key={i + 1} value={i + 1}>{m}</option>\n                  ))}\n                </select>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Añadir Festivo */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <PlusCircle className=\"w-5 h-5 mr-2\" />\n              Añadir Nuevo Festivo\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-6 gap-4\">\n              <div>\n                <label className=\"block text-sm font-medium text-slate-700 mb-1\">Nombre *</label>\n                <input\n                  type=\"text\"\n                  placeholder=\"Ej: Fiesta Mayor\"\n                  value={form.name}\n                  onChange={e => setForm(f => ({ ...f, name: e.target.value }))}\n                  className=\"w-full p-2 border rounded-md\"\n                />\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium text-slate-700 mb-1\">Mes</label>\n                <select\n                  value={form.month}\n                  onChange={e => setForm(f => ({ ...f, month: Number(e.target.value) }))}\n                  className=\"w-full p-2 border rounded-md\"\n                >\n                  {monthNames.map((m, i) => (\n                    <option key={i + 1} value={i + 1}>{m}</option>\n                  ))}\n                </select>\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium text-slate-700 mb-1\">Día</label>\n                <input\n                  type=\"number\"\n                  min={1}\n                  max={31}\n                  value={form.day}\n                  onChange={e => setForm(f => ({ ...f, day: Number(e.target.value) }))}\n                  className=\"w-full p-2 border rounded-md\"\n                />\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium text-slate-700 mb-1\">Tipo</label>\n                <select\n                  value={form.type}\n                  onChange={e => setForm(f => ({ ...f, type: e.target.value }))}\n                  className=\"w-full p-2 border rounded-md\"\n                >\n                  <option value=\"local\">Local</option>\n                  <option value=\"regional\">Regional</option>\n                  <option value=\"nacional\">Nacional</option>\n                </select>\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium text-slate-700 mb-1\">Año</label>\n                <input\n                  type=\"number\"\n                  min={2024}\n                  max={2030}\n                  value={form.year}\n                  onChange={e => setForm(f => ({ ...f, year: Number(e.target.value) }))}\n                  className=\"w-full p-2 border rounded-md\"\n                />\n              </div>\n              <div className=\"flex items-end\">\n                <Button \n                  onClick={handleAdd} \n                  disabled={adding || !form.name} \n                  className=\"w-full flex items-center justify-center\"\n                >\n                  {adding ? <Loader2 className=\"w-4 h-4 animate-spin\" /> : <PlusCircle className=\"w-4 h-4\" />}\n                  {adding ? 'Añadiendo...' : 'Añadir'}\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Mensajes */}\n        {successMessage && (\n          <div className=\"bg-green-50 border border-green-200 rounded-lg p-4\">\n            <div className=\"flex items-center\">\n              <div className=\"w-2 h-2 bg-green-500 rounded-full mr-3\"></div>\n              <span className=\"text-green-800 font-medium\">{successMessage}</span>\n            </div>\n          </div>\n        )}\n\n        {error && (\n          <div className=\"bg-red-50 border border-red-200 rounded-lg p-4\">\n            <div className=\"flex items-center\">\n              <div className=\"w-2 h-2 bg-red-500 rounded-full mr-3\"></div>\n              <span className=\"text-red-800 font-medium\">{error}</span>\n            </div>\n          </div>\n        )}\n\n        {/* Lista de Festivos */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center justify-between\">\n              <div className=\"flex items-center\">\n                <Calendar className=\"w-5 h-5 mr-2\" />\n                Festivos {month ? `de ${monthNames[month - 1]}` : ''} {year}\n              </div>\n              <div className=\"text-sm text-slate-600\">\n                {holidays.length} festivo{holidays.length !== 1 ? 's' : ''}\n              </div>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {loading ? (\n              <div className=\"flex items-center justify-center py-8\">\n                <Loader2 className=\"w-6 h-6 animate-spin mr-2\" />\n                <span>Cargando festivos...</span>\n              </div>\n            ) : holidays.length === 0 ? (\n              <div className=\"text-center py-8\">\n                <Calendar className=\"w-12 h-12 text-slate-400 mx-auto mb-4\" />\n                <h3 className=\"text-lg font-medium text-slate-900 mb-2\">No hay festivos</h3>\n                <p className=\"text-slate-600\">\n                  {month ? `No hay festivos en ${monthNames[month - 1]} ${year}` : `No hay festivos en ${year}`}\n                </p>\n              </div>\n            ) : (\n              <div className=\"overflow-x-auto\">\n                <table className=\"w-full text-sm\">\n                  <thead>\n                    <tr className=\"border-b border-slate-200\">\n                      <th className=\"text-left py-3 px-4 font-medium text-slate-700\">Fecha</th>\n                      <th className=\"text-left py-3 px-4 font-medium text-slate-700\">Nombre</th>\n                      <th className=\"text-left py-3 px-4 font-medium text-slate-700\">Tipo</th>\n                      <th className=\"text-right py-3 px-4 font-medium text-slate-700\">Acciones</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {holidays.map(holiday => (\n                      <tr key={holiday.id} className=\"border-b border-slate-100 hover:bg-slate-50\">\n                        <td className=\"py-3 px-4\">\n                          <div className=\"font-medium text-slate-900\">\n                            {holiday.day} {monthNames[holiday.month - 1]}\n                          </div>\n                          <div className=\"text-xs text-slate-500\">{holiday.year}</div>\n                        </td>\n                        <td className=\"py-3 px-4 text-slate-900\">{holiday.name}</td>\n                        <td className=\"py-3 px-4\">\n                          <span className={`inline-flex px-2 py-1 rounded-full text-xs font-medium ${getTypeColor(holiday.type)}`}>\n                            {holiday.type === 'local' ? 'Local' : \n                             holiday.type === 'regional' ? 'Regional' : \n                             holiday.type === 'nacional' ? 'Nacional' : holiday.type}\n                          </span>\n                        </td>\n                        <td className=\"py-3 px-4 text-right\">\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => handleDelete(holiday.id)}\n                            disabled={deleting === holiday.id}\n                            className=\"text-red-600 hover:text-red-700 hover:bg-red-50\"\n                          >\n                            {deleting === holiday.id ? (\n                              <Loader2 className=\"w-4 h-4 animate-spin\" />\n                            ) : (\n                              <Trash2 className=\"w-4 h-4\" />\n                            )}\n                          </Button>\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n} ","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"/Users/alamia.es/Public/SAD/src/app/dashboard/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":17,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[718,721],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[718,721],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_' is defined but never used.","line":24,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":16},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":40,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":40,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1707,1710],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1707,1710],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport { useEffect, useState } from 'react'\nimport { useRouter } from 'next/navigation'\nimport Link from 'next/link'\nimport { Button } from '@/components/ui/button'\nimport { Card, CardContent } from '@/components/ui/card'\nimport { useUsers, useActiveUsers } from '@/hooks/useUsers'\nimport { supabase } from '@/lib/supabase'\nimport { User as SupabaseUser } from '@supabase/supabase-js'\nimport { Plus, User, Phone, Clock, Calendar, Settings, LogOut, Edit, Menu, Users, MapPin, CalendarDays } from 'lucide-react'\n\n// Configuración para evitar el prerender estático\nexport const dynamic = 'force-dynamic'\n\n// Componente para mostrar horarios de usuario\nfunction UserScheduleDisplay({ schedule }: { schedule: any }) {\n  if (!schedule || typeof schedule !== 'object') {\n    return <span className=\"text-slate-500 text-sm\">Sin horario definido</span>\n  }\n\n  const days = ['Lun', 'Mar', 'Mié', 'Jue', 'Vie', 'Sáb', 'Dom']\n  const activeDays = Object.entries(schedule)\n    .filter(([_, times]) => times && Array.isArray(times) && times.length > 0)\n    .map(([day, times]) => ({ day: parseInt(day), times }))\n\n  if (activeDays.length === 0) {\n    return <span className=\"text-slate-500 text-sm\">Sin horario definido</span>\n  }\n\n  return (\n    <div className=\"flex flex-wrap gap-1\">\n      {activeDays.map(({ day, times }) => (\n        <div key={day} className=\"flex items-center space-x-1\">\n          <div className=\"flex items-center justify-center w-6 h-6 bg-blue-100 text-blue-700 rounded-full text-xs font-medium\">\n            {days[day - 1]}\n          </div>\n          <span className=\"text-xs text-slate-600\">\n            {Array.isArray(times) && times.length > 0 \n              ? times.map((time: any) => `${time.start} - ${time.end}`).join(' y ')\n              : 'Sin horario'\n            }\n          </span>\n        </div>\n      ))}\n    </div>\n  )\n}\n\nexport default function DashboardPage() {\n  const [user, setUser] = useState<SupabaseUser | null>(null)\n  const { data: allUsers, isLoading: allUsersLoading } = useUsers()\n  const { data: activeUsers, isLoading: activeUsersLoading } = useActiveUsers()\n  const router = useRouter()\n  const [showMobileMenu, setShowMobileMenu] = useState(false)\n\n  useEffect(() => {\n    const getUser = async () => {\n      const { data: { user } } = await supabase.auth.getUser()\n      if (!user) {\n        router.push('/login')\n      } else {\n        setUser(user)\n      }\n    }\n    getUser()\n  }, [router])\n\n  const handleLogout = async () => {\n    await supabase.auth.signOut()\n    router.push('/')\n  }\n\n  if (!user) {\n    return (\n      <div className=\"min-h-screen bg-slate-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-slate-600\">Cargando...</p>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"min-h-screen bg-slate-50\">\n      {/* HEADER */}\n      <header className=\"bg-white shadow-sm border-b border-secondary\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center py-4\">\n            <div className=\"flex-1 min-w-0\">\n              <h1 className=\"text-xl sm:text-2xl font-bold text-secondary truncate\">\n                🏢 Panel Administrativo\n              </h1>\n              <p className=\"text-sm text-slate-600 truncate\">\n                Centro de control para planificación • Bienvenida, {user.user_metadata?.full_name || user.email}\n              </p>\n              <div className=\"flex items-center space-x-2 mt-2 overflow-x-auto\">\n                <span className=\"text-xs bg-primary/10 text-primary px-2 py-1 rounded-full font-medium whitespace-nowrap\">\n                  👩‍💼 Administración\n                </span>\n                <span className=\"text-xs bg-accent/10 text-accent px-2 py-1 rounded-full font-medium whitespace-nowrap\">\n                  📊 Control Central\n                </span>\n              </div>\n            </div>\n            \n            <div className=\"hidden md:flex items-center space-x-2\">\n              <Link href=\"/dashboard/planning\">\n                <Button variant=\"secondary\" size=\"sm\">\n                  <Calendar className=\"w-4 h-4 mr-2\" />\n                  Planning\n                </Button>\n              </Link>\n              <Link href=\"/dashboard/workers\">\n                <Button variant=\"secondary\" size=\"sm\">\n                  <User className=\"w-4 h-4 mr-2\" />\n                  Trabajadoras\n                </Button>\n              </Link>\n              <Link href=\"/dashboard/assignments\">\n                <Button variant=\"secondary\" size=\"sm\">\n                  <Clock className=\"w-4 h-4 mr-2\" />\n                  Asignaciones\n                </Button>\n              </Link>\n              <Link href=\"/dashboard/settings\">\n                <Button variant=\"secondary\" size=\"sm\">\n                  <Settings className=\"w-4 h-4 mr-2\" />\n                  Configuración\n                </Button>\n              </Link>\n              <Button variant=\"secondary\" size=\"sm\" onClick={handleLogout}>\n                <LogOut className=\"w-4 h-4 mr-2\" />\n                Cerrar Sesión\n              </Button>\n            </div>\n\n            <div className=\"md:hidden\">\n              <Button \n                variant=\"secondary\" \n                size=\"sm\" \n                onClick={() => setShowMobileMenu(!showMobileMenu)}\n              >\n                <Menu className=\"w-4 h-4\" />\n              </Button>\n            </div>\n          </div>\n\n          {showMobileMenu && (\n            <div className=\"md:hidden py-4 border-t border-secondary\">\n              <div className=\"flex flex-col space-y-2\">\n                <Link href=\"/dashboard/planning\">\n                  <Button variant=\"secondary\" size=\"sm\" className=\"w-full justify-start\">\n                    <Calendar className=\"w-4 h-4 mr-2\" />\n                    Planning\n                  </Button>\n                </Link>\n                <Link href=\"/dashboard/workers\">\n                  <Button variant=\"secondary\" size=\"sm\" className=\"w-full justify-start\">\n                    <User className=\"w-4 h-4 mr-2\" />\n                    Trabajadoras\n                  </Button>\n                </Link>\n                <Link href=\"/dashboard/assignments\">\n                  <Button variant=\"secondary\" size=\"sm\" className=\"w-full justify-start\">\n                    <Clock className=\"w-4 h-4 mr-2\" />\n                    Asignaciones\n                  </Button>\n                </Link>\n                <Link href=\"/dashboard/settings\">\n                  <Button variant=\"secondary\" size=\"sm\" className=\"w-full justify-start\">\n                    <Settings className=\"w-4 h-4 mr-2\" />\n                    Configuración\n                  </Button>\n                </Link>\n                <Button variant=\"secondary\" size=\"sm\" onClick={handleLogout} className=\"w-full justify-start\">\n                  <LogOut className=\"w-4 h-4 mr-2\" />\n                  Cerrar Sesión\n                </Button>\n              </div>\n            </div>\n          )}\n        </div>\n      </header>\n\n      {/* MAIN CONTENT */}\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6 sm:py-8\">\n        \n        {/* ACCIONES RÁPIDAS */}\n        <div className=\"grid grid-cols-2 sm:grid-cols-2 lg:grid-cols-5 gap-3 mb-6\">\n          <Link href=\"/dashboard/users/new\">\n            <Card className=\"hover:shadow-md transition-shadow cursor-pointer h-32 sm:h-28 flex flex-col items-center justify-center max-w-[140px] sm:max-w-full w-full mx-auto border border-green-200 shadow-sm\">\n              <div className=\"p-2 bg-green-50 rounded-lg mb-2\">\n                <Plus className=\"w-5 h-5 sm:w-6 sm:h-6 text-green-600\" />\n              </div>\n              <h3 className=\"font-semibold text-sm sm:text-base text-green-900 text-center whitespace-normal break-words leading-snug\">\n                Nuevo Usuario\n              </h3>\n              <p className=\"text-xs sm:text-sm text-green-700 text-center whitespace-normal break-words leading-snug\">\n                Crear usuario\n              </p>\n            </Card>\n          </Link>\n\n          <Link href=\"/dashboard/workers/new\">\n            <Card className=\"hover:shadow-md transition-shadow cursor-pointer h-32 sm:h-28 flex flex-col items-center justify-center max-w-[140px] sm:max-w-full w-full mx-auto border border-blue-200 shadow-sm\">\n              <div className=\"p-2 bg-blue-50 rounded-lg mb-2\">\n                <User className=\"w-5 h-5 sm:w-6 sm:h-6 text-blue-600\" />\n              </div>\n              <h3 className=\"font-semibold text-sm sm:text-base text-blue-900 text-center whitespace-normal break-words leading-snug\">\n                Nueva Trabajadora\n              </h3>\n              <p className=\"text-xs sm:text-sm text-blue-700 text-center whitespace-normal break-words leading-snug\">\n                Agregar trabajadora\n              </p>\n            </Card>\n          </Link>\n\n          <Link href=\"/dashboard/assignments/new\">\n            <Card className=\"hover:shadow-md transition-shadow cursor-pointer h-32 sm:h-28 flex flex-col items-center justify-center max-w-[140px] sm:max-w-full w-full mx-auto border border-orange-200 shadow-sm\">\n              <div className=\"p-2 bg-orange-50 rounded-lg mb-2\">\n                <Clock className=\"w-5 h-5 sm:w-6 sm:h-6 text-orange-600\" />\n              </div>\n              <h3 className=\"font-semibold text-sm sm:text-base text-orange-900 text-center whitespace-normal break-words leading-snug\">\n                Nueva Asignación\n              </h3>\n              <p className=\"text-xs sm:text-sm text-orange-700 text-center whitespace-normal break-words leading-snug\">\n                Crear asignación\n              </p>\n            </Card>\n          </Link>\n\n          <Link href=\"/dashboard/planning\">\n            <Card className=\"hover:shadow-md transition-shadow cursor-pointer h-32 sm:h-28 flex flex-col items-center justify-center max-w-[140px] sm:max-w-full w-full mx-auto border border-yellow-200 shadow-sm\">\n              <div className=\"p-2 bg-yellow-50 rounded-lg mb-2\">\n                <Calendar className=\"w-5 h-5 sm:w-6 sm:h-6 text-yellow-600\" />\n              </div>\n              <h3 className=\"font-semibold text-sm sm:text-base text-yellow-900 text-center whitespace-normal break-words leading-snug\">\n                Planning\n              </h3>\n              <p className=\"text-xs sm:text-sm text-yellow-700 text-center whitespace-normal break-words leading-snug\">\n                Ver calendario\n              </p>\n            </Card>\n          </Link>\n\n          <Link href=\"/dashboard/holidays\">\n            <Card className=\"hover:shadow-md transition-shadow cursor-pointer h-32 sm:h-28 flex flex-col items-center justify-center max-w-[140px] sm:max-w-full w-full mx-auto border border-purple-200 shadow-sm\">\n              <div className=\"p-2 bg-purple-50 rounded-lg mb-2\">\n                <Calendar className=\"w-5 h-5 sm:w-6 sm:h-6 text-purple-600\" />\n              </div>\n              <h3 className=\"font-semibold text-sm sm:text-base text-purple-900 text-center whitespace-normal break-words leading-snug\">\n                Festivos\n              </h3>\n              <p className=\"text-xs sm:text-sm text-purple-700 text-center whitespace-normal break-words leading-snug\">\n                Gestionar festivos\n              </p>\n            </Card>\n          </Link>\n        </div>\n\n        {/* USUARIOS RECIENTES */}\n        <Card className=\"mb-6\">\n          <CardContent className=\"p-4 sm:p-6\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <h2 className=\"text-lg font-semibold text-secondary\">Usuarios Recientes</h2>\n              <Link href=\"/dashboard/users\">\n                <Button variant=\"secondary\" size=\"sm\">\n                  Ver Todos\n                </Button>\n              </Link>\n            </div>\n            \n            {allUsersLoading ? (\n              <div className=\"text-center py-8\">\n                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-2\"></div>\n                <p className=\"text-slate-600\">Cargando usuarios...</p>\n              </div>\n            ) : allUsers && allUsers.length > 0 ? (\n              <div className=\"space-y-4\">\n                {allUsers.slice(0, 5).map((user) => (\n                  <div key={user.id} className=\"p-4 bg-white rounded-lg border border-slate-200 shadow-sm hover:shadow-md transition-shadow\">\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex items-start space-x-3 flex-1\">\n                        <div className=\"p-2 bg-primary/10 rounded-lg flex-shrink-0\">\n                          <User className=\"w-5 h-5 text-primary\" />\n                        </div>\n                        <div className=\"flex-1 min-w-0\">\n                          <div className=\"flex items-center space-x-2 mb-2\">\n                            <h3 className=\"font-semibold text-secondary text-lg\">\n                              {user.name} {user.surname}\n                            </h3>\n                            <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${\n                              user.is_active \n                                ? 'bg-green-100 text-green-700' \n                                : 'bg-red-100 text-red-700'\n                            }`}>\n                              {user.is_active ? 'Activo' : 'Inactivo'}\n                            </span>\n                          </div>\n                          \n                          <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-3 mb-3\">\n                            <div className=\"flex items-center space-x-2\">\n                              <Phone className=\"w-4 h-4 text-slate-500\" />\n                              <span className=\"text-sm text-slate-600\">{user.phone}</span>\n                            </div>\n                            <div className=\"flex items-center space-x-2\">\n                              <Clock className=\"w-4 h-4 text-slate-500\" />\n                              <span className=\"text-sm text-slate-600\">{user.monthly_hours}h/mes</span>\n                            </div>\n                          </div>\n\n                          {user.address && (\n                            <div className=\"flex items-start space-x-2 mb-3\">\n                              <MapPin className=\"w-4 h-4 text-slate-500 mt-0.5\" />\n                              <span className=\"text-sm text-slate-600\">{user.address}</span>\n                            </div>\n                          )}\n\n                          <div className=\"flex items-start space-x-2\">\n                            <CalendarDays className=\"w-4 h-4 text-slate-500 mt-0.5\" />\n                            <div className=\"flex-1\">\n                              <UserScheduleDisplay schedule={user.schedule} />\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex items-center space-x-2 ml-4\">\n                        <Link href={`/dashboard/users/${user.id}/edit`}>\n                          <Button variant=\"secondary\" size=\"sm\">\n                            <Edit className=\"w-4 h-4\" />\n                          </Button>\n                        </Link>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <div className=\"text-center py-8\">\n                <div className=\"text-slate-400 mb-4\">\n                  <User className=\"w-16 h-16 mx-auto\" />\n                </div>\n                <h3 className=\"text-lg font-medium text-secondary mb-2\">No hay usuarios</h3>\n                <p className=\"text-slate-600 mb-4\">\n                  Comienza creando tu primer usuario del servicio\n                </p>\n                <Link href=\"/dashboard/users/new\">\n                  <Button className=\"bg-primary hover:bg-primary/90\">\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    Crear Primer Usuario\n                  </Button>\n                </Link>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* RESUMEN GENERAL */}\n        <Card>\n          <CardContent className=\"p-4 sm:p-6\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <h2 className=\"text-lg font-semibold text-secondary\">Resumen General</h2>\n            </div>\n            \n            {/* Desktop: 3 columnas */}\n            <div className=\"hidden lg:grid grid-cols-3 gap-6\">\n              <div className=\"flex items-center p-4 bg-white rounded-lg border border-slate-200 shadow-sm\">\n                <div className=\"p-2 bg-blue-50 rounded-lg flex-shrink-0\">\n                  <User className=\"w-6 h-6 text-blue-600\" />\n                </div>\n                <div className=\"ml-4 min-w-0 flex-1\">\n                  <p className=\"text-sm font-medium text-slate-600\">Total Usuarios</p>\n                  <p className=\"text-2xl font-bold text-secondary\">\n                    {allUsersLoading ? '...' : allUsers?.length || 0}\n                  </p>\n                  <p className=\"text-xs text-slate-500\">En base de datos</p>\n                </div>\n              </div>\n\n              <div className=\"flex items-center p-4 bg-white rounded-lg border border-slate-200 shadow-sm\">\n                <div className=\"p-2 bg-green-50 rounded-lg flex-shrink-0\">\n                  <Clock className=\"w-6 h-6 text-green-600\" />\n                </div>\n                <div className=\"ml-4 min-w-0 flex-1\">\n                  <p className=\"text-sm font-medium text-slate-600\">Usuarios Activos</p>\n                  <p className=\"text-2xl font-bold text-secondary\">\n                    {activeUsersLoading ? '...' : activeUsers?.length || 0}\n                  </p>\n                  <p className=\"text-xs text-slate-500\">Listos para asignar</p>\n                </div>\n              </div>\n\n              <div className=\"flex items-center p-4 bg-white rounded-lg border border-slate-200 shadow-sm\">\n                <div className=\"p-2 bg-orange-50 rounded-lg flex-shrink-0\">\n                  <Phone className=\"w-6 h-6 text-orange-600\" />\n                </div>\n                <div className=\"ml-4 min-w-0 flex-1\">\n                  <p className=\"text-sm font-medium text-slate-600\">Horas Totales/Mes</p>\n                  <p className=\"text-2xl font-bold text-secondary\">\n                    {activeUsersLoading ? '...' : activeUsers?.reduce((sum, u) => sum + (u.monthly_hours || 0), 0) || 0}h\n                  </p>\n                  <p className=\"text-xs text-slate-500\">Para distribuir</p>\n                </div>\n              </div>\n            </div>\n\n            {/* Mobile: 1 columna */}\n            <div className=\"lg:hidden grid grid-cols-1 gap-4\">\n              <div className=\"flex items-center p-4 bg-white rounded-lg border border-slate-200 shadow-sm\">\n                <div className=\"p-2 bg-blue-50 rounded-lg flex-shrink-0\">\n                  <User className=\"w-5 h-5 text-blue-600\" />\n                </div>\n                <div className=\"ml-3 min-w-0 flex-1\">\n                  <p className=\"text-sm font-medium text-slate-600\">Total Usuarios</p>\n                  <p className=\"text-xl font-bold text-secondary\">\n                    {allUsersLoading ? '...' : allUsers?.length || 0}\n                  </p>\n                  <p className=\"text-xs text-slate-500\">En base de datos</p>\n                </div>\n              </div>\n\n              <div className=\"flex items-center p-4 bg-white rounded-lg border border-slate-200 shadow-sm\">\n                <div className=\"p-2 bg-green-50 rounded-lg flex-shrink-0\">\n                  <Clock className=\"w-5 h-5 text-green-600\" />\n                </div>\n                <div className=\"ml-3 min-w-0 flex-1\">\n                  <p className=\"text-sm font-medium text-slate-600\">Usuarios Activos</p>\n                  <p className=\"text-xl font-bold text-secondary\">\n                    {activeUsersLoading ? '...' : activeUsers?.length || 0}\n                  </p>\n                  <p className=\"text-xs text-slate-500\">Listos para asignar</p>\n                </div>\n              </div>\n\n              <div className=\"flex items-center p-4 bg-white rounded-lg border border-slate-200 shadow-sm\">\n                <div className=\"p-2 bg-orange-50 rounded-lg flex-shrink-0\">\n                  <Phone className=\"w-5 h-5 text-orange-600\" />\n                </div>\n                <div className=\"ml-3 min-w-0 flex-1\">\n                  <p className=\"text-sm font-medium text-slate-600\">Horas Totales/Mes</p>\n                  <p className=\"text-xl font-bold text-secondary\">\n                    {activeUsersLoading ? '...' : activeUsers?.reduce((sum, u) => sum + (u.monthly_hours || 0), 0) || 0}h\n                  </p>\n                  <p className=\"text-xs text-slate-500\">Para distribuir</p>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </main>\n\n      {/* FOOTER */}\n      <footer className=\"fixed bottom-0 left-0 right-0 z-50 bg-white border-t border-secondary shadow-lg\">\n        <nav className=\"flex justify-around py-3\">\n          <Link href=\"/dashboard/users\" className=\"flex flex-col items-center text-xs text-slate-600 hover:text-primary transition-colors\">\n            <User className=\"w-5 h-5 mb-1\" />\n            <span className=\"hidden sm:inline\">Usuarios</span>\n          </Link>\n          <Link href=\"/dashboard/workers\" className=\"flex flex-col items-center text-xs text-slate-600 hover:text-success transition-colors\">\n            <Users className=\"w-5 h-5 mb-1\" />\n            <span className=\"hidden sm:inline\">Trabajadoras</span>\n          </Link>\n          <Link href=\"/dashboard/assignments\" className=\"flex flex-col items-center text-xs text-slate-600 hover:text-accent transition-colors\">\n            <Clock className=\"w-5 h-5 mb-1\" />\n            <span className=\"hidden sm:inline\">Asignaciones</span>\n          </Link>\n          <Link href=\"/dashboard/planning\" className=\"flex flex-col items-center text-xs text-slate-600 hover:text-warning transition-colors\">\n            <Calendar className=\"w-5 h-5 mb-1\" />\n            <span className=\"hidden sm:inline\">Planning</span>\n          </Link>\n          <Link href=\"/dashboard/settings\" className=\"flex flex-col items-center text-xs text-slate-600 hover:text-secondary transition-colors\">\n            <Settings className=\"w-5 h-5 mb-1\" />\n            <span className=\"hidden sm:inline\">Configuración</span>\n          </Link>\n        </nav>\n      </footer>\n\n      {/* Espacio para el footer fijo */}\n      <div className=\"h-20\"></div>\n    </div>\n  )\n} ","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"/Users/alamia.es/Public/SAD/src/app/dashboard/planning/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":68,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":68,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3051,3054],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3051,3054],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":116,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":116,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4628,4631],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4628,4631],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":125,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":125,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5019,5022],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5019,5022],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AssignmentPlanning' is defined but never used.","line":138,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":138,"endColumn":29},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":147,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":147,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5617,5620],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5617,5620],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":148,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":148,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5631,5634],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5631,5634],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setMonthlyViewType' is assigned a value but never used.","line":177,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":177,"endColumn":45},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'daysArray' is assigned a value but never used.","line":423,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":423,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'groupIdx' is defined but never used.","line":867,"column":88,"nodeType":null,"messageId":"unusedVar","endLine":867,"endColumn":96},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'groupIdx' is defined but never used.","line":915,"column":86,"nodeType":null,"messageId":"unusedVar","endLine":915,"endColumn":94}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport { useState, useEffect } from 'react'\nimport { useRouter } from 'next/navigation'\nimport Link from 'next/link'\nimport { Button } from '@/components/ui/button'\nimport { Card, CardContent } from '@/components/ui/card'\nimport { useToast } from '@/components/ui/toast'\nimport { Plus, ChevronLeft, ChevronRight, Users, User as UserIcon, Clock, AlertTriangle, Settings, ArrowLeft, LogOut, Menu, X } from 'lucide-react'\nimport { useAssignments } from '@/hooks/useAssignments'\nimport { useWorkers } from '@/hooks/useWorkers'\nimport { useUsers } from '@/hooks/useUsers'\nimport type { Assignment, WeekDay, User, Worker } from '@/lib/types'\nimport { supabase } from '@/lib/supabase'\nimport { addDays, startOfWeek, format, isSameDay } from 'date-fns'\nimport { es } from 'date-fns/locale'\nimport { Modal } from '@/components/ui/modal'\nimport { getDaysInMonth } from '@/lib/calendar'\nimport { getHolidaysForYear } from '@/lib/holidayUtils'\n\n// Configuración para evitar el prerender estático\nexport const dynamic = 'force-dynamic'\n\n// Función para detectar si un día es festivo o fin de semana\nfunction isHolidayOrWeekend(date: Date, holidays: string[]): boolean {\n  const day = date.getDay()\n  const dateString = date.toISOString().split('T')[0]\n  return day === 0 || day === 6 || holidays.includes(dateString)\n}\n\n// Añadir firma de índice para Record<WeekDay, ...> y usar day as WeekDay\nfunction getScheduleForDay(\n  schedule: Schedule | undefined,\n  day: WeekDay\n): string[] {\n  if (!schedule) return [];\n  const daySchedule = schedule[day];\n  if (!daySchedule || !daySchedule.enabled) return [];\n  return daySchedule.timeSlots.map(slot => `${slot.start}-${slot.end}`);\n}\n\n// Drawer inferior reutilizable\nfunction BottomDrawer({ open, onClose, title, children }: { open: boolean, onClose: () => void, title: string, children: React.ReactNode }) {\n  if (!open) return null\n  return (\n    <div className=\"fixed inset-0 z-50 flex flex-col items-center justify-end\" role=\"dialog\" aria-modal=\"true\" aria-label={title}>\n      <div className=\"absolute inset-0 bg-black/40\" onClick={onClose} aria-label=\"Cerrar modal\" tabIndex={0} />\n      <div className=\"relative w-full max-w-md mx-auto bg-white rounded-t-2xl shadow-lg animate-slide-up\" style={{ minHeight: '40vh', maxHeight: '90vh', overflowY: 'auto' }}>\n        <div className=\"flex items-center justify-between px-4 py-3 border-b border-secondary\">\n          <span className=\"font-semibold text-lg text-secondary\">{title}</span>\n          <button onClick={onClose} className=\"p-2 rounded-full hover:bg-secondary/30\" aria-label=\"Cerrar\">\n            <X className=\"w-5 h-5\" aria-hidden=\"true\" />\n          </button>\n        </div>\n        <div className=\"p-4\">{children}</div>\n      </div>\n    </div>\n  )\n}\n\n// Función para convertir hora a minutos para ordenamiento\nfunction timeToMinutes(time: string): number {\n  const [hours, minutes] = time.split(':').map(Number);\n  return hours * 60 + (minutes || 0);\n}\n\n// Función para obtener la hora de inicio de un horario\nfunction getStartTime(times: any): string | null {\n  if (!times) return null;\n\n  // Caso: array de strings (antiguo)\n  if (Array.isArray(times) && typeof times[0] === 'string') {\n    return times[0];\n  }\n\n  // Caso: array de objetos {start, end}\n  if (Array.isArray(times) && typeof times[0] === 'object' && times[0] !== null) {\n    const firstTime = times[0];\n    if (typeof firstTime === 'string') return firstTime;\n    if (firstTime.start) return firstTime.start;\n  }\n\n  return null;\n}\n\n// Función para convertir día de la semana a WeekDay\nfunction getDayKey(day: Date): WeekDay {\n  const dayNames: WeekDay[] = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];\n  return dayNames[day.getDay()];\n}\n\n// Función para ordenar asignaciones por hora de inicio\nfunction sortAssignmentsByTime(assignments: Assignment[], dayKey: WeekDay): Assignment[] {\n  return [...assignments].sort((a, b) => {\n    const timesA = getScheduleForDay(a.schedule, dayKey);\n    const timesB = getScheduleForDay(b.schedule, dayKey);\n\n    const startTimeA = getStartTime(timesA);\n    const startTimeB = getStartTime(timesB);\n\n    // Si ambos tienen horario, ordenar por hora\n    if (startTimeA && startTimeB) {\n      return timeToMinutes(startTimeA) - timeToMinutes(startTimeB);\n    }\n\n    // Si solo uno tiene horario, el que tiene horario va primero\n    if (startTimeA && !startTimeB) return -1;\n    if (!startTimeA && startTimeB) return 1;\n\n    // Si ninguno tiene horario, mantener orden original\n    return 0;\n  });\n}\n\n// Utilidad para mostrar horarios flexibles\nfunction renderScheduleTimes(times: any): string {\n  if (!times) return 'Sin horario';\n  // Caso: array de strings (antiguo)\n  if (Array.isArray(times) && typeof times[0] === 'string') {\n    return times.length === 2 ? `${times[0]} - ${times[1]}` : times.join(', ');\n  }\n  // Caso: array de objetos {start, end}\n  if (Array.isArray(times) && typeof times[0] === 'object' && times[0] !== null) {\n    return times\n      .map((t: any) => {\n        if (typeof t === 'string') return t;\n        if (t.start && t.end) return `${t.start}-${t.end}`;\n        if (t.start) return t.start;\n        return '';\n      })\n      .filter(Boolean)\n      .join(', ');\n  }\n  return 'Sin horario';\n}\n\n// Añadir tipo local compatible para el uso en este archivo\ninterface AssignmentPlanning {\n  id: string;\n  user_id: string;\n  worker_id: string;\n  weekly_hours?: number;\n  schedule?: Record<string, { enabled: boolean; timeSlots: { start: string; end: string }[] }>;\n  start_date: string;\n  status: string;\n  assignment_type?: string;\n  worker?: any;\n  user?: any;\n}\n\n// Redefinir el tipo de schedule para permitir acceso dinámico\ninterface DaySchedule {\n  enabled: boolean;\n  timeSlots: { start: string; end: string }[];\n}\n\ninterface Schedule {\n  [key: string]: DaySchedule;\n}\n\nexport default function PlanningPage() {\n  const router = useRouter();\n  const { showToast, ToastComponent } = useToast()\n  const [selectedDate, setSelectedDate] = useState(new Date())\n  const { assignments, isLoading, createAssignment, deleteAssignment, updateAssignment } = useAssignments()\n  const { workers } = useWorkers()\n  const { data: users } = useUsers()\n  const [showMobileMenu, setShowMobileMenu] = useState(false)\n  const [viewMode, setViewMode] = useState<'day' | 'week' | 'month'>('day')\n  const [drawer, setDrawer] = useState<null | 'workers' | 'users' | 'conflicts' | 'settings'>(null)\n  const [userSearch, setUserSearch] = useState('')\n  const [workerSearch, setWorkerSearch] = useState('')\n  const [showAssignModal, setShowAssignModal] = useState(false)\n  const [selectedUser, setSelectedUser] = useState<User | null>(null)\n  const [selectedWorker, setSelectedWorker] = useState<Worker | null>(null)\n  const [groupBy, setGroupBy] = useState<'none' | 'worker' | 'user'>('none')\n  const [monthlyViewType, setMonthlyViewType] = useState<'grid' | 'list'>('list')\n  const [holidays, setHolidays] = useState<string[]>([])\n\n  const [weekStart, setWeekStart] = useState(startOfWeek(selectedDate, { weekStartsOn: 1 }))\n  const weekDays = Array.from({ length: 7 }, (_, i) => addDays(weekStart, i))\n\n  // Cargar festivos\n  useEffect(() => {\n    async function loadHolidays() {\n      // // // // // const year = selectedDate.getFullYear()\n      const holidaysData = await getHolidaysForYear(year)\n      setHolidays(holidaysData.map(h => h.date))\n    }\n    loadHolidays()\n  }, [selectedDate])\n\n  // Función para obtener el día de la semana correcto (lunes=0, domingo=6)\n  const getCorrectDayOfWeek = (date: Date): number => {\n    const day = date.getDay();\n    return day === 0 ? 6 : day - 1; // Convertir domingo (0) a 6, resto restar 1\n  }\n\n  // const goToPrevWeek = () => setWeekStart(prev => addDays(prev, -7))\n  // const goToNextWeek = () => setWeekStart(prev => addDays(prev, 7))\n\n  // Filtros globales de planning\n  const [filterWorkerId, setFilterWorkerId] = useState<string>('');\n  const [filterUserId, setFilterUserId] = useState<string>('');\n  const [filterWorkerSearch, setFilterWorkerSearch] = useState('');\n  const [filterUserSearch, setFilterUserSearch] = useState('');\n\n  const filteredAssignments = assignments.filter((a) => {\n    // Filtro por trabajadora y usuario\n    if (filterWorkerId && a.worker_id !== filterWorkerId) return false;\n    if (filterUserId && a.user_id !== filterUserId) return false;\n\n    // if (viewMode === 'day') {\n      // Para asignaciones de festivos, mostrarlas en días festivos y fines de semana\n      if (a.assignment_type === 'festivos') {\n        const isHoliday = isHolidayOrWeekend(selectedDate, holidays);\n        // .split('T')[0]})`);\n        return isHoliday;\n      }\n\n      // Para asignaciones con horario específico (laborables)\n      if (a.schedule) {\n        const weekDays = ['monday','tuesday','wednesday','thursday','friday','saturday','sunday'] as const;\n        const dayKey = weekDays[getCorrectDayOfWeek(selectedDate)] as WeekDay;\n        const daySchedule = a.schedule[dayKey];\n        if (daySchedule && daySchedule.enabled && daySchedule.timeSlots && daySchedule.timeSlots.length > 0) {\n          return true;\n        }\n      }\n\n      // Si no hay horario, pero el start_date coincide, mostrarla también\n      if (a.start_date) {\n        const start = new Date(a.start_date);\n        return isSameDay(start, selectedDate);\n      }\n      return false;\n    // }\n    // return true; // <-- Eliminar este return fuera del bloque\n  })\n\n  const assignmentsByDay = weekDays.map(day => {\n    return filteredAssignments.filter(a => {\n      // Para asignaciones de festivos, mostrarlas en días festivos y fines de semana\n      if (a.assignment_type === 'festivos') {\n        return isHolidayOrWeekend(day, holidays);\n      }\n\n      // Para asignaciones con horario específico (laborables)\n      if (a.schedule) {\n        const dayKey = ['monday','tuesday','wednesday','thursday','friday','saturday','sunday'][getCorrectDayOfWeek(day)];\n        const daySchedule = a.schedule[dayKey];\n        if (daySchedule && daySchedule.enabled && daySchedule.timeSlots && daySchedule.timeSlots.length > 0) {\n          return true;\n        }\n      }\n\n      // Si no hay horario, pero el start_date coincide, mostrarla también\n      if (a.start_date) {\n        return isSameDay(new Date(a.start_date), day);\n      }\n      return false;\n    });\n  });\n\n  const goToPrevDay = () => {\n    const prev = new Date(selectedDate)\n    prev.setDate(prev.getDate() - 1)\n    setSelectedDate(prev)\n  }\n\n  const goToNextDay = () => {\n    const next = new Date(selectedDate)\n    next.setDate(next.getDate() + 1)\n    setSelectedDate(next)\n  }\n\n  const goToPrevWeek = () => {\n    const prev = new Date(weekStart)\n    prev.setDate(prev.getDate() - 7)\n    setWeekStart(prev)\n  }\n\n  const goToNextWeek = () => {\n    const next = new Date(weekStart)\n    next.setDate(next.getDate() + 7)\n    setWeekStart(next)\n  }\n\n  // Función para formatear el rango de fechas de la semana\n  const formatWeekRange = () => {\n    const startOfWeek = new Date(weekStart)\n    const endOfWeek = new Date(weekStart)\n    endOfWeek.setDate(endOfWeek.getDate() + 6)\n\n    const startFormatted = startOfWeek.toLocaleDateString('es-ES', { day: 'numeric', month: 'short' })\n    const endFormatted = endOfWeek.toLocaleDateString('es-ES', { day: 'numeric', month: 'short', year: 'numeric' })\n\n    return `${startFormatted} - ${endFormatted}`\n  }\n\n  const handleLogout = async () => {\n    await supabase.auth.signOut()\n    router.push('/')\n  }\n\n  // Filtros de búsqueda\n  const filteredUsers = users?.filter(u => {\n    const q = userSearch.toLowerCase()\n    return (\n      u.name?.toLowerCase().includes(q) ||\n      u.surname?.toLowerCase().includes(q) ||\n      u.phone?.toLowerCase().includes(q) ||\n      u.address?.toLowerCase().includes(q)\n    )\n  }) || []\n\n  const filteredWorkers = workers?.filter(w => {\n    const q = workerSearch.toLowerCase()\n    return (\n      w.name?.toLowerCase().includes(q) ||\n      w.surname?.toLowerCase().includes(q) ||\n      w.email?.toLowerCase().includes(q)\n    )\n  }) || []\n\n  // Simulación de conflictos (puedes reemplazar con lógica real)\n  const conflicts: { type: string; description: string; assignments: Assignment[] }[] = [];\n  if (assignments && assignments.length > 0 && workers && users) {\n    // 1. Solapamiento de horarios para la misma trabajadora\n    for (let i = 0; i < assignments.length; i++) {\n      for (let j = i + 1; j < assignments.length; j++) {\n        const a1 = assignments[i];\n        const a2 = assignments[j];\n        if (a1.worker_id === a2.worker_id) {\n          // Mismo día y solapamiento de horario\n          const days: WeekDay[] = ['monday','tuesday','wednesday','thursday','friday','saturday','sunday'];\n          for (const day of days) {\n            const t1 = a1.schedule?.[day]?.timeSlots?.map(slot => `${slot.start}-${slot.end}`) || [];\n            const t2 = a2.schedule?.[day]?.timeSlots?.map(slot => `${slot.start}-${slot.end}`) || [];\n            if (t1.length > 0 && t2.length > 0) {\n              // Comprobar solapamiento de horas\n              const [s1, e1] = t1;\n              const [s2, e2] = t2;\n              if (!(e1 <= s2 || e2 <= s1)) {\n                conflicts.push({\n                  type: 'Solapamiento de horarios (trabajadora)',\n                  description: `La trabajadora ${a1.worker?.name} ${a1.worker?.surname} tiene dos asignaciones solapadas el ${day} (${s1}-${e1} y ${s2}-${e2})`,\n                  assignments: [a1, a2]\n                });\n              }\n            }\n          }\n        }\n      }\n    }\n    // 2. Trabajadora con más horas semanales asignadas que su máximo\n    for (const worker of workers) {\n      const workerAssignments = assignments.filter(a => a.worker_id === worker.id);\n      const totalHours = workerAssignments.reduce((sum, a) => sum + (a.weekly_hours || 0), 0);\n      if (totalHours > worker.max_weekly_hours) {\n        conflicts.push({\n          type: 'Exceso de horas (trabajadora)',\n          description: `La trabajadora ${worker.name} ${worker.surname} tiene asignadas ${totalHours}h/semana (máximo permitido: ${worker.max_weekly_hours}h)`,\n          assignments: workerAssignments\n        });\n      }\n    }\n    // 3. Usuario con más de una trabajadora asignada en el mismo horario\n    for (let i = 0; i < assignments.length; i++) {\n      for (let j = i + 1; j < assignments.length; j++) {\n        const a1 = assignments[i];\n        const a2 = assignments[j];\n        if (a1.user_id === a2.user_id && a1.worker_id !== a2.worker_id) {\n          // Mismo día y solapamiento de horario\n          const days: WeekDay[] = ['monday','tuesday','wednesday','thursday','friday','saturday','sunday'];\n          for (const day of days) {\n            const t1 = a1.schedule?.[day]?.timeSlots?.map(slot => `${slot.start}-${slot.end}`) || [];\n            const t2 = a2.schedule?.[day]?.timeSlots?.map(slot => `${slot.start}-${slot.end}`) || [];\n            if (t1.length > 0 && t2.length > 0) {\n              const [s1, e1] = t1;\n              const [s2, e2] = t2;\n              if (!(e1 <= s2 || e2 <= s1)) {\n                conflicts.push({\n                  type: 'Solapamiento de trabajadoras (usuario)',\n                  description: `El usuario ${a1.user?.name} ${a1.user?.surname} tiene dos trabajadoras asignadas en el mismo horario el ${day} (${s1}-${e1} y ${s2}-${e2})`,\n                  assignments: [a1, a2]\n                });\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  // Estado para los campos del modal de asignación\n  const [assignHours, setAssignHours] = useState('')\n  const [assignStartDate, setAssignStartDate] = useState('')\n  const [assignLoading, setAssignLoading] = useState(false)\n\n  // Estado para el modal de resolución de conflicto\n  const [resolveModal, setResolveModal] = useState<{ open: boolean; conflict: { type: string; description: string; assignments: Assignment[] } | null }>({ open: false, conflict: null })\n  const [deletingAssignmentId, setDeletingAssignmentId] = useState<string | null>(null)\n\n  // Estado para el modal de confirmación de eliminación\n  const [deleteConfirm, setDeleteConfirm] = useState<{ open: boolean; assignment: Assignment | null }>({ open: false, assignment: null })\n\n  // Estado para la reasignación\n  const [reassignState, setReassignState] = useState<{ assignmentId: string | null, workerId: string, loading: boolean }>({ assignmentId: null, workerId: '', loading: false })\n\n  // Debug temporal para Dolores\n  // assignments.forEach(a => {\n  //   if (a.user?.name === 'Dolores') {\n  //     // //     const weekDays = ['monday','tuesday','wednesday','thursday','friday','saturday','sunday'] as const;\n  //     const dayKey = weekDays[getCorrectDayOfWeek(selectedDate)] as WeekDay;\n  //     const times = getScheduleForDay(a.specific_schedule, dayKey);\n  //     // //   }\n  // });\n\n  // // // // // const year = selectedDate.getFullYear();\n  // // // // // const month = selectedDate.getMonth() + 1; // 1-indexed\n  const daysInMonth = getDaysInMonth(year, month);\n  const daysArray = Array.from({ length: daysInMonth }, (_, i) => i + 1);\n\n  return (\n    <div className=\"min-h-screen bg-slate-50 pb-24\">\n      <header className=\"bg-white shadow-sm border-b border-slate-200\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center py-4\">\n            <div className=\"flex-1 min-w-0\">\n              <h1 className=\"text-xl sm:text-2xl font-bold text-slate-900 truncate\">\n                Planning Semanal\n              </h1>\n              <p className=\"text-sm text-slate-600 truncate\">\n                Vista diaria de asignaciones\n              </p>\n            </div>\n\n            <div className=\"hidden md:flex items-center space-x-2\">\n              <Link href=\"/dashboard\">\n                <Button variant=\"secondary\" size=\"sm\">\n                  <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                  Dashboard\n                </Button>\n              </Link>\n              <Link href=\"/dashboard/workers\">\n                <Button variant=\"secondary\" size=\"sm\">\n                  <Users className=\"w-4 h-4 mr-2\" />\n                  Trabajadoras\n                </Button>\n              </Link>\n              <Link href=\"/dashboard/users\">\n                <Button variant=\"secondary\" size=\"sm\">\n                  <UserIcon className=\"w-4 h-4 mr-2\" />\n                  Usuarios\n                </Button>\n              </Link>\n              <Link href=\"/dashboard/assignments\">\n                <Button variant=\"secondary\" size=\"sm\">\n                  <Clock className=\"w-4 h-4 mr-2\" />\n                  Asignaciones\n                </Button>\n              </Link>\n              <Button variant=\"secondary\" size=\"sm\" onClick={handleLogout}>\n                <LogOut className=\"w-4 h-4 mr-2\" />\n                Cerrar Sesión\n              </Button>\n            </div>\n\n            <div className=\"md:hidden relative\">\n              <Button\n                variant=\"secondary\"\n                size=\"sm\"\n                onClick={() => setShowMobileMenu(!showMobileMenu)}\n                aria-label=\"Abrir menú de navegación\"\n                aria-expanded={showMobileMenu}\n                className=\"relative z-10\"\n              >\n                <Menu className=\"w-4 h-4\" aria-hidden=\"true\" />\n              </Button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Barra de filtros activos */}\n      {(filterWorkerId || filterUserId) && (\n        <div className=\"flex flex-wrap gap-2 px-4 py-2 bg-slate-100 border-b items-center\">\n          {filterWorkerId && (\n            <span className=\"inline-flex items-center bg-blue-100 text-blue-800 text-xs font-medium px-2.5 py-1 rounded-full\">\n              Trabajadora: {workers?.find(w => w.id === filterWorkerId)?.name} {workers?.find(w => w.id === filterWorkerId)?.surname}\n              <button className=\"ml-2 text-blue-600 hover:text-blue-900\" onClick={() => { setFilterWorkerId(''); setFilterWorkerSearch(''); }} aria-label=\"Quitar filtro trabajadora\">×</button>\n            </span>\n          )}\n          {filterUserId && (\n            <span className=\"inline-flex items-center bg-green-100 text-green-800 text-xs font-medium px-2.5 py-1 rounded-full\">\n              Usuario: {users?.find(u => u.id === filterUserId)?.name} {users?.find(u => u.id === filterUserId)?.surname}\n              <button className=\"ml-2 text-green-600 hover:text-green-900\" onClick={() => { setFilterUserId(''); setFilterUserSearch(''); }} aria-label=\"Quitar filtro usuario\">×</button>\n            </span>\n          )}\n        </div>\n      )}\n\n      {/* Menú contextual móvil unificado */}\n      <div className={`md:hidden transition-all duration-300 ease-in-out ${\n        showMobileMenu\n          ? 'max-h-96 opacity-100 visible'\n          : 'max-h-0 opacity-0 invisible'\n      }`}>\n        <div className=\"py-4 border-t border-slate-200 bg-white shadow-lg\">\n          <div className=\"flex flex-col space-y-2 px-4\">\n            <Link href=\"/dashboard\" onClick={() => setShowMobileMenu(false)}>\n              <Button variant=\"secondary\" size=\"sm\" className=\"w-full justify-start\">\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                Dashboard\n              </Button>\n            </Link>\n            <Link href=\"/dashboard/planning\" onClick={() => setShowMobileMenu(false)}>\n              <Button variant=\"secondary\" size=\"sm\" className=\"w-full justify-start\">\n                <Clock className=\"w-4 h-4 mr-2\" />\n                Planning\n              </Button>\n            </Link>\n            <Link href=\"/dashboard/workers\" onClick={() => setShowMobileMenu(false)}>\n              <Button variant=\"secondary\" size=\"sm\" className=\"w-full justify-start\">\n                <Users className=\"w-4 h-4 mr-2\" />\n                Trabajadoras\n              </Button>\n            </Link>\n            <Link href=\"/dashboard/users\" onClick={() => setShowMobileMenu(false)}>\n              <Button variant=\"secondary\" size=\"sm\" className=\"w-full justify-start\">\n                <UserIcon className=\"w-4 h-4 mr-2\" />\n                Usuarios\n              </Button>\n            </Link>\n            <Link href=\"/dashboard/assignments\" onClick={() => setShowMobileMenu(false)}>\n              <Button variant=\"secondary\" size=\"sm\" className=\"w-full justify-start\">\n                <Clock className=\"w-4 h-4 mr-2\" />\n                Asignaciones\n              </Button>\n            </Link>\n            <Button\n              variant=\"secondary\"\n              size=\"sm\"\n              onClick={() => {\n                handleLogout()\n                setShowMobileMenu(false)\n              }}\n              className=\"w-full justify-start\"\n            >\n              <LogOut className=\"w-4 h-4 mr-2\" />\n              Cerrar Sesión\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      <main className=\"max-w-7xl mx-auto px-2 sm:px-4 lg:px-8 py-6 sm:py-8\">\n\n        {/* ACCIONES RÁPIDAS */}\n        <div className=\"grid grid-cols-2 sm:grid-cols-2 lg:grid-cols-4 gap-3 mb-6\">\n          <Link href=\"/dashboard/assignments/new\">\n            <Card className=\"hover:shadow-md transition-shadow cursor-pointer h-32 sm:h-28 flex flex-col items-center justify-center max-w-[140px] sm:max-w-full w-full mx-auto border border-blue-200 shadow-sm\">\n              <div className=\"p-2 bg-blue-50 rounded-lg mb-2\">\n                <Plus className=\"w-5 h-5 sm:w-6 sm:h-6 text-blue-600\" />\n              </div>\n              <h3 className=\"font-semibold text-sm sm:text-base text-blue-900 text-center whitespace-normal break-words leading-snug\">\n                Nueva Asignación\n              </h3>\n              <p className=\"text-xs sm:text-sm text-blue-700 text-center whitespace-normal break-words leading-snug\">\n                Crear asignación\n              </p>\n            </Card>\n          </Link>\n\n          <Link href=\"/dashboard/users\">\n            <Card className=\"hover:shadow-md transition-shadow cursor-pointer h-32 sm:h-28 flex flex-col items-center justify-center max-w-[140px] sm:max-w-full w-full mx-auto border border-green-200 shadow-sm\">\n              <div className=\"p-2 bg-green-50 rounded-lg mb-2\">\n                <UserIcon className=\"w-5 h-5 sm:w-6 sm:h-6 text-green-600\" />\n              </div>\n              <h3 className=\"font-semibold text-sm sm:text-base text-green-900 text-center whitespace-normal break-words leading-snug\">\n                Usuarios\n              </h3>\n              <p className=\"text-xs sm:text-sm text-green-700 text-center whitespace-normal break-words leading-snug\">\n                Gestionar usuarios\n              </p>\n            </Card>\n          </Link>\n\n          <Link href=\"/dashboard/workers\">\n            <Card className=\"hover:shadow-md transition-shadow cursor-pointer h-32 sm:h-28 flex flex-col items-center justify-center max-w-[140px] sm:max-w-full w-full mx-auto border border-purple-200 shadow-sm\">\n              <div className=\"p-2 bg-purple-50 rounded-lg mb-2\">\n                <Users className=\"w-5 h-5 sm:w-6 sm:h-6 text-purple-600\" />\n              </div>\n              <h3 className=\"font-semibold text-sm sm:text-base text-purple-900 text-center whitespace-normal break-words leading-snug\">\n                Trabajadoras\n              </h3>\n              <p className=\"text-xs sm:text-sm text-purple-700 text-center whitespace-normal break-words leading-snug\">\n                Gestionar trabajadoras\n              </p>\n            </Card>\n          </Link>\n\n          <Card className=\"hover:shadow-md transition-shadow cursor-pointer h-32 sm:h-28 flex flex-col items-center justify-center max-w-[140px] sm:max-w-full w-full mx-auto border border-yellow-200 shadow-sm\">\n            <div className=\"p-2 bg-yellow-50 rounded-lg mb-1 mt-1\">\n              <Clock className=\"w-5 h-5 sm:w-6 sm:h-6 text-yellow-600\" />\n            </div>\n            <h3 className=\"font-semibold text-sm sm:text-base text-yellow-900 text-center whitespace-normal break-words leading-snug\">\n              Vista Actual\n            </h3>\n            <div className=\"text-xs sm:text-sm text-yellow-700 text-center whitespace-normal break-words leading-snug\">\n              {viewMode === 'day' ? 'Vista Diaria' : viewMode === 'week' ? 'Vista Semanal' : 'Vista Mensual'}\n            </div>\n          </Card>\n        </div>\n\n      {viewMode === 'day' && (\n        <div className=\"flex items-center justify-between px-4 py-3 bg-white border-b\">\n          <Button variant=\"secondary\" size=\"sm\" onClick={goToPrevDay}>\n            <ChevronLeft className=\"w-5 h-5\" />\n          </Button>\n          <span className=\"font-semibold text-lg\">\n            {selectedDate.toLocaleDateString('es-ES', { weekday: 'short', day: 'numeric', month: 'short', year: 'numeric' })}\n          </span>\n          <Button variant=\"secondary\" size=\"sm\" onClick={goToNextDay}>\n            <ChevronRight className=\"w-5 h-5\" />\n          </Button>\n        </div>\n      )}\n      {/* Barra de navegación semanal */}\n      {viewMode === 'week' && (\n        <div className=\"flex items-center justify-between px-4 py-3 bg-white border-b\">\n          <Button variant=\"secondary\" size=\"sm\" onClick={goToPrevWeek}>\n            <ChevronLeft className=\"w-5 h-5\" />\n          </Button>\n          <span className=\"font-semibold text-lg\">\n            Semana del {formatWeekRange()}\n          </span>\n          <Button variant=\"secondary\" size=\"sm\" onClick={goToNextWeek}>\n            <ChevronRight className=\"w-5 h-5\" />\n          </Button>\n        </div>\n      )}\n\n      {/* Barra de navegación de meses en vista mensual */}\n      {viewMode === 'month' && (\n        <div className=\"flex items-center justify-between px-4 py-3 bg-white border-b\">\n          <Button variant=\"secondary\" size=\"sm\" onClick={() => {\n            const prev = new Date(selectedDate)\n            prev.setMonth(prev.getMonth() - 1)\n            setSelectedDate(prev)\n          }}>\n            <ChevronLeft className=\"w-5 h-5\" />\n          </Button>\n          <span className=\"font-semibold text-lg\">\n            {selectedDate.toLocaleDateString('es-ES', { month: 'long', year: 'numeric' })}\n          </span>\n          <Button variant=\"secondary\" size=\"sm\" onClick={() => {\n            const next = new Date(selectedDate)\n            next.setMonth(next.getMonth() + 1)\n            setSelectedDate(next)\n          }}>\n            <ChevronRight className=\"w-5 h-5\" />\n          </Button>\n        </div>\n      )}\n\n      <div className=\"px-4 py-2\">\n        <Card>\n          <CardContent className=\"flex items-center justify-between py-3\">\n            <div>\n              <span className=\"font-bold text-slate-900\">{filteredAssignments.length}</span>\n              <span className=\"ml-1 text-slate-600 text-sm\">asignaciones</span>\n            </div>\n            <div className=\"text-slate-600\">\n              <span className=\"font-bold\">{conflicts.length}</span>\n              <span className=\"ml-1 text-sm\">conflicto{conflicts.length === 1 ? '' : 's'}</span>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <div className=\"mx-auto max-w-2xl px-2 sm:px-4 space-y-3 mt-2\">\n        {isLoading ? (\n          <div className=\"text-center text-slate-400 py-8\">\n            <Clock className=\"w-10 h-10 mx-auto mb-2 animate-spin\" />\n            <div className=\"font-medium\">Cargando asignaciones...</div>\n          </div>\n        ) : filteredAssignments.length === 0 ? (\n          <div className=\"text-center text-slate-400 py-8\">\n            <Clock className=\"w-10 h-10 mx-auto mb-2\" />\n            <div className=\"font-medium\">No hay asignaciones para esta vista</div>\n          </div>\n        ) : (\n          viewMode === 'day' ? (\n            groupBy === 'none' ? (\n              filteredAssignments.map((a) => {\n                const weekDays = ['sunday','monday','tuesday','wednesday','thursday','friday','saturday'] as const\n                const dayKey = weekDays[selectedDate.getDay()] as WeekDay\n                const times = getScheduleForDay(a.schedule, dayKey)\n                return (\n                  <Card key={a.id}>\n                    <CardContent className=\"py-4 px-4 flex flex-col gap-1\">\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"font-semibold text-base\">\n                          {renderScheduleTimes(times)}\n                        </span>\n                        <span className=\"text-xs text-slate-500 capitalize\">{a.status}</span>\n                      </div>\n                      <div className=\"mt-1 text-sm text-slate-700 flex items-center gap-2\">\n                        Usuario: {a.user?.name} {a.user?.surname}\n                      </div>\n                      <div className=\"text-sm text-slate-700 flex items-center gap-2\">\n                        Trabajadora: {a.worker?.name} {a.worker?.surname}\n                      </div>\n                      <div className=\"flex gap-2 mt-2\">\n                        <Link href={`/dashboard/assignments/${a.id}`}><Button size=\"sm\" variant=\"secondary\">Ver</Button></Link>\n                        <Link href={`/dashboard/assignments/${a.id}/edit`}><Button size=\"sm\" variant=\"secondary\">Editar</Button></Link>\n                      </div>\n                    </CardContent>\n                  </Card>\n                )\n              })\n            ) : groupBy === 'worker' ? (\n              Object.entries(filteredAssignments.reduce((acc, a) => {\n                const key = a.worker?.id || 'Sin trabajadora';\n                if (!acc[key]) acc[key] = [];\n                acc[key].push(a);\n                return acc;\n              }, {} as Record<string, Assignment[]>)).map(([workerId, assignments]) => (\n                <div key={workerId} className=\"mb-6\">\n                  <div className=\"font-bold text-slate-800 mb-2 text-base\">\n                    {assignments[0].worker?.name ? `${assignments[0].worker?.name} ${assignments[0].worker?.surname}` : 'Sin trabajadora'}\n                  </div>\n                  <div className=\"space-y-2\">\n                    {assignments.map(a => {\n                      const weekDays = ['sunday','monday','tuesday','wednesday','thursday','friday','saturday'] as const\n                      const dayKey = weekDays[selectedDate.getDay()] as WeekDay\n                      const times = getScheduleForDay(a.schedule, dayKey)\n                      return (\n                        <Card key={a.id}>\n                          <CardContent className=\"py-3 px-4 flex flex-col gap-1\">\n                            <div className=\"flex items-center justify-between\">\n                              <span className=\"font-semibold text-base\">\n                                {renderScheduleTimes(times)}\n                              </span>\n                              <span className=\"text-xs text-slate-500 capitalize\">{a.status}</span>\n                            </div>\n                            <div className=\"mt-1 text-sm text-slate-700 flex items-center gap-2\">\n                              Usuario: {a.user?.name} {a.user?.surname}\n                            </div>\n                            <div className=\"flex gap-2 mt-2\">\n                              <Link href={`/dashboard/assignments/${a.id}`}><Button size=\"sm\" variant=\"secondary\">Ver</Button></Link>\n                              <Link href={`/dashboard/assignments/${a.id}/edit`}><Button size=\"sm\" variant=\"secondary\">Editar</Button></Link>\n                            </div>\n                          </CardContent>\n                        </Card>\n                      )\n                    })}\n                  </div>\n                </div>\n              ))\n            ) : (\n              Object.entries(filteredAssignments.reduce((acc, a) => {\n                const key = a.user?.id || 'Sin usuario';\n                if (!acc[key]) acc[key] = [];\n                acc[key].push(a);\n                return acc;\n              }, {} as Record<string, Assignment[]>)).map(([userId, assignments]) => (\n                <div key={userId} className=\"mb-6\">\n                  <div className=\"font-bold text-slate-800 mb-2 text-base\">\n                    {assignments[0].user?.name ? `${assignments[0].user?.name} ${assignments[0].user?.surname}` : 'Sin usuario'}\n                  </div>\n                  <div className=\"space-y-2\">\n                    {assignments.map((a, idx) => {\n                      const weekDays = ['monday','tuesday','wednesday','thursday','friday','saturday','sunday'] as const;\n                      const dayKey = weekDays[getCorrectDayOfWeek(selectedDate)] as WeekDay;\n                      const times = getScheduleForDay(a.schedule, dayKey);\n                      return (\n                        <div key={`${a.id}-${idx}`} className=\"text-[10px] text-slate-700 truncate\">\n                          <div className=\"font-medium\">{renderScheduleTimes(times)}</div>\n                          <div className=\"text-[8px] text-slate-500\">\n                            {a.user?.name} {a.user?.surname}\n                          </div>\n                        </div>\n                      )\n                    })}\n                  </div>\n                </div>\n              ))\n            )\n          ) : viewMode === 'week' ? (\n            groupBy === 'none' ? (\n              weekDays.map((day, idx) => (\n                <Card key={idx}>\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center justify-between mb-3 pb-2 border-b\">\n                      <div className=\"font-bold text-slate-700\">\n                        {format(day, 'EEEE', { locale: es })}\n                      </div>\n                      <div className=\"text-sm text-slate-500\">\n                        {format(day, 'd MMMM yyyy', { locale: es })}\n                      </div>\n                    </div>\n                    <div className=\"space-y-2\">\n                      {assignmentsByDay[idx].length === 0 ? (\n                        <div className=\"text-center text-slate-400 py-4\">\n                          <Clock className=\"w-8 h-8 mx-auto mb-2\" />\n                          <div className=\"text-sm\">Sin asignaciones</div>\n                        </div>\n                      ) : (\n                        sortAssignmentsByTime(assignmentsByDay[idx], getDayKey(weekDays[idx])).map(a => {\n                          const weekDays = ['monday','tuesday','wednesday','thursday','friday','saturday','sunday'] as const;\n                          const dayKey = weekDays[getCorrectDayOfWeek(day)] as WeekDay;\n                          const times = getScheduleForDay(a.schedule, dayKey);\n                          return (\n                            <div key={a.id} className=\"border rounded-lg p-3\">\n                              <div className=\"flex items-center justify-between mb-2\">\n                                <span className=\"font-semibold text-sm\">\n                                  {renderScheduleTimes(times)}\n                                </span>\n                                <span className=\"text-xs text-slate-500 capitalize px-2 py-1 bg-slate-100 rounded\">{a.status}</span>\n                              </div>\n                              <div className=\"text-sm text-slate-700 mb-1\">\n                                <span className=\"font-medium\">Usuario:</span> {a.user?.name} {a.user?.surname}\n                              </div>\n                              <div className=\"text-sm text-slate-700 mb-2\">\n                                <span className=\"font-medium\">Trabajadora:</span> {a.worker?.name} {a.worker?.surname}\n                              </div>\n                              <div className=\"flex gap-2\">\n                                <Link href={`/dashboard/assignments/${a.id}`}>\n                                  <Button size=\"sm\" variant=\"secondary\">Ver</Button>\n                                </Link>\n                                <Link href={`/dashboard/assignments/${a.id}/edit`}>\n                                  <Button size=\"sm\" variant=\"secondary\">Editar</Button>\n                                </Link>\n                              </div>\n                            </div>\n                          )\n                        })\n                      )}\n                    </div>\n                  </CardContent>\n                </Card>\n              ))\n            ) : groupBy === 'worker' ? (\n              weekDays.map((day, idx) => {\n                // Agrupar assignmentsByDay[idx] por trabajadora\n                const grouped: [string, Assignment[]][] = Object.entries(assignmentsByDay[idx].reduce((acc, a) => {\n                  const key = a.worker?.id || 'Sin trabajadora';\n                  if (!acc[key]) acc[key] = [];\n                  acc[key].push(a);\n                  return acc;\n                }, {} as Record<string, Assignment[]>));\n                return (\n                  <Card key={idx}>\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center justify-between mb-3 pb-2 border-b\">\n                        <div className=\"font-bold text-slate-700\">\n                          {format(day, 'EEEE', { locale: es })}\n                        </div>\n                        <div className=\"text-sm text-slate-500\">\n                          {format(day, 'd MMMM yyyy', { locale: es })}\n                        </div>\n                      </div>\n                      <div className=\"space-y-4\">\n                        {grouped.map(([workerId, assignments]: [string, Assignment[]], groupIdx) => (\n                          <div key={workerId} className=\"mb-2\">\n                            <div className=\"font-bold text-slate-800 mb-1 text-sm\">\n                              {assignments[0].worker?.name ? `${assignments[0].worker?.name} ${assignments[0].worker?.surname}` : 'Sin trabajadora'}\n                            </div>\n                            <div className=\"space-y-2\">\n                              {sortAssignmentsByTime(assignments, getDayKey(day)).map((a, idx) => {\n                                const weekDays = ['sunday','monday','tuesday','wednesday','thursday','friday','saturday'] as const;\n                                const dayKey = weekDays[day.getDay()] as WeekDay;\n                                const times = getScheduleForDay(a.schedule, dayKey);\n                                return (\n                                  <div key={`${a.id}-${idx}`} className=\"text-[10px] text-slate-700 truncate\">\n                                    <div className=\"font-medium\">{renderScheduleTimes(times)}</div>\n                                    <div className=\"text-[8px] text-slate-500\">\n                                      {a.user?.name} {a.user?.surname}\n                                    </div>\n                                  </div>\n                                )\n                              })}\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    </CardContent>\n                  </Card>\n                );\n              })\n            ) : (\n              weekDays.map((day, idx) => {\n                // Agrupar assignmentsByDay[idx] por usuario\n                const grouped: [string, Assignment[]][] = Object.entries(assignmentsByDay[idx].reduce((acc, a) => {\n                  const key = a.user?.id || 'Sin usuario';\n                  if (!acc[key]) acc[key] = [];\n                  acc[key].push(a);\n                  return acc;\n                }, {} as Record<string, Assignment[]>));\n                return (\n                  <Card key={idx}>\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center justify-between mb-3 pb-2 border-b\">\n                        <div className=\"font-bold text-slate-700\">\n                          {format(day, 'EEEE', { locale: es })}\n                        </div>\n                        <div className=\"text-sm text-slate-500\">\n                          {format(day, 'd MMMM yyyy', { locale: es })}\n                        </div>\n                      </div>\n                      <div className=\"space-y-4\">\n                        {grouped.map(([userId, assignments]: [string, Assignment[]], groupIdx) => (\n                          <div key={userId} className=\"mb-2\">\n                            <div className=\"font-bold text-slate-800 mb-1 text-sm\">\n                              {assignments[0].user?.name ? `${assignments[0].user?.name} ${assignments[0].user?.surname}` : 'Sin usuario'}\n                            </div>\n                            <div className=\"space-y-2\">\n                              {sortAssignmentsByTime(assignments, getDayKey(day)).map((a, idx) => {\n                                const weekDays = ['sunday','monday','tuesday','wednesday','thursday','friday','saturday'] as const;\n                                const dayKey = weekDays[day.getDay()] as WeekDay;\n                                const times = getScheduleForDay(a.schedule, dayKey);\n                                return (\n                                  <div key={`${a.id}-${idx}`} className=\"text-[10px] text-slate-700 truncate\">\n                                    <div className=\"font-medium\">{renderScheduleTimes(times)}</div>\n                                    <div className=\"text-[8px] text-slate-500\">\n                                      {a.worker?.name} {a.worker?.surname}\n                                    </div>\n                                  </div>\n                                )\n                              })}\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    </CardContent>\n                  </Card>\n                );\n              })\n            )\n          ) : (\n            // Vista mensual\n            (() => {\n              // // // // // const year = selectedDate.getFullYear();\n              // // // // // const month = selectedDate.getMonth() + 1; // 1-indexed\n              const daysInMonth = getDaysInMonth(year, month);\n              const daysArray = Array.from({ length: daysInMonth }, (_, i) => i + 1);\n              // Agrupar asignaciones por día\n              const assignmentsByDay: Record<number, Assignment[]> = {};\n              filteredAssignments.forEach(a => {\n                if (a.start_date) {\n                  const date = new Date(a.start_date);\n                  if (date.getFullYear() === year && date.getMonth() + 1 === month) {\n                    const day = date.getDate();\n                    if (!assignmentsByDay[day]) assignmentsByDay[day] = [];\n                    assignmentsByDay[day].push(a);\n                  }\n                }\n                // También considerar specific_schedule para asignaciones recurrentes\n                if (a.schedule) {\n                  daysArray.forEach(dayNum => {\n                    const date = new Date(year, month - 1, dayNum);\n                    const weekDays = ['monday','tuesday','wednesday','thursday','friday','saturday','sunday'] as const;\n                    const dayKey = weekDays[getCorrectDayOfWeek(date)] as WeekDay;\n                    const times = getScheduleForDay(a.schedule, dayKey);\n                    if (times && times.length > 0) {\n                      if (!assignmentsByDay[dayNum]) assignmentsByDay[dayNum] = [];\n                      // Evitar duplicados si ya se añadió por start_date\n                      if (!assignmentsByDay[dayNum].some(ass => ass.id === a.id)) {\n                        assignmentsByDay[dayNum].push(a);\n                      }\n                    } else if (a.start_date) {\n                      // Si no hay horario pero el start_date coincide con ese día\n                      const start = new Date(a.start_date);\n                      if (\n                        start.getFullYear() === year &&\n                        start.getMonth() + 1 === month &&\n                        start.getDate() === dayNum\n                      ) {\n                        if (!assignmentsByDay[dayNum]) assignmentsByDay[dayNum] = [];\n                        if (!assignmentsByDay[dayNum].some(ass => ass.id === a.id)) {\n                          assignmentsByDay[dayNum].push(a);\n                        }\n                      }\n                    }\n                  });\n                }\n              });\n              if (monthlyViewType === 'grid') {\n                // Render cuadrícula mensual\n                return (\n                  <div>\n                    <div className=\"grid grid-cols-7 gap-2 mb-2 text-xs text-slate-500\">\n                      <div>Lun</div><div>Mar</div><div>Mié</div><div>Jue</div><div>Vie</div><div>Sáb</div><div>Dom</div>\n                    </div>\n                    <div className=\"grid grid-cols-7 gap-2\">\n                      {(() => {\n                        const firstDay = new Date(year, month - 1, 1).getDay();\n                        const blanks = (firstDay + 6) % 7;\n                        const cells = [];\n                        for (let i = 0; i < blanks; i++) {\n                          cells.push(<div key={`blank-${i}`}></div>);\n                        }\n                        daysArray.forEach(dayNum => {\n                          const dayAssignments = assignmentsByDay[dayNum] || [];\n                          // Agrupación\n                          let grouped: [string, Assignment[]][] = [];\n                          if (groupBy === 'worker') {\n                            grouped = Object.entries(dayAssignments.reduce((acc, a) => {\n                              const key = a.worker?.id || 'Sin trabajadora';\n                              if (!acc[key]) acc[key] = [];\n                              acc[key].push(a);\n                              return acc;\n                            }, {} as Record<string, Assignment[]>));\n                          } else if (groupBy === 'user') {\n                            grouped = Object.entries(dayAssignments.reduce((acc, a) => {\n                              const key = a.user?.id || 'Sin usuario';\n                              if (!acc[key]) acc[key] = [];\n                              acc[key].push(a);\n                              return acc;\n                            }, {} as Record<string, Assignment[]>));\n                          } else {\n                            grouped = dayAssignments.map((a, idx) => [`${a.id}-${dayNum}-${idx}`, [a]]);\n                          }\n                          cells.push(\n                            <div key={`day-${dayNum}`} className=\"border rounded min-h-[80px] p-1 flex flex-col bg-white\">\n                              <div className=\"font-bold text-xs mb-1 text-slate-700\">{dayNum}</div>\n                              {grouped.length === 0 ? (\n                                <div className=\"text-slate-300 text-xs\">—</div>\n                              ) : (\n                                grouped.map(([groupKey, groupAssignments]: [string, Assignment[]], groupIdx) => (\n                                  <div key={`group-${groupKey}-${dayNum}-${groupIdx}`} className=\"mb-1\">\n                                    {groupBy !== 'none' && (\n                                      <div className=\"text-[10px] font-semibold text-slate-500 truncate mb-0.5\">\n                                        {groupBy === 'worker'\n                                          ? groupAssignments[0].worker?.name + ' ' + groupAssignments[0].worker?.surname\n                                          : groupAssignments[0].user?.name + ' ' + groupAssignments[0].user?.surname}\n                                      </div>\n                                    )}\n                                    {sortAssignmentsByTime(groupAssignments, getDayKey(new Date(year, month - 1, dayNum))).map((a, idx) => {\n                                      const weekDays = ['monday','tuesday','wednesday','thursday','friday','saturday','sunday'] as const;\n                                      const dayKey = weekDays[getCorrectDayOfWeek(new Date(year, month - 1, dayNum))] as WeekDay;\n                                      const times = getScheduleForDay(a.schedule, dayKey);\n                                      return (\n                                        <div key={`a-${a.id}-${dayNum}-${groupKey}-${idx}`} className=\"text-[10px] text-slate-700 truncate\">\n                                          <div className=\"font-medium\">{renderScheduleTimes(times)}</div>\n                                          {groupBy === 'none' && (\n                                            <div className=\"text-[8px] text-slate-500\">\n                                              {a.user?.name} {a.user?.surname}\n                                            </div>\n                                          )}\n                                        </div>\n                                      )\n                                    })}\n                                  </div>\n                                ))\n                              )}\n                            </div>\n                          );\n                        });\n                        return cells;\n                      })()}\n                    </div>\n                  </div>\n                );\n              } else {\n                // Render lista mensual agrupada por día\n                return (\n                  <div className=\"space-y-4\">\n                    {daysArray.map(dayNum => {\n                      const dayAssignments = assignmentsByDay[dayNum] || [];\n                      if (dayAssignments.length === 0) return null;\n                      // Agrupación\n                      let grouped: [string, Assignment[]][] = [];\n                      if (groupBy === 'worker') {\n                        grouped = Object.entries(dayAssignments.reduce((acc, a) => {\n                          const key = a.worker?.id || 'Sin trabajadora';\n                          if (!acc[key]) acc[key] = [];\n                          acc[key].push(a);\n                          return acc;\n                        }, {} as Record<string, Assignment[]>));\n                      } else if (groupBy === 'user') {\n                        grouped = Object.entries(dayAssignments.reduce((acc, a) => {\n                          const key = a.user?.id || 'Sin usuario';\n                          if (!acc[key]) acc[key] = [];\n                          acc[key].push(a);\n                          return acc;\n                        }, {} as Record<string, Assignment[]>));\n                      } else {\n                        grouped = dayAssignments.map((a, idx) => [`${a.id}-${dayNum}-${idx}`, [a]]);\n                      }\n                      return (\n                        <div key={`list-day-${dayNum}`} className=\"border rounded bg-white p-2\">\n                          <div className=\"font-bold text-slate-700 mb-1 text-sm\">\n                            {dayNum} {selectedDate.toLocaleDateString('es-ES', { month: 'short', year: 'numeric' })}\n                          </div>\n                          {grouped.map(([groupKey, groupAssignments], groupIdx) => (\n                            <div key={`list-group-${groupKey}-${dayNum}-${groupIdx}`} className=\"mb-1\">\n                              {groupBy !== 'none' && (\n                                <div className=\"text-xs font-semibold text-slate-500 truncate mb-0.5\">\n                                  {groupBy === 'worker'\n                                    ? groupAssignments[0].worker?.name + ' ' + groupAssignments[0].worker?.surname\n                                    : groupAssignments[0].user?.name + ' ' + groupAssignments[0].user?.surname}\n                                </div>\n                              )}\n                              {sortAssignmentsByTime(groupAssignments, getDayKey(new Date(year, month - 1, dayNum))).map((a, idx) => {\n                                const weekDays = ['monday','tuesday','wednesday','thursday','friday','saturday','sunday'] as const;\n                                const dayKey = weekDays[getCorrectDayOfWeek(new Date(year, month - 1, dayNum))] as WeekDay;\n                                const times = getScheduleForDay(a.schedule, dayKey);\n                                return (\n                                  <div key={`list-a-${a.id}-${dayNum}-${groupKey}-${idx}`} className=\"text-xs text-slate-700 truncate\">\n                                    <div className=\"font-medium\">{renderScheduleTimes(times)}</div>\n                                    {groupBy === 'none' && (\n                                      <div className=\"text-[10px] text-slate-500\">\n                                        {a.user?.name} {a.user?.surname} - {a.worker?.name} {a.worker?.surname}\n                                      </div>\n                                    )}\n                                  </div>\n                                );\n                              })}\n                            </div>\n                          ))}\n                        </div>\n                      );\n                    })}\n                  </div>\n                );\n              }\n            })()\n          )\n        )}\n      </div>\n\n      <Link href=\"/dashboard/assignments/new\">\n        <Button className=\"fixed bottom-24 right-6 rounded-full shadow-lg bg-green-600 hover:bg-green-700 w-14 h-14 p-0 flex items-center justify-center z-50\" size=\"sm\">\n          <Plus className=\"w-7 h-7\" />\n        </Button>\n      </Link>\n\n      <div className=\"fixed bottom-0 left-0 right-0 bg-white border-t shadow-lg z-40\">\n        <nav className=\"flex justify-around py-2\">\n          <Button variant=\"secondary\" className=\"flex flex-col items-center text-xs\" onClick={() => setDrawer('workers')}>\n            <Users className=\"w-5 h-5 mb-1\" />\n            Trabajadoras\n          </Button>\n          <Button variant=\"secondary\" className=\"flex flex-col items-center text-xs\" onClick={() => setDrawer('users')}>\n            <UserIcon className=\"w-5 h-5 mb-1\" />\n            Usuarios\n          </Button>\n          <Button variant=\"secondary\" className=\"flex flex-col items-center text-xs\" onClick={() => setDrawer('conflicts')}>\n            <AlertTriangle className=\"w-5 h-5 mb-1\" />\n            Conflictos\n          </Button>\n          <Button variant=\"secondary\" className=\"flex flex-col items-center text-xs\" onClick={() => setDrawer('settings')}>\n            <Settings className=\"w-5 h-5 mb-1\" />\n            Ajustes\n          </Button>\n        </nav>\n      </div>\n\n      {/* Drawers funcionales */}\n      <BottomDrawer open={drawer === 'workers'} onClose={() => setDrawer(null)} title=\"Trabajadoras\">\n        <input\n          type=\"text\"\n          placeholder=\"Buscar trabajadora...\"\n          className=\"w-full mb-3 px-3 py-2 border rounded\"\n          value={workerSearch}\n          onChange={e => setWorkerSearch(e.target.value)}\n        />\n        <div className=\"space-y-2\">\n          {filteredWorkers.length === 0 ? (\n            <div className=\"text-slate-400 text-center py-6\">No hay trabajadoras</div>\n          ) : (\n            filteredWorkers.map(w => (\n              <div key={w.id} className=\"flex items-center justify-between border rounded px-3 py-2\">\n                <div>\n                  <div className=\"font-medium\">{w.name} {w.surname}</div>\n                  {w.email && <div className=\"text-xs text-slate-500\">{w.email}</div>}\n                </div>\n                <div className=\"flex gap-1\">\n                  <Link href={`/dashboard/workers/${w.id}`}><Button size=\"sm\" variant=\"secondary\">Ver</Button></Link>\n                  <Link href={`/dashboard/workers/${w.id}/edit`}><Button size=\"sm\" variant=\"secondary\">Editar</Button></Link>\n                </div>\n              </div>\n            ))\n          )}\n        </div>\n      </BottomDrawer>\n      <BottomDrawer open={drawer === 'users'} onClose={() => setDrawer(null)} title=\"Usuarios\">\n        <input\n          type=\"text\"\n          placeholder=\"Buscar usuario...\"\n          className=\"w-full mb-3 px-3 py-2 border rounded\"\n          value={userSearch}\n          onChange={e => setUserSearch(e.target.value)}\n        />\n        <div className=\"space-y-2\">\n          {filteredUsers.length === 0 ? (\n            <div className=\"text-slate-400 text-center py-6\">No hay usuarios</div>\n          ) : (\n            filteredUsers.map(u => (\n              <div key={u.id} className=\"flex items-center justify-between border rounded px-3 py-2\">\n                <div>\n                  <div className=\"font-medium\">{u.name} {u.surname}</div>\n                  {u.phone && <div className=\"text-xs text-slate-500\">{u.phone}</div>}\n                </div>\n                <div className=\"flex gap-1\">\n                  <Link href={`/dashboard/users/${u.id}`}><Button size=\"sm\" variant=\"secondary\">Ver</Button></Link>\n                  <Button size=\"sm\" variant=\"secondary\" onClick={() => { setSelectedUser(u); setShowAssignModal(true); }}>Asignar</Button>\n                  <Link href={`/dashboard/users/${u.id}/edit`}><Button size=\"sm\" variant=\"secondary\">Editar</Button></Link>\n                </div>\n              </div>\n            ))\n          )}\n        </div>\n      </BottomDrawer>\n      <BottomDrawer open={drawer === 'conflicts'} onClose={() => setDrawer(null)} title=\"Conflictos\">\n        {conflicts.length === 0 ? (\n          <div className=\"text-slate-400 text-center py-6\">No hay conflictos detectados</div>\n        ) : (\n          <div className=\"space-y-2\">\n            {conflicts.map((c, i) => (\n              <div key={i} className=\"border rounded px-3 py-2\">\n                <div className=\"font-medium mb-1\">{c.type}</div>\n                <div className=\"text-xs text-slate-500 mb-1\">{c.description}</div>\n                <div className=\"text-xs text-slate-400 mb-2\">\n                  {c.assignments.map(a => (\n                    <div key={a.id}>\n                      Asignación: {a.user?.name} {a.user?.surname} - {a.worker?.name} {a.worker?.surname}\n                    </div>\n                  ))}\n                </div>\n                <Button size=\"sm\" variant=\"secondary\" onClick={() => setResolveModal({ open: true, conflict: c })}>\n                  Resolver\n                </Button>\n              </div>\n            ))}\n          </div>\n        )}\n      </BottomDrawer>\n      <BottomDrawer open={drawer === 'settings'} onClose={() => setDrawer(null)} title=\"Ajustes\">\n        <div className=\"space-y-4 py-4\">\n          <div>\n            <label className=\"block text-sm font-medium text-slate-700 mb-1\">Vista del planning</label>\n            <select\n              className=\"border rounded px-2 py-1 text-sm w-full\"\n              value={viewMode}\n              onChange={e => setViewMode(e.target.value as 'day' | 'week' | 'month')}\n            >\n              <option value=\"day\">Día</option>\n              <option value=\"week\">Semana</option>\n              <option value=\"month\">Mes</option>\n            </select>\n          </div>\n          <div>\n            <label className=\"block text-sm font-medium text-slate-700 mb-1\">Agrupar asignaciones por</label>\n            <select\n              className=\"border rounded px-2 py-1 text-sm w-full\"\n              value={groupBy}\n              onChange={e => setGroupBy(e.target.value as 'none' | 'worker' | 'user')}\n            >\n              <option value=\"none\">Ninguno</option>\n              <option value=\"worker\">Trabajadora</option>\n              <option value=\"user\">Usuario</option>\n            </select>\n          </div>\n          <div>\n            <label className=\"block text-sm font-medium text-slate-700 mb-1\">Filtrar por trabajadora</label>\n            <input\n              type=\"text\"\n              className=\"border rounded px-2 py-1 text-sm w-full mb-1\"\n              placeholder=\"Buscar trabajadora...\"\n              value={filterWorkerId ? (workers?.find(w => w.id === filterWorkerId)?.name + ' ' + workers?.find(w => w.id === filterWorkerId)?.surname) : filterWorkerSearch}\n              onChange={e => {\n                setFilterWorkerSearch(e.target.value);\n                setFilterWorkerId('');\n              }}\n              onFocus={e => e.target.select()}\n              autoComplete=\"off\"\n            />\n            {filterWorkerSearch !== '' && !filterWorkerId && (\n              <div className=\"relative\">\n                <div className=\"absolute z-10 w-full bg-white border rounded shadow max-h-40 overflow-y-auto\">\n                  <button className=\"w-full text-left px-3 py-1 text-sm hover:bg-slate-100\" onClick={() => { setFilterWorkerId(''); setFilterWorkerSearch(''); }}>Todas</button>\n                  {workers?.filter(w => (w.name + ' ' + w.surname).toLowerCase().includes(filterWorkerSearch.toLowerCase())).map(w => (\n                    <button key={w.id} className=\"w-full text-left px-3 py-1 text-sm hover:bg-slate-100\" onClick={() => { setFilterWorkerId(w.id); setFilterWorkerSearch(''); }}>{w.name} {w.surname}</button>\n                  ))}\n                </div>\n              </div>\n            )}\n            {filterWorkerId && (\n              <div className=\"mt-1\">\n                <button className=\"text-xs text-blue-600 underline\" onClick={() => { setFilterWorkerId(''); setFilterWorkerSearch(''); }}>Quitar filtro</button>\n              </div>\n            )}\n          </div>\n          <div>\n            <label className=\"block text-sm font-medium text-slate-700 mb-1\">Filtrar por usuario</label>\n            <input\n              type=\"text\"\n              className=\"border rounded px-2 py-1 text-sm w-full mb-1\"\n              placeholder=\"Buscar usuario...\"\n              value={filterUserId ? (users?.find(u => u.id === filterUserId)?.name + ' ' + users?.find(u => u.id === filterUserId)?.surname) : filterUserSearch}\n              onChange={e => {\n                setFilterUserSearch(e.target.value);\n                setFilterUserId('');\n              }}\n              onFocus={e => e.target.select()}\n              autoComplete=\"off\"\n            />\n            {filterUserSearch !== '' && !filterUserId && (\n              <div className=\"relative\">\n                <div className=\"absolute z-10 w-full bg-white border rounded shadow max-h-40 overflow-y-auto\">\n                  <button className=\"w-full text-left px-3 py-1 text-sm hover:bg-slate-100\" onClick={() => { setFilterUserId(''); setFilterUserSearch(''); }}>Todos</button>\n                  {users?.filter(u => (u.name + ' ' + u.surname).toLowerCase().includes(filterUserSearch.toLowerCase())).map(u => (\n                    <button key={u.id} className=\"w-full text-left px-3 py-1 text-sm hover:bg-slate-100\" onClick={() => { setFilterUserId(u.id); setFilterUserSearch(''); }}>{u.name} {u.surname}</button>\n                  ))}\n                </div>\n              </div>\n            )}\n            {filterUserId && (\n              <div className=\"mt-1\">\n                <button className=\"text-xs text-blue-600 underline\" onClick={() => { setFilterUserId(''); setFilterUserSearch(''); }}>Quitar filtro</button>\n              </div>\n            )}\n          </div>\n        </div>\n      </BottomDrawer>\n      {/* Modal para asignar usuario a trabajadora */}\n      {showAssignModal && (\n        <div className=\"fixed inset-0 z-50 flex items-center justify-center bg-black/40\" role=\"dialog\" aria-modal=\"true\" aria-label=\"Asignar usuario\">\n          <div className=\"bg-white rounded-lg shadow-lg p-6 w-full max-w-md\">\n            <div className=\"flex justify-between items-center mb-4\">\n              <div className=\"font-bold text-lg\">Asignar usuario</div>\n              <button onClick={() => { setShowAssignModal(false); setAssignHours(''); setAssignStartDate(''); setSelectedWorker(null); setWorkerSearch(''); }} className=\"p-2 rounded-full hover:bg-slate-100\" aria-label=\"Cerrar\">\n                <X className=\"w-5 h-5\" aria-hidden=\"true\" />\n              </button>\n            </div>\n            <div className=\"mb-4\">Selecciona una trabajadora para asignar a <span className=\"font-medium\">{selectedUser?.name} {selectedUser?.surname}</span>:</div>\n            {/* Combobox de trabajadora */}\n            <div className=\"relative mb-4\">\n              <input\n                type=\"text\"\n                placeholder=\"Buscar trabajadora...\"\n                className=\"w-full border rounded px-3 py-2\"\n                value={workerSearch}\n                onChange={e => {\n                  setWorkerSearch(e.target.value);\n                  setSelectedWorker(null);\n                }}\n                autoFocus\n              />\n              {workerSearch && (\n                <div className=\"absolute left-0 right-0 mt-1 bg-white border rounded shadow-lg max-h-48 overflow-y-auto z-10\">\n                  {filteredWorkers.length === 0 ? (\n                    <div className=\"text-slate-400 text-center py-2\">No hay trabajadoras</div>\n                  ) : (\n                    filteredWorkers.map(w => (\n                      <button\n                        key={w.id}\n                        className={`w-full text-left px-4 py-2 hover:bg-slate-100 ${selectedWorker?.id === w.id ? 'bg-slate-200' : ''}`}\n                        onClick={() => { setSelectedWorker(w); setWorkerSearch(`${w.name} ${w.surname}`); }}\n                        type=\"button\"\n                      >\n                        {w.name} {w.surname} {w.email && <span className=\"text-xs text-slate-500 ml-2\">{w.email}</span>}\n                      </button>\n                    ))\n                  )}\n                </div>\n              )}\n            </div>\n            {/* Fin combobox */}\n            <input\n              type=\"number\"\n              min=\"1\"\n              max=\"40\"\n              placeholder=\"Horas semanales asignadas\"\n              className=\"w-full border rounded px-3 py-2 mb-4\"\n              value={assignHours}\n              onChange={e => setAssignHours(e.target.value)}\n            />\n            <input\n              type=\"date\"\n              className=\"w-full border rounded px-3 py-2 mb-4\"\n              value={assignStartDate}\n              onChange={e => setAssignStartDate(e.target.value)}\n            />\n            <Button className=\"w-full\" loading={assignLoading} disabled={assignLoading}\n              onClick={async () => {\n                if (!selectedUser || !selectedWorker || !assignHours || !assignStartDate) {\n                  showToast('Completa todos los campos', 'warning');\n                  return;\n                }\n                setAssignLoading(true);\n                const { error } = await createAssignment({\n                  worker_id: selectedWorker.id,\n                  user_id: selectedUser.id,\n                  weekly_hours: Number(assignHours),\n                  start_date: assignStartDate,\n                  priority: 2,\n                  status: 'active',\n                });\n                setAssignLoading(false);\n                if (error) {\n                  showToast(error, 'error');\n                } else {\n                  showToast('Asignación creada correctamente', 'success');\n                  setShowAssignModal(false);\n                  setAssignHours('');\n                  setAssignStartDate('');\n                  setSelectedWorker(null);\n                  setWorkerSearch('');\n                }\n              }}\n            >Asignar</Button>\n          </div>\n        </div>\n      )}\n\n      {/* Modal de resolución de conflicto */}\n      {resolveModal.open && resolveModal.conflict && (\n        <div className=\"fixed inset-0 z-50 flex items-center justify-center bg-black/40\" role=\"dialog\" aria-modal=\"true\" aria-label=\"Resolver conflicto\">\n          <div className=\"bg-white rounded-lg shadow-lg p-6 w-full max-w-lg\">\n            <div className=\"flex justify-between items-center mb-4\">\n              <div className=\"font-bold text-lg\">Resolver conflicto</div>\n              <button onClick={() => setResolveModal({ open: false, conflict: null })} className=\"p-2 rounded-full hover:bg-slate-100\" aria-label=\"Cerrar\">\n                <X className=\"w-5 h-5\" aria-hidden=\"true\" />\n              </button>\n            </div>\n            <div className=\"mb-4 text-sm text-slate-700\">{resolveModal.conflict.description}</div>\n            <div className=\"space-y-3 mb-4\">\n              {resolveModal.conflict.assignments.map((a: Assignment) => (\n                <div key={a.id} className=\"border rounded px-3 py-2 flex flex-col sm:flex-row sm:items-center sm:justify-between gap-2\">\n                  <div>\n                    <div className=\"font-medium\">{a.user?.name} {a.user?.surname} - {a.worker?.name} {a.worker?.surname}</div>\n                    <div className=\"text-xs text-slate-500\">Inicio: {a.start_date} | Horas/sem: {a.weekly_hours}</div>\n                  </div>\n                  <div className=\"flex gap-2\">\n                    <Button size=\"sm\" variant=\"secondary\" onClick={() => window.location.href = `/dashboard/assignments/${a.id}/edit`}>Editar</Button>\n                    <Button size=\"sm\" variant=\"danger\" loading={deletingAssignmentId === a.id} disabled={deletingAssignmentId === a.id}\n                      onClick={() => setDeleteConfirm({ open: true, assignment: a })}\n                    >Eliminar</Button>\n                    <Button size=\"sm\" variant=\"success\" onClick={() => setReassignState({ assignmentId: a.id, workerId: '', loading: false })}>Reasignar</Button>\n                  </div>\n                  {/* Combobox de reasignación */}\n                  {reassignState.assignmentId === a.id && (\n                    <div className=\"mt-2 flex flex-col gap-2\">\n                      <select\n                        className=\"w-full border rounded px-3 py-2\"\n                        value={reassignState.workerId}\n                        onChange={e => setReassignState(s => ({ ...s, workerId: e.target.value }))}\n                      >\n                        <option value=\"\">Selecciona nueva trabajadora</option>\n                        {workers.filter(w => w.id !== a.worker_id).map(w => (\n                          <option key={w.id} value={w.id}>{w.name} {w.surname}</option>\n                        ))}\n                      </select>\n                      <Button size=\"sm\" variant=\"success\" loading={reassignState.loading} disabled={!reassignState.workerId || reassignState.loading}\n                        onClick={async () => {\n                          setReassignState(s => ({ ...s, loading: true }));\n                          const { error } = await updateAssignment(a.id, { worker_id: reassignState.workerId });\n                          setReassignState({ assignmentId: null, workerId: '', loading: false });\n                          if (error) {\n                            showToast(error, 'error');\n                          } else {\n                            showToast('Trabajadora reasignada correctamente', 'success');\n                            setResolveModal({ open: false, conflict: null });\n                          }\n                        }}\n                      >Confirmar reasignación</Button>\n                      <Button size=\"sm\" variant=\"secondary\" onClick={() => setReassignState({ assignmentId: null, workerId: '', loading: false })}>Cancelar</Button>\n                    </div>\n                  )}\n                </div>\n              ))}\n            </div>\n            <Button className=\"w-full\" variant=\"secondary\" onClick={() => setResolveModal({ open: false, conflict: null })}>Cerrar</Button>\n          </div>\n        </div>\n      )}\n\n      {/* Modal de confirmación de eliminación */}\n      <Modal\n        isOpen={deleteConfirm.open}\n        onClose={() => setDeleteConfirm({ open: false, assignment: null })}\n        title=\"Eliminar asignación\"\n        message={`¿Seguro que quieres eliminar la asignación de ${deleteConfirm.assignment?.user?.name} ${deleteConfirm.assignment?.user?.surname} - ${deleteConfirm.assignment?.worker?.name} ${deleteConfirm.assignment?.worker?.surname}? Esta acción no se puede deshacer.`}\n        type=\"danger\"\n        confirmText=\"Eliminar\"\n        cancelText=\"Cancelar\"\n        onConfirm={async () => {\n          if (!deleteConfirm.assignment) return;\n          setDeletingAssignmentId(deleteConfirm.assignment.id);\n          const { error } = await deleteAssignment(deleteConfirm.assignment.id);\n          setDeletingAssignmentId(null);\n          setDeleteConfirm({ open: false, assignment: null });\n          if (error) {\n            showToast(error, 'error');\n          } else {\n            showToast('Asignación eliminada', 'success');\n            setResolveModal({ open: false, conflict: null });\n          }\n        }}\n        icon={undefined}\n      />\n\n      {ToastComponent}\n      </main>\n    </div>\n  )\n}","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"/Users/alamia.es/Public/SAD/src/app/dashboard/test-balance/page.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: '}' expected.","line":435,"column":1}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport { useState, useEffect } from \"react\";\nimport { supabase } from \"@/lib/supabase\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { AdminBalanceGenerator } from \"@/components/AdminBalanceGenerator\";\nimport { AlertTriangle, CheckCircle, Loader2, User, Clock } from \"lucide-react\";\nimport { HolidayReassignmentCard } from \"@/components/HolidayReassignmentCard\";\n\ninterface User {\n  id: string;\n  name: string;\n  surname: string;\n  monthly_hours: number;\n}\n\ninterface Worker {\n  id: string;\n  name: string;\n  surname: string;\n  email: string;\n}\n\nimport { Assignment } from '@/lib/types';\n\nexport default function TestBalancePage() {\n  const [users, setUsers] = useState<User[]>([]);\n  const [workers, setWorkers] = useState<Worker[]>([]);\n  const [assignments, setAssignments] = useState<Assignment[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [selectedUser, setSelectedUser] = useState<string>(\"\");\n  const [selectedWorker, setSelectedWorker] = useState<string>(\"\");\n  const [currentMonth, setCurrentMonth] = useState(new Date().getMonth() + 1);\n  const [currentYear, setCurrentYear] = useState(new Date().getFullYear());\n  const [planning, setPlanning] = useState<Array<{date: string, hours: number, isHoliday: boolean}>>([]);\n  const [planningLoading, setPlanningLoading] = useState(false);\n  const [reassignments, setReassignments] = useState<Array<any>>([]);\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  // Generar planning cuando cambien los parámetros\n  useEffect(() => {\n    if (selectedUser && selectedWorker) {\n      setPlanningLoading(true);\n      generateMonthlyPlanning(assignments, selectedUser, selectedWorker, currentMonth, currentYear)\n        .then(setPlanning)\n        .catch(console.error)\n        .finally(() => setPlanningLoading(false));\n    } else {\n      setPlanning([]);\n    }\n  }, [selectedUser, selectedWorker, currentMonth, currentYear, assignments]);\n\n  const fetchData = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      // Obtener usuarios\n      const { data: usersData, error: usersError } = await supabase!\n        .from('users')\n        .select('id, name, surname, monthly_hours')\n        .eq('is_active', true);\n\n      if (usersError) throw usersError;\n\n      // Obtener trabajadoras\n      const { data: workersData, error: workersError } = await supabase!\n        .from('workers')\n        .select('id, name, surname, email');\n\n      if (workersError) throw workersError;\n\n      // Obtener asignaciones\n      const { data: assignmentsData, error: assignmentsError } = await supabase!\n        .from('assignments')\n        .select('id, user_id, worker_id, specific_schedule, status, assigned_hours_per_week, start_date, priority, created_at, updated_at')\n        .eq('status', 'active');\n\n      if (assignmentsError) throw assignmentsError;\n\n      setUsers(usersData || []);\n      setWorkers(workersData || []);\n      setAssignments(assignmentsData as Assignment[] || []);\n\n    } catch (err) {\n      console.error('Error fetching data:', err);\n      setError('Error al cargar los datos');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const generateMonthlyPlanning = async (assignments: Assignment[], userId: string, workerId: string, month: number, year: number) => {\n    // Usar la nueva funcionalidad de reasignación automática de festivos\n    const { generateMonthlyPlanningWithHolidayReassignment } = await import('@/lib/holidayReassignment');\n\n    const result = await generateMonthlyPlanningWithHolidayReassignment(assignments, userId, month, year);\n\n    // Convertir al formato esperado por el sistema actual\n    const planning = result.planning.map(day => ({\n      date: day.date,\n      hours: day.hours,\n      isHoliday: day.isHoliday\n    }));\n\n    // Guardar reasignaciones para mostrar en la UI\n    setReassignments(result.reassignments);\n\n    // Mostrar información de reasignaciones en consola para debugging\n    // if (result.reassignments.length > 0) {\n    //   //   // }\n\n    return planning;\n  };\n\n  const handleBalanceGenerated = () => {\n    // Recargar datos si es necesario\n    // };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-slate-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <Loader2 className=\"w-8 h-8 animate-spin mx-auto mb-4 text-blue-600\" />\n          <p className=\"text-slate-600\">Cargando datos...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"min-h-screen bg-slate-50 flex items-center justify-center\">\n        <Card>\n          <CardContent className=\"p-6 text-center\">\n            <AlertTriangle className=\"w-12 h-12 text-red-500 mx-auto mb-4\" />\n            <p className=\"text-red-600 mb-4\">{error}</p>\n            <Button onClick={fetchData}>Reintentar</Button>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  const selectedUserData = users.find(u => u.id === selectedUser);\n  const selectedWorkerData = workers.find(w => w.id === selectedWorker);\n  const userAssignments = assignments.filter(a => a.user_id === selectedUser && a.worker_id === selectedWorker);\n\n  // Bloque de depuración para mostrar datos en pantalla\n  const debugAssignments = assignments.filter(a => a.user_id === selectedUser);\n  const debugPlanning = planning;\n\n  // Para cada día del mes, mostrar los horarios detectados\n  const debugDayDetails = () => {\n    if (!selectedUser) return null;\n    const daysInMonth = new Date(currentYear, currentMonth, 0).getDate();\n    const dayNames = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];\n    const details = [];\n    for (let day = 1; day <= daysInMonth; day++) {\n      const date = new Date(currentYear, currentMonth - 1, day);\n      const dayOfWeek = date.getDay();\n      const dayName = dayNames[dayOfWeek];\n      let slots: any[] = [];\n      debugAssignments.forEach(a => {\n        const daySchedule = (a.specific_schedule as any)?.[dayName];\n        if (daySchedule && Array.isArray(daySchedule)) {\n          slots = slots.concat(daySchedule);\n        }\n      });\n      details.push({\n        date: `${currentYear}-${currentMonth.toString().padStart(2, '0')}-${day.toString().padStart(2, '0')}`,\n        dayName,\n        slots\n      });\n    }\n    return details;\n  };\n\n  return (\n    <div className=\"min-h-screen bg-slate-50 p-6\">\n      <div className=\"max-w-4xl mx-auto space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <h1 className=\"text-2xl font-bold text-slate-900\">Generador de Balances Mensuales</h1>\n          <Button onClick={fetchData} variant=\"secondary\">\n            <Loader2 className=\"w-4 h-4 mr-2\" />\n            Actualizar\n          </Button>\n        </div>\n\n        {/* Selectores */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <User className=\"w-5 h-5 mr-2\" />\n              Seleccionar Usuario y Trabajadora\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <label className=\"block text-sm font-medium text-slate-700 mb-2\">\n                  Usuario\n                </label>\n                <select\n                  value={selectedUser}\n                  onChange={(e) => setSelectedUser(e.target.value)}\n                  className=\"w-full p-2 border border-slate-300 rounded-md\"\n                >\n                  <option value=\"\">Seleccionar usuario...</option>\n                  {users.map(user => (\n                    <option key={user.id} value={user.id}>\n                      {user.name} {user.surname} ({user.monthly_hours}h/mes)\n                    </option>\n                  ))}\n                </select>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-slate-700 mb-2\">\n                  Trabajadora\n                </label>\n                <select\n                  value={selectedWorker}\n                  onChange={(e) => setSelectedWorker(e.target.value)}\n                  className=\"w-full p-2 border border-slate-300 rounded-md\"\n                  disabled={!selectedUser}\n                >\n                  <option value=\"\">Seleccionar trabajadora...</option>\n                  {selectedUser && workers\n                    .filter(worker =>\n                      assignments.some(a =>\n                        a.user_id === selectedUser &&\n                        a.worker_id === worker.id &&\n                        a.status === 'active'\n                      )\n                    )\n                    .map(worker => (\n                      <option key={worker.id} value={worker.id}>\n                        {worker.name} {worker.surname}\n                      </option>\n                    ))\n                  }\n                </select>\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <label className=\"block text-sm font-medium text-slate-700 mb-2\">\n                  Mes\n                </label>\n                <select\n                  value={currentMonth}\n                  onChange={(e) => setCurrentMonth(Number(e.target.value))}\n                  className=\"w-full p-2 border border-slate-300 rounded-md\"\n                >\n                  {Array.from({length: 12}, (_, i) => i + 1).map(month => (\n                    <option key={month} value={month}>\n                      {new Date(2024, month - 1).toLocaleDateString('es-ES', { month: 'long' })}\n                    </option>\n                  ))}\n                </select>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-slate-700 mb-2\">\n                  Año\n                </label>\n                <select\n                  value={currentYear}\n                  onChange={(e) => setCurrentYear(Number(e.target.value))}\n                  className=\"w-full p-2 border border-slate-300 rounded-md\"\n                >\n                  {[2023, 2024, 2025].map(year => (\n                    <option key={year} value={year}>{year}</option>\n                  ))}\n                </select>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Información del usuario seleccionado */}\n        {selectedUserData && selectedWorkerData && (\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Clock className=\"w-5 h-5 mr-2\" />\n                Información del Balance\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-4\">\n                <div className=\"text-center p-4 bg-blue-50 rounded-lg\">\n                  <div className=\"text-2xl font-bold text-blue-600\">{selectedUserData.monthly_hours}</div>\n                  <div className=\"text-sm text-blue-700\">Horas Asignadas</div>\n                </div>\n                              <div className=\"text-center p-4 bg-green-50 rounded-lg\">\n                <div className=\"text-2xl font-bold text-green-600\">\n                  {planningLoading ? '...' : planning.reduce((sum, day) => sum + day.hours, 0).toFixed(1)}\n                </div>\n                <div className=\"text-sm text-green-700\">Horas Programadas</div>\n              </div>\n              <div className=\"text-center p-4 bg-orange-50 rounded-lg\">\n                <div className=\"text-2xl font-bold text-orange-600\">\n                  {planningLoading ? '...' : (selectedUserData.monthly_hours - planning.reduce((sum, day) => sum + day.hours, 0)).toFixed(1)}\n                </div>\n                <div className=\"text-sm text-orange-700\">Balance</div>\n              </div>\n              </div>\n\n              <div className=\"text-sm text-slate-600\">\n                <p><strong>Usuario:</strong> {selectedUserData.name} {selectedUserData.surname}</p>\n                <p><strong>Trabajadora seleccionada:</strong> {selectedWorkerData.name} {selectedWorkerData.surname}</p>\n                <p><strong>Asignaciones activas:</strong> {userAssignments.length}</p>\n                <p><strong>Días con servicio:</strong> {planning.length}</p>\n                <p><strong>Total horas programadas (todas las trabajadoras):</strong> {planning.reduce((sum, day) => sum + day.hours, 0).toFixed(1)}h</p>\n                <p><strong>Balance esperado:</strong> {(selectedUserData.monthly_hours - planning.reduce((sum, day) => sum + day.hours, 0)).toFixed(1)}h</p>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Generador de Balance */}\n        {selectedUser && selectedWorker && selectedUserData && (\n          <AdminBalanceGenerator\n            workerId={selectedWorker}\n            userId={selectedUser}\n            month={currentMonth}\n            year={currentYear}\n            planning={planning}\n            assignedHours={selectedUserData.monthly_hours}\n            onSuccess={handleBalanceGenerated}\n          />\n        )}\n\n        {/* Reasignaciones Automáticas de Festivos */}\n        {reassignments.length > 0 && (\n          <HolidayReassignmentCard reassignments={reassignments} />\n        )}\n\n        {/* Lista de usuarios para referencia rápida */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Usuarios Disponibles</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n              {users.map(user => {\n                const userWorkers = workers.filter(worker =>\n                  assignments.some(a =>\n                    a.user_id === user.id &&\n                    a.worker_id === worker.id &&\n                    a.status === 'active'\n                  )\n                );\n\n                return (\n                  <div key={user.id} className=\"p-3 border border-slate-200 rounded-lg\">\n                    <div className=\"font-medium text-slate-900\">\n                      {user.name} {user.surname}\n                    </div>\n                    <div className=\"text-sm text-slate-600\">\n                      {user.monthly_hours}h/mes • {userWorkers.length} trabajadora{userWorkers.length !== 1 ? 's' : ''}\n                    </div>\n                    <div className=\"text-xs text-slate-500 mt-1\">\n                      {userWorkers.map(w => w.name).join(', ')}\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Bloque de depuración */}\n        {selectedUser && (\n          <Card className=\"mt-6\">\n            <CardHeader>\n              <CardTitle>Depuración de datos</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"mb-2\">\n                <strong>Assignments para el usuario:</strong>\n                <pre className=\"bg-slate-100 p-2 rounded text-xs overflow-x-auto max-h-48\">{JSON.stringify(debugAssignments, null, 2)}</pre>\n              </div>\n              <div className=\"mb-2\">\n                <strong>Planning generado:</strong>\n                <pre className=\"bg-slate-100 p-2 rounded text-xs overflow-x-auto max-h-48\">{JSON.stringify(debugPlanning, null, 2)}</pre>\n              </div>\n              <div>\n                <strong>Horarios detectados por día:</strong>\n                <div className=\"overflow-x-auto max-h-48\">\n                  <table className=\"text-xs border border-slate-200 w-full\">\n                    <thead>\n                      <tr>\n                        <th className=\"border px-2\">Fecha</th>\n                        <th className=\"border px-2\">Día</th>\n                        <th className=\"border px-2\">Slots</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {debugDayDetails()?.map((d, idx) => (\n                        <tr key={idx}>\n                          <td className=\"border px-2 whitespace-nowrap\">{d.date}</td>\n                          <td className=\"border px-2\">{d.dayName}</td>\n                          <td className=\"border px-2\">\n                            {d.slots.length > 0 ? (\n                              d.slots.map((slot, i) => (\n                                <span key={i} className=\"inline-block mr-2\">\n                                  {typeof slot === 'object' && slot.start && slot.end ? `${slot.start}-${slot.end}` : JSON.stringify(slot)}\n                                </span>\n                              ))\n                            ) : (\n                              <span className=\"text-slate-400\">Sin horario</span>\n                            )}\n                          </td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"/Users/alamia.es/Public/SAD/src/app/dashboard/users/[id]/assignments/page.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'supabase'. Either exclude it or remove the dependency array. Outer scope values like 'supabase' aren't valid dependencies because mutating them doesn't re-render the component.","line":140,"column":6,"nodeType":"ArrayExpression","endLine":140,"endColumn":35,"suggestions":[{"desc":"Update the dependencies array to be: [showToast, userId]","fix":{"range":[3688,3717],"text":"[showToast, userId]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":255,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":255,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":283,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":283,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport { useState, useEffect, useCallback } from 'react'\nimport { useParams } from 'next/navigation'\nimport Link from 'next/link'\nimport { Button } from '@/components/ui/button'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { ModalCustom } from '@/components/ui/modal'\nimport { useToast } from '@/components/ui/toast'\nimport { supabase } from '@/lib/supabase'\nimport { ArrowLeft, Plus, Edit, Trash2, Clock, Save, X } from 'lucide-react'\n\ninterface User {\n  id: string\n  name: string\n  surname: string\n  phone: string\n  address: string | null\n  monthly_hours: number\n  is_active: boolean\n}\n\ninterface Worker {\n  id: string\n  name: string\n  surname: string\n  email: string\n  worker_type: string\n  is_active: boolean\n}\n\ninterface Assignment {\n  id: string\n  user_id: string\n  worker_id: string\n  assigned_hours_per_week: number\n  specific_schedule: Record<string, string[]>\n  start_date: string\n  status: string\n  created_at: string\n  workers: Worker\n}\n\ninterface AssignmentForm {\n  worker_id: string\n  assigned_hours_per_week: number\n  specific_schedule: Record<string, string[]>\n  start_date: string\n  status: string\n}\n\nexport default function UserAssignmentsPage() {\n  const params = useParams()\n  const userId = params.id as string\n  const { showToast, ToastComponent } = useToast()\n  \n  const [user, setUser] = useState<User | null>(null)\n  const [assignments, setAssignments] = useState<Assignment[]>([])\n  const [workers, setWorkers] = useState<Worker[]>([])\n  const [loading, setLoading] = useState(true)\n  const [modalOpen, setModalOpen] = useState(false)\n  const [editingAssignment, setEditingAssignment] = useState<Assignment | null>(null)\n  const [formData, setFormData] = useState<AssignmentForm>({\n    worker_id: '',\n    assigned_hours_per_week: 0,\n    specific_schedule: {},\n    start_date: new Date().toISOString().split('T')[0],\n    status: 'active'\n  })\n\n  const daysOfWeek = [\n    { key: 'monday', label: 'Lunes' },\n    { key: 'tuesday', label: 'Martes' },\n    { key: 'wednesday', label: 'Miércoles' },\n    { key: 'thursday', label: 'Jueves' },\n    { key: 'friday', label: 'Viernes' },\n    { key: 'saturday', label: 'Sábado' },\n    { key: 'sunday', label: 'Domingo' }\n  ]\n\n  const fetchData = useCallback(async () => {\n    try {\n      setLoading(true)\n      \n      if (!supabase) {\n        showToast('Error de configuración: Supabase no está configurado', 'error')\n        return\n      }\n      \n      // Obtener usuario\n      const { data: userData, error: userError } = await supabase\n        .from('users')\n        .select('*')\n        .eq('id', userId)\n        .single()\n\n      if (userError) {\n        showToast('Error al cargar usuario', 'error')\n        return\n      }\n\n      setUser(userData)\n\n      // Obtener trabajadoras activas\n      const { data: workersData, error: workersError } = await supabase\n        .from('workers')\n        .select('*')\n        .eq('is_active', true)\n        .order('name')\n\n      if (workersError) {\n        showToast('Error al cargar trabajadoras', 'error')\n        return\n      }\n\n      setWorkers(workersData || [])\n\n      // Obtener asignaciones del usuario\n      const { data: assignmentsData, error: assignmentsError } = await supabase\n        .from('assignments')\n        .select(`\n          *,\n          workers(*)\n        `)\n        .eq('user_id', userId)\n        .order('created_at')\n\n      if (assignmentsError) {\n        showToast('Error al cargar asignaciones', 'error')\n        return\n      }\n\n      setAssignments(assignmentsData || [])\n\n    } catch {\n      showToast('Error inesperado al cargar datos', 'error')\n    } finally {\n      setLoading(false)\n    }\n  }, [supabase, showToast, userId])\n\n  useEffect(() => {\n    fetchData()\n  }, [fetchData, userId])\n\n  const openModal = (assignment?: Assignment) => {\n    if (assignment) {\n      setEditingAssignment(assignment)\n      setFormData({\n        worker_id: assignment.worker_id,\n        assigned_hours_per_week: assignment.assigned_hours_per_week,\n        specific_schedule: assignment.specific_schedule || {},\n        start_date: assignment.start_date,\n        status: assignment.status\n      })\n    } else {\n      setEditingAssignment(null)\n      setFormData({\n        worker_id: '',\n        assigned_hours_per_week: 0,\n        specific_schedule: {},\n        start_date: new Date().toISOString().split('T')[0],\n        status: 'active'\n      })\n    }\n    setModalOpen(true)\n  }\n\n  const closeModal = () => {\n    setModalOpen(false)\n    setEditingAssignment(null)\n  }\n\n  const handleSave = async () => {\n    try {\n      if (!formData.worker_id) {\n        showToast('Por favor selecciona una trabajadora', 'error')\n        return\n      }\n\n      // Verificar que al menos un día tenga horarios configurados\n      const hasSchedules = daysOfWeek.some(day => \n        (formData.specific_schedule[day.key] || []).length > 0\n      )\n\n      if (!hasSchedules) {\n        showToast('Por favor configura al menos un horario para un día de la semana', 'error')\n        return\n      }\n\n      // Calcular horas por semana automáticamente\n      const calculatedHoursPerWeek = daysOfWeek.reduce((total, day) => {\n        const slots = formData.specific_schedule[day.key] || []\n        const dayHours = slots.reduce((dayTotal, slot) => {\n          const [start, end] = slot.split('-')\n          if (start && end) {\n            const startTime = new Date(`2000-01-01T${start}`)\n            const endTime = new Date(`2000-01-01T${end}`)\n            const hours = (endTime.getTime() - startTime.getTime()) / (1000 * 60 * 60)\n            return dayTotal + hours\n          }\n          return dayTotal\n        }, 0)\n        return total + dayHours\n      }, 0)\n\n      if (calculatedHoursPerWeek <= 0) {\n        showToast('Por favor configura horarios válidos', 'error')\n        return\n      }\n\n      if (!supabase) {\n        showToast('Error de configuración: Supabase no está configurado', 'error')\n        return\n      }\n\n      const assignmentData = {\n        user_id: userId,\n        worker_id: formData.worker_id,\n        assigned_hours_per_week: calculatedHoursPerWeek,\n        specific_schedule: formData.specific_schedule,\n        start_date: formData.start_date,\n        status: formData.status\n      }\n\n      if (editingAssignment) {\n        // Actualizar asignación existente\n        const { error } = await supabase\n          .from('assignments')\n          .update(assignmentData)\n          .eq('id', editingAssignment.id)\n\n        if (error) {\n          showToast('Error al actualizar asignación', 'error')\n          return\n        }\n\n        showToast('Asignación actualizada correctamente', 'success')\n      } else {\n        // Crear nueva asignación\n        const { error } = await supabase\n          .from('assignments')\n          .insert([assignmentData])\n\n        if (error) {\n          showToast('Error al crear asignación', 'error')\n          return\n        }\n\n        showToast('Asignación creada correctamente', 'success')\n      }\n\n      closeModal()\n      fetchData()\n    } catch (error) {\n      showToast('Error inesperado al guardar asignación', 'error')\n    }\n  }\n\n  const handleDelete = async (assignmentId: string) => {\n    if (!confirm('¿Estás seguro de que quieres eliminar esta asignación?')) {\n      return\n    }\n\n    try {\n      if (!supabase) {\n        showToast('Error de configuración: Supabase no está configurado', 'error')\n        return\n      }\n\n      const { error } = await supabase\n        .from('assignments')\n        .delete()\n        .eq('id', assignmentId)\n\n      if (error) {\n        showToast('Error al eliminar asignación', 'error')\n        return\n      }\n\n      showToast('Asignación eliminada correctamente', 'success')\n      fetchData()\n    } catch (error) {\n      showToast('Error inesperado al eliminar asignación', 'error')\n    }\n  }\n\n  const updateSchedule = (day: string, timeSlots: string[]) => {\n    setFormData(prev => ({\n      ...prev,\n      specific_schedule: {\n        ...prev.specific_schedule,\n        [day]: timeSlots\n      }\n    }))\n  }\n\n  const addTimeSlot = (day: string) => {\n    const currentSlots = formData.specific_schedule[day] || []\n    updateSchedule(day, [...currentSlots, '08:00-09:00'])\n  }\n\n  const removeTimeSlot = (day: string, index: number) => {\n    const currentSlots = formData.specific_schedule[day] || []\n    const newSlots = currentSlots.filter((_, i) => i !== index)\n    updateSchedule(day, newSlots)\n  }\n\n  const updateTimeSlot = (day: string, index: number, value: string) => {\n    const currentSlots = formData.specific_schedule[day] || []\n    const newSlots = [...currentSlots]\n    newSlots[index] = value\n    updateSchedule(day, newSlots)\n  }\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-slate-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-slate-600\">Cargando...</p>\n        </div>\n      </div>\n    )\n  }\n\n  if (!user) {\n    return (\n      <div className=\"min-h-screen bg-slate-50 flex items-center justify-center\">\n        <Card>\n          <CardContent className=\"p-6 text-center\">\n            <p className=\"text-red-600 mb-4\">Usuario no encontrado</p>\n            <Link href=\"/dashboard/users\">\n              <Button variant=\"secondary\" size=\"sm\">\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                Volver\n              </Button>\n            </Link>\n          </CardContent>\n        </Card>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"min-h-screen bg-slate-50\">\n      {/* Header */}\n      <header className=\"bg-white shadow-sm border-b border-slate-200\">\n        <div className=\"max-w-6xl mx-auto px-4 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <Link href=\"/dashboard/users\">\n                <Button variant=\"secondary\" size=\"sm\">\n                  <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                  Volver\n                </Button>\n              </Link>\n              <div>\n                <h1 className=\"text-xl font-semibold text-slate-900\">\n                  Asignaciones de {user.name} {user.surname}\n                </h1>\n                <p className=\"text-sm text-slate-600\">\n                  Gestiona las asignaciones de trabajadoras para este usuario\n                </p>\n              </div>\n            </div>\n            <Button onClick={() => openModal()} className=\"bg-blue-600 hover:bg-blue-700\">\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Nueva Asignación\n            </Button>\n          </div>\n        </div>\n      </header>\n\n      <div className=\"max-w-6xl mx-auto px-4 py-6\">\n        {/* Información del usuario */}\n        <Card className=\"mb-6\">\n          <CardContent className=\"p-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <div>\n                <h3 className=\"font-medium text-slate-900\">Usuario</h3>\n                <p className=\"text-slate-600\">{user.name} {user.surname}</p>\n              </div>\n              <div>\n                <h3 className=\"font-medium text-slate-900\">Teléfono</h3>\n                <p className=\"text-slate-600\">{user.phone}</p>\n              </div>\n              <div>\n                <h3 className=\"font-medium text-slate-900\">Horas Mensuales</h3>\n                <p className=\"text-slate-600\">{user.monthly_hours}h</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Lista de asignaciones */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Clock className=\"w-5 h-5 mr-2\" />\n              Asignaciones ({assignments.length})\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {assignments.length === 0 ? (\n              <div className=\"text-center py-8\">\n                <div className=\"text-slate-400 mb-4\">\n                  <Clock className=\"w-16 h-16 mx-auto\" />\n                </div>\n                <h3 className=\"text-lg font-medium text-slate-900 mb-2\">\n                  No hay asignaciones\n                </h3>\n                <p className=\"text-slate-600 mb-4\">\n                  Crea la primera asignación para este usuario\n                </p>\n                <Button onClick={() => openModal()} className=\"bg-blue-600 hover:bg-blue-700\">\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Crear Asignación\n                </Button>\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                {assignments.map((assignment) => (\n                  <Card key={assignment.id} className=\"border border-slate-200\">\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-start justify-between\">\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center space-x-4 mb-3\">\n                            <div>\n                              <h4 className=\"font-medium text-slate-900\">\n                                {assignment.workers.name} {assignment.workers.surname}\n                              </h4>\n                              <p className=\"text-sm text-slate-600\">\n                                {assignment.workers.worker_type === 'laborable' ? 'Trabajadora laborable' : \n                                 assignment.workers.worker_type === 'holiday_weekend' ? 'Trabajadora festivos/fines de semana' : \n                                 'Trabajadora mixta'}\n                              </p>\n                            </div>\n                            <div className=\"text-center\">\n                              <div className=\"text-lg font-semibold text-blue-600\">\n                                {assignment.assigned_hours_per_week}h\n                              </div>\n                              <div className=\"text-xs text-slate-500\">por semana</div>\n                            </div>\n                            <div>\n                              <div className=\"text-sm text-slate-600\">\n                                Estado: <span className={`font-medium ${\n                                  assignment.status === 'active' ? 'text-green-600' : 'text-red-600'\n                                }`}>\n                                  {assignment.status === 'active' ? 'Activa' : 'Inactiva'}\n                                </span>\n                              </div>\n                              <div className=\"text-sm text-slate-600\">\n                                Desde: {new Date(assignment.start_date).toLocaleDateString('es-ES')}\n                              </div>\n                            </div>\n                          </div>\n                          \n                          {/* Horario específico */}\n                          {assignment.specific_schedule && Object.keys(assignment.specific_schedule).length > 0 && (\n                            <div className=\"mt-3\">\n                              <h5 className=\"text-sm font-medium text-slate-700 mb-2\">Horario:</h5>\n                              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-2\">\n                                {daysOfWeek.map(day => {\n                                  const slots = assignment.specific_schedule[day.key]\n                                  if (!slots || slots.length === 0) return null\n                                  \n                                  return (\n                                    <div key={day.key} className=\"text-xs\">\n                                      <span className=\"font-medium text-slate-600\">{day.label}:</span>\n                                      <div className=\"text-slate-500\">\n                                        {slots.join(', ')}\n                                      </div>\n                                    </div>\n                                  )\n                                })}\n                              </div>\n                            </div>\n                          )}\n                        </div>\n                        \n                        <div className=\"flex space-x-2 ml-4\">\n                          <Button \n                            variant=\"secondary\" \n                            size=\"sm\"\n                            onClick={() => openModal(assignment)}\n                          >\n                            <Edit className=\"w-3 h-3 mr-1\" />\n                            Editar\n                          </Button>\n                          <Button \n                            variant=\"secondary\" \n                            size=\"sm\"\n                            onClick={() => handleDelete(assignment.id)}\n                            className=\"text-red-600 hover:text-red-700 hover:bg-red-50\"\n                          >\n                            <Trash2 className=\"w-3 h-3 mr-1\" />\n                            Eliminar\n                          </Button>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Modal para crear/editar asignación */}\n      <ModalCustom isOpen={modalOpen} onClose={closeModal}>\n        <div className=\"bg-white rounded-lg p-6 w-full max-w-4xl max-h-[90vh] overflow-y-auto\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <h2 className=\"text-xl font-semibold text-slate-900\">\n              {editingAssignment ? 'Editar Asignación' : 'Nueva Asignación'}\n            </h2>\n            <Button variant=\"secondary\" size=\"sm\" onClick={closeModal}>\n              <X className=\"w-4 h-4\" />\n            </Button>\n          </div>\n\n          <div className=\"space-y-6\">\n            {/* Trabajadora */}\n            <div>\n              <label className=\"block text-sm font-medium text-slate-700 mb-2\">\n                Trabajadora *\n              </label>\n              <select\n                value={formData.worker_id}\n                onChange={(e) => setFormData(prev => ({ ...prev, worker_id: e.target.value }))}\n                className=\"w-full p-2 border border-slate-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n              >\n                <option value=\"\">Seleccionar trabajadora</option>\n                {workers.map(worker => (\n                  <option key={worker.id} value={worker.id}>\n                    {worker.name} {worker.surname} ({worker.worker_type})\n                  </option>\n                ))}\n              </select>\n            </div>\n\n            {/* Fecha de inicio */}\n            <div>\n              <label className=\"block text-sm font-medium text-slate-700 mb-2\">\n                Fecha de inicio *\n              </label>\n              <input\n                type=\"date\"\n                value={formData.start_date}\n                onChange={(e) => setFormData(prev => ({ ...prev, start_date: e.target.value }))}\n                className=\"w-full p-2 border border-slate-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n              />\n            </div>\n\n            {/* Estado */}\n            <div>\n              <label className=\"block text-sm font-medium text-slate-700 mb-2\">\n                Estado\n              </label>\n              <select\n                value={formData.status}\n                onChange={(e) => setFormData(prev => ({ ...prev, status: e.target.value }))}\n                className=\"w-full p-2 border border-slate-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n              >\n                <option value=\"active\">Activa</option>\n                <option value=\"inactive\">Inactiva</option>\n              </select>\n            </div>\n\n            {/* Horario específico */}\n            <div>\n              <label className=\"block text-sm font-medium text-slate-700 mb-4\">\n                Horario específico por día *\n              </label>\n              <div className=\"space-y-4\">\n                {daysOfWeek.map(day => (\n                  <div key={day.key} className=\"border border-slate-200 rounded-lg p-4\">\n                    <div className=\"flex items-center justify-between mb-3\">\n                      <span className=\"font-medium text-slate-700\">{day.label}</span>\n                      <Button\n                        type=\"button\"\n                        variant=\"secondary\"\n                        size=\"sm\"\n                        onClick={() => addTimeSlot(day.key)}\n                      >\n                        <Plus className=\"w-3 h-3 mr-1\" />\n                        Añadir horario\n                      </Button>\n                    </div>\n                    \n                    {(formData.specific_schedule[day.key] || []).map((slot, index) => (\n                      <div key={index} className=\"flex items-center space-x-2 mb-2\">\n                        <input\n                          type=\"text\"\n                          value={slot}\n                          onChange={(e) => updateTimeSlot(day.key, index, e.target.value)}\n                          placeholder=\"08:00-09:00\"\n                          className=\"flex-1 p-2 border border-slate-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                        />\n                        <Button\n                          type=\"button\"\n                          variant=\"secondary\"\n                          size=\"sm\"\n                          onClick={() => removeTimeSlot(day.key, index)}\n                          className=\"text-red-600 hover:text-red-700\"\n                        >\n                          <X className=\"w-3 h-3\" />\n                        </Button>\n                      </div>\n                    ))}\n                    \n                    {(formData.specific_schedule[day.key] || []).length === 0 && (\n                      <p className=\"text-sm text-slate-500 italic\">\n                        No hay horarios configurados para este día\n                      </p>\n                    )}\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            {/* Resumen de horas calculadas */}\n            <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n              <h4 className=\"font-medium text-blue-900 mb-2\">Resumen de horas por semana</h4>\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                {daysOfWeek.map(day => {\n                  const slots = formData.specific_schedule[day.key] || []\n                  const totalHours = slots.reduce((total, slot) => {\n                    const [start, end] = slot.split('-')\n                    if (start && end) {\n                      const startTime = new Date(`2000-01-01T${start}`)\n                      const endTime = new Date(`2000-01-01T${end}`)\n                      const hours = (endTime.getTime() - startTime.getTime()) / (1000 * 60 * 60)\n                      return total + hours\n                    }\n                    return total\n                  }, 0)\n                  \n                  return (\n                    <div key={day.key} className=\"text-center\">\n                      <div className=\"text-sm font-medium text-blue-700\">{day.label}</div>\n                      <div className=\"text-lg font-semibold text-blue-900\">\n                        {totalHours > 0 ? `${totalHours.toFixed(1)}h` : '0h'}\n                      </div>\n                    </div>\n                  )\n                })}\n              </div>\n              <div className=\"mt-3 pt-3 border-t border-blue-200\">\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"font-medium text-blue-900\">Total semanal:</span>\n                  <span className=\"text-lg font-bold text-blue-900\">\n                    {(() => {\n                      const totalWeekly = daysOfWeek.reduce((total, day) => {\n                        const slots = formData.specific_schedule[day.key] || []\n                        const dayHours = slots.reduce((dayTotal, slot) => {\n                          const [start, end] = slot.split('-')\n                          if (start && end) {\n                            const startTime = new Date(`2000-01-01T${start}`)\n                            const endTime = new Date(`2000-01-01T${end}`)\n                            const hours = (endTime.getTime() - startTime.getTime()) / (1000 * 60 * 60)\n                            return dayTotal + hours\n                          }\n                          return dayTotal\n                        }, 0)\n                        return total + dayHours\n                      }, 0)\n                      return `${totalWeekly.toFixed(1)}h`\n                    })()}\n                  </span>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"flex justify-end space-x-3 mt-6 pt-4 border-t border-slate-200\">\n            <Button variant=\"secondary\" onClick={closeModal}>\n              Cancelar\n            </Button>\n            <Button onClick={handleSave} className=\"bg-blue-600 hover:bg-blue-700\">\n              <Save className=\"w-4 h-4 mr-2\" />\n              {editingAssignment ? 'Actualizar' : 'Crear'}\n            </Button>\n          </div>\n        </div>\n      </ModalCustom>\n\n      {ToastComponent}\n    </div>\n  )\n} ","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"/Users/alamia.es/Public/SAD/src/lib/calculateWorkerBalance.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'holidaysError' is assigned a value but never used.","line":198,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":198,"endColumn":47},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'totalAssignedHoursForUser' is assigned a value but never used.","line":248,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":248,"endColumn":34},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isHoliday' is assigned a value but never used.","line":314,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":314,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isWeekend' is assigned a value but never used.","line":315,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":315,"endColumn":22}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Assignment, User } from './types';\nimport { supabase } from './supabase';\n\nexport interface AssignmentWithUser extends Assignment {\n  users?: User;\n}\n\nexport interface WorkerBalance {\n  workerId: string;\n  workerName: string;\n  month: number;\n  year: number;\n  totalAssignedHours: number;\n  totalUsedHours: number;\n  totalRemainingHours: number;\n  assignments: AssignmentWithUser[];\n  status: 'excess' | 'deficit' | 'perfect';\n  percentage: number;\n}\n\nexport interface UserBalance {\n  userId: string;\n  userName: string;\n  userSurname: string;\n  userAddress?: string;\n  userPhone?: string;\n  monthlyHours: number; // Horas asignadas al usuario por la empresa\n  assignedHours: number; // Horas que la trabajadora tiene asignadas con este usuario\n  usedHours: number; // Horas que la trabajadora ha realizado hasta hoy\n  remainingHours: number; // Horas que faltan por hacer\n  status: 'excess' | 'deficit' | 'perfect';\n  percentage: number;\n  assignments: AssignmentWithUser[];\n  holidayInfo: {\n    totalHolidays: number;\n    holidayHours: number;\n    workingDays: number;\n    workingHours: number;\n  };\n}\n\nexport interface WorkerUserBalance {\n  workerId: string;\n  workerName: string;\n  month: number;\n  year: number;\n  userBalances: UserBalance[];\n  totalAssignedHours: number;\n  totalUsedHours: number;\n  totalRemainingHours: number;\n  overallStatus: 'excess' | 'deficit' | 'perfect';\n}\n\n/**\n * Calcula el balance de horas de una trabajadora para un mes específico\n */\nexport async function calculateWorkerBalance(\n  workerId: string,\n  month: number,\n  year: number,\n  assignments: AssignmentWithUser[]\n): Promise<WorkerBalance> {\n  // Calcular horas asignadas basadas en los horarios de las asignaciones\n  const totalAssignedHours = assignments.reduce((sum, assignment) => {\n    if (!assignment.schedule) return sum;\n    \n    let weeklyHours = 0;\n    Object.values(assignment.schedule as Record<string, { enabled: boolean; timeSlots: { start: string; end: string }[] }>).forEach((daySchedule) => {\n      if (daySchedule?.enabled && daySchedule.timeSlots && daySchedule.timeSlots.length > 0) {\n        daySchedule.timeSlots.forEach((slot) => {\n          const [startHour, startMin] = slot.start.split(':').map(Number);\n          const [endHour, endMin] = slot.end.split(':').map(Number);    \n          const startTime = startHour + startMin / 60;\n          const endTime = endHour + endMin / 60;\n          weeklyHours += Math.max(0, endTime - startTime);\n        });\n      }\n    });\n    \n    // Convertir horas semanales a mensuales (aproximadamente 4.3 semanas por mes)\n    const monthlyHours = Math.round(weeklyHours * 4.3 * 10) / 10;\n    return sum + monthlyHours;\n  }, 0);\n\n  // Calcular horas utilizadas hasta hoy\n  const today = new Date();\n  const isCurrentMonth = month === today.getMonth() + 1 && year === today.getFullYear();\n  const lastDayToCount = isCurrentMonth ? today.getDate() : new Date(year, month, 0).getDate();\n  \n  let totalUsedHours = 0;\n  \n  // Iterar por cada día del mes hasta hoy (si es el mes actual) o hasta el final del mes\n  for (let day = 1; day <= lastDayToCount; day++) {\n    const date = new Date(year, month - 1, day);\n    const dayOfWeek = date.getDay();\n    const dayNames = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];\n    const dayName = dayNames[dayOfWeek];\n    \n    // Verificar si hay servicios en este día\n    assignments.forEach(assignment => {\n      if (assignment.schedule && assignment.schedule[dayName as keyof typeof assignment.schedule]) {\n        const daySchedule = assignment.schedule[dayName as keyof typeof assignment.schedule];\n        if (daySchedule?.enabled && daySchedule.timeSlots && daySchedule.timeSlots.length > 0) {\n          daySchedule.timeSlots.forEach((slot: { start: string; end: string }) => {\n            const [startHour, startMin] = slot.start.split(':').map(Number);\n            const [endHour, endMin] = slot.end.split(':').map(Number);\n            const startTime = startHour + startMin / 60;\n            const endTime = endHour + endMin / 60;\n            totalUsedHours += Math.max(0, endTime - startTime);\n          });\n        }\n      }\n    });\n  }\n  \n  totalUsedHours = Math.round(totalUsedHours * 10) / 10;\n  const totalRemainingHours = totalAssignedHours - totalUsedHours;\n  const percentage = totalAssignedHours > 0 ? (totalUsedHours / totalAssignedHours) * 100 : 0;\n  \n  // Determinar estado\n  let status: 'excess' | 'deficit' | 'perfect';\n  if (Math.abs(totalRemainingHours) < 0.1) {\n    status = 'perfect';\n  } else if (totalRemainingHours < 0) {\n    status = 'excess';\n  } else {\n    status = 'deficit';\n  }\n  \n  return {\n    workerId,\n    workerName: assignments[0]?.worker?.name || 'Trabajadora',\n    month,\n    year,\n    totalAssignedHours,\n    totalUsedHours,\n    totalRemainingHours,\n    assignments,\n    status,\n    percentage: Math.round(percentage * 10) / 10\n  };\n}\n\n/**\n * Calcula el balance de horas por usuario para una trabajadora\n * siguiendo la lógica: \n * - Contabiliza días de servicio con cada usuario\n * - Considera festivos entre semana (no se cuentan horas)\n * - Si supera las horas asignadas al usuario, no hace las extra\n * - Si falta, debe completar hasta las horas asignadas al usuario\n * - IMPORTANTE: Considera TODAS las trabajadoras que dan servicio al usuario\n */\nexport async function calculateWorkerUserBalance(\n  workerId: string,\n  month: number,\n  year: number\n): Promise<WorkerUserBalance> {\n  if (!supabase) {\n    throw new Error('No se pudo conectar a la base de datos');\n  }\n\n  // 1. Obtener todas las asignaciones activas de la trabajadora\n  const { data: workerAssignments, error: assignmentsError } = await supabase\n    .from('assignments')\n    .select(`\n      *,\n      users:user_id (\n        id,\n        name,\n        surname,\n        address,\n        phone,\n        monthly_hours\n      )\n    `)\n    .eq('worker_id', workerId)\n    .eq('status', 'active');\n\n  if (assignmentsError) {\n    throw new Error(`Error al obtener asignaciones: ${assignmentsError.message}`);\n  }\n\n  if (!workerAssignments || workerAssignments.length === 0) {\n    return {\n      workerId,\n      workerName: 'Trabajadora',\n      month,\n      year,\n      userBalances: [],\n      totalAssignedHours: 0,\n      totalUsedHours: 0,\n      totalRemainingHours: 0,\n      overallStatus: 'perfect'\n    };\n  }\n\n  // 2. Obtener festivos del mes\n  const { data: holidays, error: holidaysError } = await supabase\n    .from('holidays')\n    .select('date, name, type')\n    .eq('year', year)\n    .eq('month', month)\n    .eq('is_active', true);\n\n  const holidayDates = new Set((holidays || []).map((h: { date: string }) => new Date(h.date).getDate()));\n\n  // 3. Obtener usuarios únicos de las asignaciones de esta trabajadora\n  const uniqueUserIds = [...new Set(workerAssignments.map(a => a.user_id))];\n\n  // 4. Calcular balance por usuario (considerando TODAS las trabajadoras)\n  const userBalances: UserBalance[] = [];\n  let totalAssignedHours = 0;\n  let totalUsedHours = 0;\n\n  for (const userId of uniqueUserIds) {\n    // Obtener TODAS las asignaciones de este usuario (de todas las trabajadoras)\n    const { data: allUserAssignments, error: allAssignmentsError } = await supabase\n      .from('assignments')\n      .select(`\n        *,\n        users:user_id (\n          id,\n          name,\n          surname,\n          address,\n          phone,\n          monthly_hours\n        ),\n        workers:worker_id (\n          id,\n          name,\n          surname\n        )\n      `)\n      .eq('user_id', userId)\n      .eq('status', 'active');\n\n    if (allAssignmentsError) {\n      continue;\n    }\n\n    const user = allUserAssignments?.[0]?.users;\n    if (!user) continue;\n\n    const monthlyHours = user.monthly_hours || 0;\n    \n    // Calcular horas totales asignadas a este usuario (por todas las trabajadoras)\n    let totalAssignedHoursForUser = 0;\n    let totalUsedHoursForUser = 0;\n    let holidayHours = 0;\n    let workingHours = 0;\n    let totalHolidays = 0;\n    let workingDays = 0;\n\n    // Calcular días del mes\n    const daysInMonth = new Date(year, month, 0).getDate();\n    \n    for (let day = 1; day <= daysInMonth; day++) {\n      const date = new Date(year, month - 1, day);\n      const dayOfWeek = date.getDay();\n      const dayNames = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];\n      const dayName = dayNames[dayOfWeek];\n      const isHoliday = holidayDates.has(day);\n      const isWeekend = dayOfWeek === 0 || dayOfWeek === 6;\n      const today = new Date();\n      const isPastDay = date <= today;\n\n      // Verificar si hay servicios en este día (de todas las trabajadoras)\n      allUserAssignments?.forEach((assignment: AssignmentWithUser) => {\n        if (assignment.schedule && assignment.schedule[dayName as keyof typeof assignment.schedule]) {\n          const daySchedule = assignment.schedule[dayName as keyof typeof assignment.schedule];\n          if (daySchedule?.enabled && daySchedule.timeSlots && daySchedule.timeSlots.length > 0) {\n            let dayHours = 0;\n            daySchedule.timeSlots.forEach((slot: { start: string; end: string }) => {\n              const [startHour, startMin] = slot.start.split(':').map(Number);\n              const [endHour, endMin] = slot.end.split(':').map(Number);\n              const startTime = startHour + startMin / 60;\n              const endTime = endHour + endMin / 60;\n              dayHours += Math.max(0, endTime - startTime);\n            });\n\n            // Contar horas según el tipo de día\n            if (isHoliday || isWeekend) {\n              holidayHours += dayHours;\n              totalHolidays++;\n            } else {\n              workingHours += dayHours;\n              workingDays++;\n            }\n\n            // Solo contar como \"usadas\" si es un día pasado\n            if (isPastDay) {\n              totalUsedHoursForUser += dayHours;\n            }\n\n            // Contar como \"asignadas\" siempre\n            totalAssignedHoursForUser += dayHours;\n          }\n        }\n      });\n    }\n\n    // Calcular horas de esta trabajadora específica con este usuario\n    let workerAssignedHours = 0;\n    let workerUsedHours = 0;\n\n    const workerUserAssignments = workerAssignments.filter(a => a.user_id === userId);\n    \n    for (let day = 1; day <= daysInMonth; day++) {\n      const date = new Date(year, month - 1, day);\n      const dayOfWeek = date.getDay();\n      const dayNames = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];\n      const dayName = dayNames[dayOfWeek];\n      const isHoliday = holidayDates.has(day);\n      const isWeekend = dayOfWeek === 0 || dayOfWeek === 6;\n      const today = new Date();\n      const isPastDay = date <= today;\n\n      workerUserAssignments.forEach((assignment: AssignmentWithUser) => {\n        if (assignment.schedule && assignment.schedule[dayName as keyof typeof assignment.schedule]) {\n          const daySchedule = assignment.schedule[dayName as keyof typeof assignment.schedule];\n          if (daySchedule?.enabled && daySchedule.timeSlots && daySchedule.timeSlots.length > 0) {\n            let dayHours = 0;\n            daySchedule.timeSlots.forEach((slot: { start: string; end: string }) => {\n              const [startHour, startMin] = slot.start.split(':').map(Number);\n              const [endHour, endMin] = slot.end.split(':').map(Number);\n              const startTime = startHour + startMin / 60;\n              const endTime = endHour + endMin / 60;\n              dayHours += Math.max(0, endTime - startTime);\n            });\n\n            if (isPastDay) {\n              workerUsedHours += dayHours;\n            }\n            workerAssignedHours += dayHours;\n          }\n        }\n      });\n    }\n\n    // Aplicar la lógica de balance: comparar total de horas asignadas al usuario vs horas realizadas\n    const totalRemainingHours = Math.max(0, monthlyHours - totalUsedHoursForUser);\n    \n    // Determinar estado basado en el total de horas del usuario\n    let status: 'excess' | 'deficit' | 'perfect';\n    if (Math.abs(totalRemainingHours) < 0.1) {\n      status = 'perfect';\n    } else if (totalRemainingHours > 0) {\n      status = 'deficit';\n    } else {\n      status = 'excess';\n    }\n\n    const percentage = monthlyHours > 0 ? (totalUsedHoursForUser / monthlyHours) * 100 : 0;\n\n    userBalances.push({\n      userId,\n      userName: user.name,\n      userSurname: user.surname,\n      userAddress: user.address,\n      userPhone: user.phone,\n      monthlyHours,\n      assignedHours: Math.round(workerAssignedHours * 10) / 10, // Horas de esta trabajadora\n      usedHours: Math.round(workerUsedHours * 10) / 10, // Horas de esta trabajadora\n      remainingHours: Math.round(totalRemainingHours * 10) / 10, // Horas totales pendientes del usuario\n      status,\n      percentage: Math.round(percentage * 10) / 10,\n      assignments: workerUserAssignments,\n      holidayInfo: {\n        totalHolidays,\n        holidayHours: Math.round(holidayHours * 10) / 10,\n        workingDays,\n        workingHours: Math.round(workingHours * 10) / 10\n      }\n    });\n\n    totalAssignedHours += workerAssignedHours;\n    totalUsedHours += workerUsedHours;\n  }\n\n  const totalRemainingHours = totalAssignedHours - totalUsedHours;\n  \n  // Determinar estado general\n  let overallStatus: 'excess' | 'deficit' | 'perfect';\n  if (Math.abs(totalRemainingHours) < 0.1) {\n    overallStatus = 'perfect';\n  } else if (totalRemainingHours > 0) {\n    overallStatus = 'deficit';\n  } else {\n    overallStatus = 'excess';\n  }\n\n  return {\n    workerId,\n    workerName: workerAssignments[0]?.worker?.name || 'Trabajadora',\n    month,\n    year,\n    userBalances,\n    totalAssignedHours: Math.round(totalAssignedHours * 10) / 10,\n    totalUsedHours: Math.round(totalUsedHours * 10) / 10,\n    totalRemainingHours: Math.round(totalRemainingHours * 10) / 10,\n    overallStatus\n  };\n} ","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]},{"filePath":"/Users/alamia.es/Public/SAD/src/lib/holidayUtils.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'weeksInMonth' is assigned a value but never used.","line":229,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":229,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { supabase } from './supabase'\n\nexport interface Holiday {\n  id: string\n  date: string\n  name: string\n  type: 'national' | 'regional' | 'local'\n  region?: string\n  city?: string\n  is_active: boolean\n}\n\nexport interface DayInfo {\n  date: string\n  dayOfWeek: number // 0 = Domingo, 1 = Lunes, ..., 6 = Sábado\n  isWeekend: boolean\n  isHoliday: boolean\n  holidayInfo?: Holiday\n  isWorkingDay: boolean // Para trabajadoras laborables (L-V, no festivos)\n  isHolidayDay: boolean // Para trabajadoras festivas (S-D + festivos)\n}\n\nexport interface MonthCalendar {\n  year: number\n  month: number\n  days: DayInfo[]\n}\n\nexport interface DaySchedule {\n  enabled: boolean\n  timeSlots: { start: string; end: string }[]\n}\n\nexport interface WeeklySchedule {\n  monday: DaySchedule\n  tuesday: DaySchedule\n  wednesday: DaySchedule\n  thursday: DaySchedule\n  friday: DaySchedule\n  saturday: DaySchedule\n  sunday: DaySchedule\n  holiday?: DaySchedule // Festivos entre semana\n}\n\n/**\n * Obtiene todos los festivos de un año específico\n */\nexport async function getHolidaysForYear(year: number): Promise<Holiday[]> {\n  try {\n    const startDate = `${year}-01-01`\n    const endDate = `${year}-12-31`\n    \n    if (!supabase) {\n      return []\n    }\n    const { data, error } = await supabase\n      .from('holidays')\n      .select('*')\n      .gte('date', startDate)\n      .lte('date', endDate)\n      .eq('is_active', true)\n      .order('date')\n\n      if (error) {\n        return []\n      }\n  \n      return data || []\n    } catch {\n      return []\n    }\n  }\n\n/**\n * Verifica si una fecha es fin de semana\n */\nexport function isWeekend(date: Date): boolean {\n  const dayOfWeek = date.getDay()\n  return dayOfWeek === 0 || dayOfWeek === 6 // Domingo = 0, Sábado = 6\n}\n\n/**\n * Verifica si una fecha es un día laborable (L-V, no festivo)\n */\nexport function isWorkingDay(date: Date, holidays: Holiday[]): boolean {\n  const dayOfWeek = date.getDay()\n  const isWeekendDay = dayOfWeek === 0 || dayOfWeek === 6\n  \n  if (isWeekendDay) return false\n  \n  // Verificar si es festivo\n  const dateString = date.toISOString().split('T')[0]\n  const isHoliday = holidays.some(holiday => holiday.date === dateString)\n  \n  return !isHoliday\n}\n\n/**\n * Verifica si una fecha es un día festivo (S-D + festivos)\n */\nexport function isHolidayDay(date: Date, holidays: Holiday[]): boolean {\n  const dayOfWeek = date.getDay()\n  const isWeekendDay = dayOfWeek === 0 || dayOfWeek === 6\n  \n  if (isWeekendDay) return true\n  \n  // Verificar si es festivo\n  const dateString = date.toISOString().split('T')[0]\n  const isHoliday = holidays.some(holiday => holiday.date === dateString)\n  \n  return isHoliday\n}\n\n/**\n * Obtiene información completa de un día específico\n */\nexport function getDayInfo(date: Date, holidays: Holiday[]): DayInfo {\n  const dayOfWeek = date.getDay()\n  const dateString = date.toISOString().split('T')[0]\n  const isWeekendDay = isWeekend(date)\n  const holidayInfo = holidays.find(holiday => holiday.date === dateString)\n  const isHoliday = !!holidayInfo\n  \n  return {\n    date: dateString,\n    dayOfWeek,\n    isWeekend: isWeekendDay,\n    isHoliday,\n    holidayInfo,\n    isWorkingDay: isWorkingDay(date, holidays),\n    isHolidayDay: isHolidayDay(date, holidays)\n  }\n}\n\n/**\n * Genera un calendario completo para un mes específico\n */\nexport async function generateMonthCalendar(year: number, month: number): Promise<MonthCalendar> {\n  const holidays = await getHolidaysForYear(year)\n  const days: DayInfo[] = []\n  \n  // Eliminar variable no usada 'firstDay'\n  // Obtener el último día del mes\n  const lastDay = new Date(year, month, 0)\n  \n  // Generar todos los días del mes\n  for (let day = 1; day <= lastDay.getDate(); day++) {\n    const date = new Date(year, month - 1, day)\n    days.push(getDayInfo(date, holidays))\n  }\n  \n  return {\n    year,\n    month,\n    days\n  }\n}\n\n/**\n * Determina qué tipo de trabajadora debe atender un día específico\n */\nexport function getWorkerTypeForDay(dayInfo: DayInfo): 'laborables' | 'festivos' | 'flexible' {\n  if (dayInfo.isHolidayDay) {\n    return 'festivos'\n  } else if (dayInfo.isWorkingDay) {\n    return 'laborables'\n  } else {\n    // Días que no son ni laborables ni festivos (no debería ocurrir)\n    return 'flexible'\n  }\n}\n\n/**\n * Verifica si una trabajadora puede trabajar en un día específico\n */\nexport function canWorkerWorkOnDay(\n  workerType: 'laborables' | 'festivos' | 'flexible',\n  dayInfo: DayInfo\n): boolean {\n  switch (workerType) {\n    case 'laborables':\n      return dayInfo.isWorkingDay\n    case 'festivos':\n      return dayInfo.isHolidayDay\n    case 'flexible':\n      return true // Las trabajadoras flexibles pueden trabajar cualquier día\n    default:\n      return false\n  }\n}\n\n/**\n * Obtiene los días disponibles para una trabajadora en un mes específico\n */\nexport async function getAvailableDaysForWorker(\n  workerType: 'laborables' | 'festivos' | 'flexible',\n  year: number,\n  month: number\n): Promise<DayInfo[]> {\n  const calendar = await generateMonthCalendar(year, month)\n  \n  return calendar.days.filter(day => canWorkerWorkOnDay(workerType, day))\n}\n\n/**\n * Obtiene los días bloqueados para una trabajadora en un mes específico\n */\nexport async function getBlockedDaysForWorker(\n  workerType: 'laborables' | 'festivos' | 'flexible',\n  year: number,\n  month: number\n): Promise<DayInfo[]> {\n  const calendar = await generateMonthCalendar(year, month)\n  \n  return calendar.days.filter(day => !canWorkerWorkOnDay(workerType, day))\n}\n\n/**\n * Calcula las horas mensuales para una trabajadora considerando su tipo\n */\nexport async function calculateMonthlyHoursForWorker(\n  workerType: 'laborables' | 'festivos' | 'flexible',\n  weeklyHours: number,\n  year: number,\n  month: number\n): Promise<number> {\n  const availableDays = await getAvailableDaysForWorker(workerType, year, month)\n  // Eliminar variable no usada 'weeksInMonth'\n  const weeksInMonth = Math.ceil(availableDays.length / 7)\n  \n  // Para trabajadoras flexibles, usar todas las semanas del mes\n  if (workerType === 'flexible') {\n    const daysInMonth = new Date(year, month, 0).getDate()\n    const weeksInMonth = Math.ceil(daysInMonth / 7)\n    return weeklyHours * weeksInMonth\n  }\n  \n  // Para trabajadoras laborables y festivas, calcular basado en días disponibles\n  const workingWeeks = availableDays.length / (workerType === 'laborables' ? 5 : 2)\n  return weeklyHours * workingWeeks\n}\n\n/**\n * Obtiene el nombre del día de la semana en español\n */\nexport function getDayName(dayOfWeek: number): string {\n  const dayNames = [\n    'Domingo', 'Lunes', 'Martes', 'Miércoles', 'Jueves', 'Viernes', 'Sábado'\n  ]\n  return dayNames[dayOfWeek]\n}\n\n/**\n * Obtiene el nombre corto del día de la semana en español\n */\nexport function getShortDayName(dayOfWeek: number): string {\n  const dayNames = [\n    'Dom', 'Lun', 'Mar', 'Mié', 'Jue', 'Vie', 'Sáb'\n  ]\n  return dayNames[dayOfWeek]\n} ","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-require-imports","url":"https://typescript-eslint.io/rules/no-require-imports"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8334"}}]}]